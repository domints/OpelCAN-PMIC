
OpelCAN_PMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000582c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005934  08005934  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005934  08005934  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005934  08005934  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800593c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  20000020  0800595c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  0800595c  000209e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115a0  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b64  00000000  00000000  0003162b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00034190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000beb  00000000  00000000  000350e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f58  00000000  00000000  00035ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012af5  00000000  00000000  0004fc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000941ce  00000000  00000000  00062718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000363c  00000000  00000000  000f68e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f9f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080058d4 	.word	0x080058d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	080058d4 	.word	0x080058d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t seen_packets = 0;

uint32_t last_seen = 0;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hCan) {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hCan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000228:	4b4d      	ldr	r3, [pc, #308]	; (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800022a:	4a4e      	ldr	r2, [pc, #312]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	2100      	movs	r1, #0
 8000230:	f001 ff70 	bl	8002114 <HAL_CAN_GetRxMessage>
 8000234:	1e03      	subs	r3, r0, #0
 8000236:	d001      	beq.n	800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
		/* Reception Error */
		Error_Handler();
 8000238:	f001 f97c 	bl	8001534 <Error_Handler>
	}

	if ((RxHeader.StdId == OPEL_POWER_ID) && (RxHeader.IDE == CAN_ID_STD)
 800023c:	4b49      	ldr	r3, [pc, #292]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a49      	ldr	r2, [pc, #292]	; (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d113      	bne.n	800026e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
 8000246:	4b47      	ldr	r3, [pc, #284]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d10f      	bne.n	800026e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
			&& (RxHeader.DLC == 8)) {
 800024e:	4b45      	ldr	r3, [pc, #276]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	2b08      	cmp	r3, #8
 8000254:	d10b      	bne.n	800026e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		if (RxData[6] & 0x40) {
 8000256:	4b42      	ldr	r3, [pc, #264]	; (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000258:	799b      	ldrb	r3, [r3, #6]
 800025a:	001a      	movs	r2, r3
 800025c:	2340      	movs	r3, #64	; 0x40
 800025e:	4013      	ands	r3, r2
 8000260:	d002      	beq.n	8000268 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			esp_start();
 8000262:	f000 fdc5 	bl	8000df0 <esp_start>
		} else {
			esp_kill();
		}

		return;
 8000266:	e078      	b.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
			esp_kill();
 8000268:	f000 fdd7 	bl	8000e1a <esp_kill>
		return;
 800026c:	e075      	b.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
	}
	else if ((RxHeader.StdId == DISPLAY_CAN_ID) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8)) {
 800026e:	4b3d      	ldr	r3, [pc, #244]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a3e      	ldr	r2, [pc, #248]	; (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d150      	bne.n	800031a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
 8000278:	4b3a      	ldr	r3, [pc, #232]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14c      	bne.n	800031a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
 8000280:	4b38      	ldr	r3, [pc, #224]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000282:	691b      	ldr	r3, [r3, #16]
 8000284:	2b08      	cmp	r3, #8
 8000286:	d148      	bne.n	800031a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
		if (RxData[0] == 0x10) {
 8000288:	4b35      	ldr	r3, [pc, #212]	; (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b10      	cmp	r3, #16
 800028e:	d135      	bne.n	80002fc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
			can_tx_corrupt_ehu_packet();
 8000290:	f000 f970 	bl	8000574 <can_tx_corrupt_ehu_packet>
			uint16_t len = ((RxData[0] & 0x0F) << 8 | RxData[1]) + 1;
 8000294:	4b32      	ldr	r3, [pc, #200]	; (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	021b      	lsls	r3, r3, #8
 800029a:	b21a      	sxth	r2, r3
 800029c:	23f0      	movs	r3, #240	; 0xf0
 800029e:	011b      	lsls	r3, r3, #4
 80002a0:	4013      	ands	r3, r2
 80002a2:	b21a      	sxth	r2, r3
 80002a4:	4b2e      	ldr	r3, [pc, #184]	; (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80002a6:	785b      	ldrb	r3, [r3, #1]
 80002a8:	b21b      	sxth	r3, r3
 80002aa:	4313      	orrs	r3, r2
 80002ac:	b21b      	sxth	r3, r3
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	240e      	movs	r4, #14
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	3201      	adds	r2, #1
 80002b6:	801a      	strh	r2, [r3, #0]
			display_packets = len / 7;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	2107      	movs	r1, #7
 80002be:	0018      	movs	r0, r3
 80002c0:	f7ff ff22 	bl	8000108 <__udivsi3>
 80002c4:	0003      	movs	r3, r0
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b29      	ldr	r3, [pc, #164]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 80002cc:	701a      	strb	r2, [r3, #0]
			if (len % 7 > 0)
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	2107      	movs	r1, #7
 80002d4:	0018      	movs	r0, r3
 80002d6:	f7ff ff9d 	bl	8000214 <__aeabi_uidivmod>
 80002da:	000b      	movs	r3, r1
 80002dc:	b29b      	uxth	r3, r3
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d005      	beq.n	80002ee <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
				display_packets += 1;
 80002e2:	4b23      	ldr	r3, [pc, #140]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 80002ec:	701a      	strb	r2, [r3, #0]

			seen_packets = 1;
 80002ee:	4b21      	ldr	r3, [pc, #132]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]

			last_seen = 0;
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
		if (RxData[0] == 0x10) {
 80002fa:	e02d      	b.n	8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
		}
		else {
			seen_packets++;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000306:	701a      	strb	r2, [r3, #0]

			if (seen_packets == display_packets)
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800030a:	781a      	ldrb	r2, [r3, #0]
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	429a      	cmp	r2, r3
 8000312:	d121      	bne.n	8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
				can_tx_send_music_metadata();
 8000314:	f000 f9e2 	bl	80006dc <can_tx_send_music_metadata>
		if (RxData[0] == 0x10) {
 8000318:	e01e      	b.n	8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
		}
	}
	else if (RxHeader.StdId == STEERING_WHEEL && RxHeader.IDE == CAN_ID_STD && RxHeader.DLC == 3 && RxData[0] == 0x00) {
 800031a:	4b12      	ldr	r3, [pc, #72]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a17      	ldr	r2, [pc, #92]	; (800037c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d11a      	bne.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d116      	bne.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d112      	bne.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d10e      	bne.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
		if (RxData[1] == BTN_RIGHT_UP)
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800033e:	785b      	ldrb	r3, [r3, #1]
 8000340:	2b91      	cmp	r3, #145	; 0x91
 8000342:	d102      	bne.n	800034a <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
			esp_next_song();
 8000344:	f000 fe72 	bl	800102c <esp_next_song>
 8000348:	e007      	b.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
		else if (RxData[1] == BTN_RIGHT_DOWN)
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800034c:	785b      	ldrb	r3, [r3, #1]
 800034e:	2b92      	cmp	r3, #146	; 0x92
 8000350:	d103      	bne.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
			esp_prev_song();
 8000352:	f000 fe75 	bl	8001040 <esp_prev_song>
 8000356:	e000      	b.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
		if (RxData[0] == 0x10) {
 8000358:	46c0      	nop			; (mov r8, r8)
	}
}
 800035a:	46bd      	mov	sp, r7
 800035c:	b005      	add	sp, #20
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	20000058 	.word	0x20000058
 8000364:	2000003c 	.word	0x2000003c
 8000368:	00000501 	.word	0x00000501
 800036c:	000006c1 	.word	0x000006c1
 8000370:	20000060 	.word	0x20000060
 8000374:	20000061 	.word	0x20000061
 8000378:	20000064 	.word	0x20000064
 800037c:	00000206 	.word	0x00000206

08000380 <can_tx_set_hcan>:

void _can_tx_send_msg(CAN_Tx_Msg_t *message);
void _can_tx_send_and_dequeue();
void _can_tx_try_send_metadata();

void can_tx_set_hcan(CAN_HandleTypeDef *hcan) {
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	can_tx_hcan = *hcan;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <can_tx_set_hcan+0x3c>)
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800038e:	c313      	stmia	r3!, {r0, r1, r4}
 8000390:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000392:	c313      	stmia	r3!, {r0, r1, r4}
 8000394:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000396:	c313      	stmia	r3!, {r0, r1, r4}
 8000398:	6812      	ldr	r2, [r2, #0]
 800039a:	601a      	str	r2, [r3, #0]

	TxHeader.ExtId = 0x01;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <can_tx_set_hcan+0x40>)
 800039e:	2201      	movs	r2, #1
 80003a0:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <can_tx_set_hcan+0x40>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <can_tx_set_hcan+0x40>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80003ae:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <can_tx_set_hcan+0x40>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	751a      	strb	r2, [r3, #20]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b003      	add	sp, #12
 80003ba:	bd90      	pop	{r4, r7, pc}
 80003bc:	20000068 	.word	0x20000068
 80003c0:	20000090 	.word	0x20000090

080003c4 <can_tx_set_title>:

void can_tx_set_title(uint8_t *buf, uint8_t len) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	000a      	movs	r2, r1
 80003ce:	1cfb      	adds	r3, r7, #3
 80003d0:	701a      	strb	r2, [r3, #0]
	memcpy(audio_title, buf, len);
 80003d2:	1cfb      	adds	r3, r7, #3
 80003d4:	781a      	ldrb	r2, [r3, #0]
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <can_tx_set_title+0x30>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f005 fa70 	bl	80058c0 <memcpy>
	audio_title_len = len;
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <can_tx_set_title+0x34>)
 80003e2:	1cfa      	adds	r2, r7, #3
 80003e4:	7812      	ldrb	r2, [r2, #0]
 80003e6:	701a      	strb	r2, [r3, #0]
	_can_tx_try_send_metadata();
 80003e8:	f000 f840 	bl	800046c <_can_tx_try_send_metadata>
}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b002      	add	sp, #8
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200003bc 	.word	0x200003bc
 80003f8:	2000043c 	.word	0x2000043c

080003fc <can_tx_set_artist>:

void can_tx_set_artist(uint8_t *buf, uint8_t len) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	000a      	movs	r2, r1
 8000406:	1cfb      	adds	r3, r7, #3
 8000408:	701a      	strb	r2, [r3, #0]
	memcpy(audio_artist, buf, len);
 800040a:	1cfb      	adds	r3, r7, #3
 800040c:	781a      	ldrb	r2, [r3, #0]
 800040e:	6879      	ldr	r1, [r7, #4]
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <can_tx_set_artist+0x30>)
 8000412:	0018      	movs	r0, r3
 8000414:	f005 fa54 	bl	80058c0 <memcpy>
	audio_artist_len = len;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <can_tx_set_artist+0x34>)
 800041a:	1cfa      	adds	r2, r7, #3
 800041c:	7812      	ldrb	r2, [r2, #0]
 800041e:	701a      	strb	r2, [r3, #0]
	_can_tx_try_send_metadata();
 8000420:	f000 f824 	bl	800046c <_can_tx_try_send_metadata>
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000440 	.word	0x20000440
 8000430:	200004c0 	.word	0x200004c0

08000434 <can_tx_set_album>:

void can_tx_set_album(uint8_t *buf, uint8_t len) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	000a      	movs	r2, r1
 800043e:	1cfb      	adds	r3, r7, #3
 8000440:	701a      	strb	r2, [r3, #0]
	memcpy(audio_album, buf, len);
 8000442:	1cfb      	adds	r3, r7, #3
 8000444:	781a      	ldrb	r2, [r3, #0]
 8000446:	6879      	ldr	r1, [r7, #4]
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <can_tx_set_album+0x30>)
 800044a:	0018      	movs	r0, r3
 800044c:	f005 fa38 	bl	80058c0 <memcpy>
	audio_album_len = len;
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <can_tx_set_album+0x34>)
 8000452:	1cfa      	adds	r2, r7, #3
 8000454:	7812      	ldrb	r2, [r2, #0]
 8000456:	701a      	strb	r2, [r3, #0]
	_can_tx_try_send_metadata();
 8000458:	f000 f808 	bl	800046c <_can_tx_try_send_metadata>
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200004c4 	.word	0x200004c4
 8000468:	20000544 	.word	0x20000544

0800046c <_can_tx_try_send_metadata>:

void _can_tx_try_send_metadata() {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	if (ticks_since_last_corrupt < CAN_SEND_BEFORE) {
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <_can_tx_try_send_metadata+0x18>)
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	2b6f      	cmp	r3, #111	; 0x6f
 8000476:	d801      	bhi.n	800047c <_can_tx_try_send_metadata+0x10>
		can_tx_send_music_metadata();
 8000478:	f000 f930 	bl	80006dc <can_tx_send_music_metadata>
	}
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	200003b8 	.word	0x200003b8

08000488 <can_tx_send_packet>:

void can_tx_send_packet(uint32_t id, uint8_t *data, uint8_t len) {
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08b      	sub	sp, #44	; 0x2c
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	701a      	strb	r2, [r3, #0]
	if (can_tx_head == can_tx_tail && can_tx_cts) {
 8000496:	4b33      	ldr	r3, [pc, #204]	; (8000564 <can_tx_send_packet+0xdc>)
 8000498:	781a      	ldrb	r2, [r3, #0]
 800049a:	4b33      	ldr	r3, [pc, #204]	; (8000568 <can_tx_send_packet+0xe0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d121      	bne.n	80004e6 <can_tx_send_packet+0x5e>
 80004a2:	4b32      	ldr	r3, [pc, #200]	; (800056c <can_tx_send_packet+0xe4>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d01d      	beq.n	80004e6 <can_tx_send_packet+0x5e>
		CAN_Tx_Msg_t msg = { .id = id, .len = len };
 80004aa:	2414      	movs	r4, #20
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2310      	movs	r3, #16
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f005 f9d6 	bl	8005866 <memset>
 80004ba:	0020      	movs	r0, r4
 80004bc:	183b      	adds	r3, r7, r0
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	183b      	adds	r3, r7, r0
 80004c4:	1dfa      	adds	r2, r7, #7
 80004c6:	7812      	ldrb	r2, [r2, #0]
 80004c8:	731a      	strb	r2, [r3, #12]

		memcpy(msg.data, data, len);
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781a      	ldrb	r2, [r3, #0]
 80004ce:	68b9      	ldr	r1, [r7, #8]
 80004d0:	0004      	movs	r4, r0
 80004d2:	183b      	adds	r3, r7, r0
 80004d4:	3304      	adds	r3, #4
 80004d6:	0018      	movs	r0, r3
 80004d8:	f005 f9f2 	bl	80058c0 <memcpy>

		_can_tx_send_msg(&msg);
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 f8b0 	bl	8000644 <_can_tx_send_msg>
 80004e4:	e03b      	b.n	800055e <can_tx_send_packet+0xd6>
		return;
	}

	uint8_t next;

	next = can_tx_head + 1; // next is where head will point to after this write.
 80004e6:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <can_tx_send_packet+0xdc>)
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	2127      	movs	r1, #39	; 0x27
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	3201      	adds	r2, #1
 80004f0:	701a      	strb	r2, [r3, #0]
	if (next >= CAN_MAILBOX_LENGTH)
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b2f      	cmp	r3, #47	; 0x2f
 80004f8:	d902      	bls.n	8000500 <can_tx_send_packet+0x78>
		next = 0;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]

	if (next == can_tx_tail) // if the head + 1 == tail, circular buffer is full
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <can_tx_send_packet+0xe0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2427      	movs	r4, #39	; 0x27
 8000506:	193a      	adds	r2, r7, r4
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	429a      	cmp	r2, r3
 800050c:	d026      	beq.n	800055c <can_tx_send_packet+0xd4>
		return;

	can_tx_mailbox[can_tx_head].id = id;
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <can_tx_send_packet+0xdc>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	001a      	movs	r2, r3
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <can_tx_send_packet+0xe8>)
 8000516:	0112      	lsls	r2, r2, #4
 8000518:	68f9      	ldr	r1, [r7, #12]
 800051a:	50d1      	str	r1, [r2, r3]
	can_tx_mailbox[can_tx_head].len = len;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <can_tx_send_packet+0xdc>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4a13      	ldr	r2, [pc, #76]	; (8000570 <can_tx_send_packet+0xe8>)
 8000522:	011b      	lsls	r3, r3, #4
 8000524:	18d3      	adds	r3, r2, r3
 8000526:	330c      	adds	r3, #12
 8000528:	1dfa      	adds	r2, r7, #7
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	701a      	strb	r2, [r3, #0]
	memcpy(can_tx_mailbox[can_tx_head].data, data, len);
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <can_tx_send_packet+0xdc>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	011a      	lsls	r2, r3, #4
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <can_tx_send_packet+0xe8>)
 8000536:	18d3      	adds	r3, r2, r3
 8000538:	1d18      	adds	r0, r3, #4
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	781a      	ldrb	r2, [r3, #0]
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	0019      	movs	r1, r3
 8000542:	f005 f9bd 	bl	80058c0 <memcpy>

	can_tx_head = next;
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <can_tx_send_packet+0xdc>)
 8000548:	193a      	adds	r2, r7, r4
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	701a      	strb	r2, [r3, #0]

	if (can_tx_cts) {
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <can_tx_send_packet+0xe4>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d003      	beq.n	800055e <can_tx_send_packet+0xd6>
		_can_tx_send_and_dequeue();
 8000556:	f000 f84b 	bl	80005f0 <_can_tx_send_and_dequeue>
 800055a:	e000      	b.n	800055e <can_tx_send_packet+0xd6>
		return;
 800055c:	46c0      	nop			; (mov r8, r8)
	}
}
 800055e:	46bd      	mov	sp, r7
 8000560:	b00b      	add	sp, #44	; 0x2c
 8000562:	bd90      	pop	{r4, r7, pc}
 8000564:	200003b5 	.word	0x200003b5
 8000568:	200003b6 	.word	0x200003b6
 800056c:	20000000 	.word	0x20000000
 8000570:	200000b4 	.word	0x200000b4

08000574 <can_tx_corrupt_ehu_packet>:

void can_tx_corrupt_ehu_packet() {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	ticks_since_last_corrupt = 0;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <can_tx_corrupt_ehu_packet+0x18>)
 800057a:	2200      	movs	r2, #0
 800057c:	801a      	strh	r2, [r3, #0]
	corrupt_ehu = true;
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <can_tx_corrupt_ehu_packet+0x1c>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	200003b8 	.word	0x200003b8
 8000590:	200003b4 	.word	0x200003b4

08000594 <can_tx_send_next>:

void can_tx_send_next() {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	ticks_since_last_corrupt++;
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <can_tx_send_next+0x48>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <can_tx_send_next+0x48>)
 80005a4:	801a      	strh	r2, [r3, #0]
	if (corrupt_ehu) {
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <can_tx_send_next+0x4c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00c      	beq.n	80005c8 <can_tx_send_next+0x34>
		uint8_t data[8] = { 0x10,0x2E,0xC0,0x00,0x2B,0x03,0x01,0x01 };
 80005ae:	003b      	movs	r3, r7
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <can_tx_send_next+0x50>)
 80005b2:	ca03      	ldmia	r2!, {r0, r1}
 80005b4:	c303      	stmia	r3!, {r0, r1}
		can_tx_send_packet(0x6C1, data, 8);
 80005b6:	003b      	movs	r3, r7
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <can_tx_send_next+0x54>)
 80005ba:	2208      	movs	r2, #8
 80005bc:	0019      	movs	r1, r3
 80005be:	f7ff ff63 	bl	8000488 <can_tx_send_packet>
		corrupt_ehu = false;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <can_tx_send_next+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
	}
	if (can_tx_cts) {
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <can_tx_send_next+0x58>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <can_tx_send_next+0x40>
		_can_tx_send_and_dequeue();
 80005d0:	f000 f80e 	bl	80005f0 <_can_tx_send_and_dequeue>
	}
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b002      	add	sp, #8
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200003b8 	.word	0x200003b8
 80005e0:	200003b4 	.word	0x200003b4
 80005e4:	080058ec 	.word	0x080058ec
 80005e8:	000006c1 	.word	0x000006c1
 80005ec:	20000000 	.word	0x20000000

080005f0 <_can_tx_send_and_dequeue>:

void _can_tx_send_and_dequeue() {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	int next;

	if (can_tx_head == can_tx_tail) // if the head == tail, we don't have any data
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <_can_tx_send_and_dequeue+0x48>)
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <_can_tx_send_and_dequeue+0x4c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d015      	beq.n	800062e <_can_tx_send_and_dequeue+0x3e>
		return;

	next = can_tx_tail + 1; // next is where tail will point to after this read.
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <_can_tx_send_and_dequeue+0x4c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
	if (next >= CAN_MAILBOX_LENGTH)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b2f      	cmp	r3, #47	; 0x2f
 800060e:	dd01      	ble.n	8000614 <_can_tx_send_and_dequeue+0x24>
		next = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]

	_can_tx_send_msg(&can_tx_mailbox[can_tx_tail]);  // Read data and then move
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <_can_tx_send_and_dequeue+0x4c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	011a      	lsls	r2, r3, #4
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <_can_tx_send_and_dequeue+0x50>)
 800061c:	18d3      	adds	r3, r2, r3
 800061e:	0018      	movs	r0, r3
 8000620:	f000 f810 	bl	8000644 <_can_tx_send_msg>
	can_tx_tail = next;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <_can_tx_send_and_dequeue+0x4c>)
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	e000      	b.n	8000630 <_can_tx_send_and_dequeue+0x40>
		return;
 800062e:	46c0      	nop			; (mov r8, r8)
}
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	200003b5 	.word	0x200003b5
 800063c:	200003b6 	.word	0x200003b6
 8000640:	200000b4 	.word	0x200000b4

08000644 <_can_tx_send_msg>:

void _can_tx_send_msg(CAN_Tx_Msg_t *message) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	can_tx_cts = false;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <_can_tx_send_msg+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	TxHeader.StdId = message->id;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <_can_tx_send_msg+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = message->len;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	7b1b      	ldrb	r3, [r3, #12]
 800065e:	001a      	movs	r2, r3
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <_can_tx_send_msg+0x54>)
 8000662:	611a      	str	r2, [r3, #16]

	memcpy(TxData, message->data, message->len);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	1d19      	adds	r1, r3, #4
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7b1b      	ldrb	r3, [r3, #12]
 800066c:	001a      	movs	r2, r3
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <_can_tx_send_msg+0x58>)
 8000670:	0018      	movs	r0, r3
 8000672:	f005 f925 	bl	80058c0 <memcpy>

	if (HAL_CAN_AddTxMessage(&can_tx_hcan, &TxHeader, TxData, &TxMailbox)
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <_can_tx_send_msg+0x5c>)
 8000678:	4a08      	ldr	r2, [pc, #32]	; (800069c <_can_tx_send_msg+0x58>)
 800067a:	4907      	ldr	r1, [pc, #28]	; (8000698 <_can_tx_send_msg+0x54>)
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <_can_tx_send_msg+0x60>)
 800067e:	f001 fc77 	bl	8001f70 <HAL_CAN_AddTxMessage>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <_can_tx_send_msg+0x46>
			!= HAL_OK) {
		Error_Handler();
 8000686:	f000 ff55 	bl	8001534 <Error_Handler>
	}
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000000 	.word	0x20000000
 8000698:	20000090 	.word	0x20000090
 800069c:	200000a8 	.word	0x200000a8
 80006a0:	200000b0 	.word	0x200000b0
 80006a4:	20000068 	.word	0x20000068

080006a8 <_next_tp_id>:

uint8_t _next_tp_id(uint8_t lastId) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	0002      	movs	r2, r0
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	701a      	strb	r2, [r3, #0]
	if (lastId == 0x10) {
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b10      	cmp	r3, #16
 80006ba:	d101      	bne.n	80006c0 <_next_tp_id+0x18>
		return 0x21;
 80006bc:	2321      	movs	r3, #33	; 0x21
 80006be:	e009      	b.n	80006d4 <_next_tp_id+0x2c>
	}
	if (lastId == 0x2F) {
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b2f      	cmp	r3, #47	; 0x2f
 80006c6:	d101      	bne.n	80006cc <_next_tp_id+0x24>
		return 0x20;
 80006c8:	2320      	movs	r3, #32
 80006ca:	e003      	b.n	80006d4 <_next_tp_id+0x2c>
	}
	return lastId + 1;
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	b2db      	uxtb	r3, r3
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}

080006dc <can_tx_send_music_metadata>:

void can_tx_send_music_metadata() {
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	b091      	sub	sp, #68	; 0x44
 80006e0:	af00      	add	r7, sp, #0
	uint8_t space_data[2] = { 0x00, 0x20 };
 80006e2:	2028      	movs	r0, #40	; 0x28
 80006e4:	183b      	adds	r3, r7, r0
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0192      	lsls	r2, r2, #6
 80006ea:	801a      	strh	r2, [r3, #0]
	uint8_t title_len = audio_title_len;
 80006ec:	213f      	movs	r1, #63	; 0x3f
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	4ad8      	ldr	r2, [pc, #864]	; (8000a54 <can_tx_send_music_metadata+0x378>)
 80006f2:	7812      	ldrb	r2, [r2, #0]
 80006f4:	701a      	strb	r2, [r3, #0]
	uint8_t artist_len = audio_artist_len;
 80006f6:	233e      	movs	r3, #62	; 0x3e
 80006f8:	18fb      	adds	r3, r7, r3
 80006fa:	4ad7      	ldr	r2, [pc, #860]	; (8000a58 <can_tx_send_music_metadata+0x37c>)
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	701a      	strb	r2, [r3, #0]
	uint8_t album_len = audio_album_len;
 8000700:	233d      	movs	r3, #61	; 0x3d
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	4ad5      	ldr	r2, [pc, #852]	; (8000a5c <can_tx_send_music_metadata+0x380>)
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	701a      	strb	r2, [r3, #0]
	uint8_t * title = audio_title;
 800070a:	4bd5      	ldr	r3, [pc, #852]	; (8000a60 <can_tx_send_music_metadata+0x384>)
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t * artist = audio_artist;
 800070e:	4bd5      	ldr	r3, [pc, #852]	; (8000a64 <can_tx_send_music_metadata+0x388>)
 8000710:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t * album = audio_album;
 8000712:	4bd5      	ldr	r3, [pc, #852]	; (8000a68 <can_tx_send_music_metadata+0x38c>)
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
	if (title_len == 0) {
 8000716:	187b      	adds	r3, r7, r1
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d104      	bne.n	8000728 <can_tx_send_music_metadata+0x4c>
		title_len = 2;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2202      	movs	r2, #2
 8000722:	701a      	strb	r2, [r3, #0]
		title = space_data;
 8000724:	183b      	adds	r3, r7, r0
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if (artist_len == 0) {
 8000728:	223e      	movs	r2, #62	; 0x3e
 800072a:	18bb      	adds	r3, r7, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d105      	bne.n	800073e <can_tx_send_music_metadata+0x62>
		artist_len = 2;
 8000732:	18bb      	adds	r3, r7, r2
 8000734:	2202      	movs	r2, #2
 8000736:	701a      	strb	r2, [r3, #0]
		artist = space_data;
 8000738:	2328      	movs	r3, #40	; 0x28
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (album_len == 0) {
 800073e:	223d      	movs	r2, #61	; 0x3d
 8000740:	18bb      	adds	r3, r7, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d105      	bne.n	8000754 <can_tx_send_music_metadata+0x78>
		album_len = 2;
 8000748:	18bb      	adds	r3, r7, r2
 800074a:	2202      	movs	r2, #2
 800074c:	701a      	strb	r2, [r3, #0]
		album = space_data;
 800074e:	2328      	movs	r3, #40	; 0x28
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
	}

	uint8_t tpSize = 30 + title_len + audio_artist_len + audio_album_len;
 8000754:	4bc0      	ldr	r3, [pc, #768]	; (8000a58 <can_tx_send_music_metadata+0x37c>)
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	233f      	movs	r3, #63	; 0x3f
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	18d3      	adds	r3, r2, r3
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4bbe      	ldr	r3, [pc, #760]	; (8000a5c <can_tx_send_music_metadata+0x380>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	18d3      	adds	r3, r2, r3
 8000768:	b2da      	uxtb	r2, r3
 800076a:	242a      	movs	r4, #42	; 0x2a
 800076c:	193b      	adds	r3, r7, r4
 800076e:	321e      	adds	r2, #30
 8000770:	701a      	strb	r2, [r3, #0]

	uint8_t buffer[8] = { 0 };
 8000772:	2220      	movs	r2, #32
 8000774:	18bb      	adds	r3, r7, r2
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
	uint8_t msgIx = 0x10;
 800077e:	212f      	movs	r1, #47	; 0x2f
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2210      	movs	r2, #16
 8000784:	701a      	strb	r2, [r3, #0]
	uint8_t bfrIx = 0;
 8000786:	222e      	movs	r2, #46	; 0x2e
 8000788:	18bb      	adds	r3, r7, r2
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]

	uint8_t buf_1[8] =
 800078e:	2018      	movs	r0, #24
 8000790:	183b      	adds	r3, r7, r0
 8000792:	187a      	adds	r2, r7, r1
 8000794:	7812      	ldrb	r2, [r2, #0]
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	183b      	adds	r3, r7, r0
 800079a:	193a      	adds	r2, r7, r4
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	705a      	strb	r2, [r3, #1]
 80007a0:	183b      	adds	r3, r7, r0
 80007a2:	2240      	movs	r2, #64	; 0x40
 80007a4:	709a      	strb	r2, [r3, #2]
 80007a6:	183b      	adds	r3, r7, r0
 80007a8:	2200      	movs	r2, #0
 80007aa:	70da      	strb	r2, [r3, #3]
			{ msgIx, tpSize, 0x40, 0x00, tpSize - 3, 0x03, 0x01, 0x05 };
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3b03      	subs	r3, #3
 80007b2:	b2da      	uxtb	r2, r3
	uint8_t buf_1[8] =
 80007b4:	0006      	movs	r6, r0
 80007b6:	19bb      	adds	r3, r7, r6
 80007b8:	711a      	strb	r2, [r3, #4]
 80007ba:	19bb      	adds	r3, r7, r6
 80007bc:	2203      	movs	r2, #3
 80007be:	715a      	strb	r2, [r3, #5]
 80007c0:	19bb      	adds	r3, r7, r6
 80007c2:	2201      	movs	r2, #1
 80007c4:	719a      	strb	r2, [r3, #6]
 80007c6:	19bb      	adds	r3, r7, r6
 80007c8:	2205      	movs	r2, #5
 80007ca:	71da      	strb	r2, [r3, #7]
	uint8_t buf_2[8] = { msgIx = _next_tp_id(msgIx), 0x00, 0x41, 0x00, 0x75,
 80007cc:	187c      	adds	r4, r7, r1
 80007ce:	000d      	movs	r5, r1
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff ff67 	bl	80006a8 <_next_tp_id>
 80007da:	0003      	movs	r3, r0
 80007dc:	7023      	strb	r3, [r4, #0]
 80007de:	2010      	movs	r0, #16
 80007e0:	183b      	adds	r3, r7, r0
 80007e2:	0029      	movs	r1, r5
 80007e4:	187a      	adds	r2, r7, r1
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	183b      	adds	r3, r7, r0
 80007ec:	2200      	movs	r2, #0
 80007ee:	705a      	strb	r2, [r3, #1]
 80007f0:	183b      	adds	r3, r7, r0
 80007f2:	2241      	movs	r2, #65	; 0x41
 80007f4:	709a      	strb	r2, [r3, #2]
 80007f6:	183b      	adds	r3, r7, r0
 80007f8:	2200      	movs	r2, #0
 80007fa:	70da      	strb	r2, [r3, #3]
 80007fc:	183b      	adds	r3, r7, r0
 80007fe:	2275      	movs	r2, #117	; 0x75
 8000800:	711a      	strb	r2, [r3, #4]
 8000802:	183b      	adds	r3, r7, r0
 8000804:	2200      	movs	r2, #0
 8000806:	715a      	strb	r2, [r3, #5]
 8000808:	183b      	adds	r3, r7, r0
 800080a:	2263      	movs	r2, #99	; 0x63
 800080c:	719a      	strb	r2, [r3, #6]
 800080e:	183b      	adds	r3, r7, r0
 8000810:	2200      	movs	r2, #0
 8000812:	71da      	strb	r2, [r3, #7]
			0x00, 0x63, 0x00 };
	uint8_t buf_3[8] = { msgIx = _next_tp_id(msgIx), 0x69, 0x00, 0x6F, 0x02,
 8000814:	187c      	adds	r4, r7, r1
 8000816:	000d      	movs	r5, r1
 8000818:	187b      	adds	r3, r7, r1
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff ff43 	bl	80006a8 <_next_tp_id>
 8000822:	0003      	movs	r3, r0
 8000824:	7023      	strb	r3, [r4, #0]
 8000826:	2108      	movs	r1, #8
 8000828:	187b      	adds	r3, r7, r1
 800082a:	002c      	movs	r4, r5
 800082c:	193a      	adds	r2, r7, r4
 800082e:	7812      	ldrb	r2, [r2, #0]
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2269      	movs	r2, #105	; 0x69
 8000836:	705a      	strb	r2, [r3, #1]
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	709a      	strb	r2, [r3, #2]
 800083e:	187b      	adds	r3, r7, r1
 8000840:	226f      	movs	r2, #111	; 0x6f
 8000842:	70da      	strb	r2, [r3, #3]
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2202      	movs	r2, #2
 8000848:	711a      	strb	r2, [r3, #4]
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2203      	movs	r2, #3
 800084e:	715a      	strb	r2, [r3, #5]
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	719a      	strb	r2, [r3, #6]
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2241      	movs	r2, #65	; 0x41
 800085a:	71da      	strb	r2, [r3, #7]
			0x03, 0x00, 0x41 };
	uint8_t buf_4[8] = { msgIx = _next_tp_id(msgIx), 0x00, 0x75, 0x00, 0x78,
 800085c:	0025      	movs	r5, r4
 800085e:	197c      	adds	r4, r7, r5
 8000860:	197b      	adds	r3, r7, r5
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ff1f 	bl	80006a8 <_next_tp_id>
 800086a:	0003      	movs	r3, r0
 800086c:	7023      	strb	r3, [r4, #0]
 800086e:	003b      	movs	r3, r7
 8000870:	002c      	movs	r4, r5
 8000872:	193a      	adds	r2, r7, r4
 8000874:	7812      	ldrb	r2, [r2, #0]
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	003b      	movs	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	705a      	strb	r2, [r3, #1]
 800087e:	003b      	movs	r3, r7
 8000880:	2275      	movs	r2, #117	; 0x75
 8000882:	709a      	strb	r2, [r3, #2]
 8000884:	003b      	movs	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	70da      	strb	r2, [r3, #3]
 800088a:	003b      	movs	r3, r7
 800088c:	2278      	movs	r2, #120	; 0x78
 800088e:	711a      	strb	r2, [r3, #4]
 8000890:	003b      	movs	r3, r7
 8000892:	2210      	movs	r2, #16
 8000894:	715a      	strb	r2, [r3, #5]
 8000896:	233f      	movs	r3, #63	; 0x3f
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	003b      	movs	r3, r7
 80008a2:	719a      	strb	r2, [r3, #6]
			0x10, title_len / 2, title[0] };
 80008a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008a6:	781a      	ldrb	r2, [r3, #0]
	uint8_t buf_4[8] = { msgIx = _next_tp_id(msgIx), 0x00, 0x75, 0x00, 0x78,
 80008a8:	003b      	movs	r3, r7
 80008aa:	71da      	strb	r2, [r3, #7]
	can_tx_send_packet(DISPLAY_CAN_ID, buf_1, 8);
 80008ac:	19bb      	adds	r3, r7, r6
 80008ae:	486f      	ldr	r0, [pc, #444]	; (8000a6c <can_tx_send_music_metadata+0x390>)
 80008b0:	2208      	movs	r2, #8
 80008b2:	0019      	movs	r1, r3
 80008b4:	f7ff fde8 	bl	8000488 <can_tx_send_packet>
	can_tx_send_packet(DISPLAY_CAN_ID, buf_2, 8);
 80008b8:	2010      	movs	r0, #16
 80008ba:	183b      	adds	r3, r7, r0
 80008bc:	486b      	ldr	r0, [pc, #428]	; (8000a6c <can_tx_send_music_metadata+0x390>)
 80008be:	2208      	movs	r2, #8
 80008c0:	0019      	movs	r1, r3
 80008c2:	f7ff fde1 	bl	8000488 <can_tx_send_packet>
	can_tx_send_packet(DISPLAY_CAN_ID, buf_3, 8);
 80008c6:	2108      	movs	r1, #8
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	4868      	ldr	r0, [pc, #416]	; (8000a6c <can_tx_send_music_metadata+0x390>)
 80008cc:	2208      	movs	r2, #8
 80008ce:	0019      	movs	r1, r3
 80008d0:	f7ff fdda 	bl	8000488 <can_tx_send_packet>
	can_tx_send_packet(DISPLAY_CAN_ID, buf_4, 8);
 80008d4:	003b      	movs	r3, r7
 80008d6:	4865      	ldr	r0, [pc, #404]	; (8000a6c <can_tx_send_music_metadata+0x390>)
 80008d8:	2208      	movs	r2, #8
 80008da:	0019      	movs	r1, r3
 80008dc:	f7ff fdd4 	bl	8000488 <can_tx_send_packet>
	buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 80008e0:	0025      	movs	r5, r4
 80008e2:	197c      	adds	r4, r7, r5
 80008e4:	197b      	adds	r3, r7, r5
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff fedd 	bl	80006a8 <_next_tp_id>
 80008ee:	0003      	movs	r3, r0
 80008f0:	7023      	strb	r3, [r4, #0]
 80008f2:	222e      	movs	r2, #46	; 0x2e
 80008f4:	18bb      	adds	r3, r7, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	18ba      	adds	r2, r7, r2
 80008fa:	1c59      	adds	r1, r3, #1
 80008fc:	7011      	strb	r1, [r2, #0]
 80008fe:	0019      	movs	r1, r3
 8000900:	2220      	movs	r2, #32
 8000902:	18bb      	adds	r3, r7, r2
 8000904:	197a      	adds	r2, r7, r5
 8000906:	7812      	ldrb	r2, [r2, #0]
 8000908:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 1; i < title_len; i++) {
 800090a:	232d      	movs	r3, #45	; 0x2d
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	e036      	b.n	8000982 <can_tx_send_music_metadata+0x2a6>
		buffer[bfrIx++] = title[i];
 8000914:	232d      	movs	r3, #45	; 0x2d
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800091c:	18d2      	adds	r2, r2, r3
 800091e:	252e      	movs	r5, #46	; 0x2e
 8000920:	197b      	adds	r3, r7, r5
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	1979      	adds	r1, r7, r5
 8000926:	1c58      	adds	r0, r3, #1
 8000928:	7008      	strb	r0, [r1, #0]
 800092a:	0019      	movs	r1, r3
 800092c:	7812      	ldrb	r2, [r2, #0]
 800092e:	2620      	movs	r6, #32
 8000930:	19bb      	adds	r3, r7, r6
 8000932:	545a      	strb	r2, [r3, r1]
		if (bfrIx == 8) {
 8000934:	197b      	adds	r3, r7, r5
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b08      	cmp	r3, #8
 800093a:	d11c      	bne.n	8000976 <can_tx_send_music_metadata+0x29a>
			can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 800093c:	19bb      	adds	r3, r7, r6
 800093e:	484b      	ldr	r0, [pc, #300]	; (8000a6c <can_tx_send_music_metadata+0x390>)
 8000940:	2208      	movs	r2, #8
 8000942:	0019      	movs	r1, r3
 8000944:	f7ff fda0 	bl	8000488 <can_tx_send_packet>
			bfrIx = 0;
 8000948:	197b      	adds	r3, r7, r5
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
			buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 800094e:	232f      	movs	r3, #47	; 0x2f
 8000950:	18fc      	adds	r4, r7, r3
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff fea6 	bl	80006a8 <_next_tp_id>
 800095c:	0003      	movs	r3, r0
 800095e:	7023      	strb	r3, [r4, #0]
 8000960:	197b      	adds	r3, r7, r5
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	197a      	adds	r2, r7, r5
 8000966:	1c59      	adds	r1, r3, #1
 8000968:	7011      	strb	r1, [r2, #0]
 800096a:	0019      	movs	r1, r3
 800096c:	19bb      	adds	r3, r7, r6
 800096e:	222f      	movs	r2, #47	; 0x2f
 8000970:	18ba      	adds	r2, r7, r2
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 1; i < title_len; i++) {
 8000976:	212d      	movs	r1, #45	; 0x2d
 8000978:	187b      	adds	r3, r7, r1
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	187b      	adds	r3, r7, r1
 800097e:	3201      	adds	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	232d      	movs	r3, #45	; 0x2d
 8000984:	18fa      	adds	r2, r7, r3
 8000986:	233f      	movs	r3, #63	; 0x3f
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	429a      	cmp	r2, r3
 8000990:	d3c0      	bcc.n	8000914 <can_tx_send_music_metadata+0x238>
		}
	}

	buffer[bfrIx++] = 0x11;
 8000992:	252e      	movs	r5, #46	; 0x2e
 8000994:	197b      	adds	r3, r7, r5
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	197a      	adds	r2, r7, r5
 800099a:	1c59      	adds	r1, r3, #1
 800099c:	7011      	strb	r1, [r2, #0]
 800099e:	001a      	movs	r2, r3
 80009a0:	2620      	movs	r6, #32
 80009a2:	19bb      	adds	r3, r7, r6
 80009a4:	2111      	movs	r1, #17
 80009a6:	5499      	strb	r1, [r3, r2]
	if (bfrIx == 8) {
 80009a8:	197b      	adds	r3, r7, r5
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b08      	cmp	r3, #8
 80009ae:	d11c      	bne.n	80009ea <can_tx_send_music_metadata+0x30e>
		can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 80009b0:	19bb      	adds	r3, r7, r6
 80009b2:	482e      	ldr	r0, [pc, #184]	; (8000a6c <can_tx_send_music_metadata+0x390>)
 80009b4:	2208      	movs	r2, #8
 80009b6:	0019      	movs	r1, r3
 80009b8:	f7ff fd66 	bl	8000488 <can_tx_send_packet>
		bfrIx = 0;
 80009bc:	197b      	adds	r3, r7, r5
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 80009c2:	232f      	movs	r3, #47	; 0x2f
 80009c4:	18fc      	adds	r4, r7, r3
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fe6c 	bl	80006a8 <_next_tp_id>
 80009d0:	0003      	movs	r3, r0
 80009d2:	7023      	strb	r3, [r4, #0]
 80009d4:	197b      	adds	r3, r7, r5
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	197a      	adds	r2, r7, r5
 80009da:	1c59      	adds	r1, r3, #1
 80009dc:	7011      	strb	r1, [r2, #0]
 80009de:	0019      	movs	r1, r3
 80009e0:	19bb      	adds	r3, r7, r6
 80009e2:	222f      	movs	r2, #47	; 0x2f
 80009e4:	18ba      	adds	r2, r7, r2
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	545a      	strb	r2, [r3, r1]
	}

	buffer[bfrIx++] = artist_len / 2;
 80009ea:	252e      	movs	r5, #46	; 0x2e
 80009ec:	197b      	adds	r3, r7, r5
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	197a      	adds	r2, r7, r5
 80009f2:	1c59      	adds	r1, r3, #1
 80009f4:	7011      	strb	r1, [r2, #0]
 80009f6:	001a      	movs	r2, r3
 80009f8:	233e      	movs	r3, #62	; 0x3e
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	085b      	lsrs	r3, r3, #1
 8000a00:	b2d9      	uxtb	r1, r3
 8000a02:	2620      	movs	r6, #32
 8000a04:	19bb      	adds	r3, r7, r6
 8000a06:	5499      	strb	r1, [r3, r2]
	if (bfrIx == 8) {
 8000a08:	197b      	adds	r3, r7, r5
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b08      	cmp	r3, #8
 8000a0e:	d11c      	bne.n	8000a4a <can_tx_send_music_metadata+0x36e>
		can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000a10:	19bb      	adds	r3, r7, r6
 8000a12:	4816      	ldr	r0, [pc, #88]	; (8000a6c <can_tx_send_music_metadata+0x390>)
 8000a14:	2208      	movs	r2, #8
 8000a16:	0019      	movs	r1, r3
 8000a18:	f7ff fd36 	bl	8000488 <can_tx_send_packet>
		bfrIx = 0;
 8000a1c:	197b      	adds	r3, r7, r5
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
		buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000a22:	232f      	movs	r3, #47	; 0x2f
 8000a24:	18fc      	adds	r4, r7, r3
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fe3c 	bl	80006a8 <_next_tp_id>
 8000a30:	0003      	movs	r3, r0
 8000a32:	7023      	strb	r3, [r4, #0]
 8000a34:	197b      	adds	r3, r7, r5
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	197a      	adds	r2, r7, r5
 8000a3a:	1c59      	adds	r1, r3, #1
 8000a3c:	7011      	strb	r1, [r2, #0]
 8000a3e:	0019      	movs	r1, r3
 8000a40:	19bb      	adds	r3, r7, r6
 8000a42:	222f      	movs	r2, #47	; 0x2f
 8000a44:	18ba      	adds	r2, r7, r2
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	545a      	strb	r2, [r3, r1]
	}

	for (uint8_t i = 0; i < artist_len; i++) {
 8000a4a:	232c      	movs	r3, #44	; 0x2c
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	e044      	b.n	8000ade <can_tx_send_music_metadata+0x402>
 8000a54:	2000043c 	.word	0x2000043c
 8000a58:	200004c0 	.word	0x200004c0
 8000a5c:	20000544 	.word	0x20000544
 8000a60:	200003bc 	.word	0x200003bc
 8000a64:	20000440 	.word	0x20000440
 8000a68:	200004c4 	.word	0x200004c4
 8000a6c:	000006c1 	.word	0x000006c1
		buffer[bfrIx++] = artist[i];
 8000a70:	232c      	movs	r3, #44	; 0x2c
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a78:	18d2      	adds	r2, r2, r3
 8000a7a:	252e      	movs	r5, #46	; 0x2e
 8000a7c:	197b      	adds	r3, r7, r5
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	1979      	adds	r1, r7, r5
 8000a82:	1c58      	adds	r0, r3, #1
 8000a84:	7008      	strb	r0, [r1, #0]
 8000a86:	0019      	movs	r1, r3
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	2620      	movs	r6, #32
 8000a8c:	19bb      	adds	r3, r7, r6
 8000a8e:	545a      	strb	r2, [r3, r1]
		if (bfrIx == 8) {
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b08      	cmp	r3, #8
 8000a96:	d11c      	bne.n	8000ad2 <can_tx_send_music_metadata+0x3f6>
			can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000a98:	19bb      	adds	r3, r7, r6
 8000a9a:	4873      	ldr	r0, [pc, #460]	; (8000c68 <can_tx_send_music_metadata+0x58c>)
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	f7ff fcf2 	bl	8000488 <can_tx_send_packet>
			bfrIx = 0;
 8000aa4:	197b      	adds	r3, r7, r5
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
			buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000aaa:	232f      	movs	r3, #47	; 0x2f
 8000aac:	18fc      	adds	r4, r7, r3
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f7ff fdf8 	bl	80006a8 <_next_tp_id>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	7023      	strb	r3, [r4, #0]
 8000abc:	197b      	adds	r3, r7, r5
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	197a      	adds	r2, r7, r5
 8000ac2:	1c59      	adds	r1, r3, #1
 8000ac4:	7011      	strb	r1, [r2, #0]
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	19bb      	adds	r3, r7, r6
 8000aca:	222f      	movs	r2, #47	; 0x2f
 8000acc:	18ba      	adds	r2, r7, r2
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 0; i < artist_len; i++) {
 8000ad2:	212c      	movs	r1, #44	; 0x2c
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	3201      	adds	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	232c      	movs	r3, #44	; 0x2c
 8000ae0:	18fa      	adds	r2, r7, r3
 8000ae2:	233e      	movs	r3, #62	; 0x3e
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	7812      	ldrb	r2, [r2, #0]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d3c0      	bcc.n	8000a70 <can_tx_send_music_metadata+0x394>
		}
	}

	buffer[bfrIx++] = 0x12;
 8000aee:	252e      	movs	r5, #46	; 0x2e
 8000af0:	197b      	adds	r3, r7, r5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	197a      	adds	r2, r7, r5
 8000af6:	1c59      	adds	r1, r3, #1
 8000af8:	7011      	strb	r1, [r2, #0]
 8000afa:	001a      	movs	r2, r3
 8000afc:	2620      	movs	r6, #32
 8000afe:	19bb      	adds	r3, r7, r6
 8000b00:	2112      	movs	r1, #18
 8000b02:	5499      	strb	r1, [r3, r2]
	if (bfrIx == 8) {
 8000b04:	197b      	adds	r3, r7, r5
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d11c      	bne.n	8000b46 <can_tx_send_music_metadata+0x46a>
		can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000b0c:	19bb      	adds	r3, r7, r6
 8000b0e:	4856      	ldr	r0, [pc, #344]	; (8000c68 <can_tx_send_music_metadata+0x58c>)
 8000b10:	2208      	movs	r2, #8
 8000b12:	0019      	movs	r1, r3
 8000b14:	f7ff fcb8 	bl	8000488 <can_tx_send_packet>
		bfrIx = 0;
 8000b18:	197b      	adds	r3, r7, r5
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000b1e:	232f      	movs	r3, #47	; 0x2f
 8000b20:	18fc      	adds	r4, r7, r3
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fdbe 	bl	80006a8 <_next_tp_id>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	7023      	strb	r3, [r4, #0]
 8000b30:	197b      	adds	r3, r7, r5
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	197a      	adds	r2, r7, r5
 8000b36:	1c59      	adds	r1, r3, #1
 8000b38:	7011      	strb	r1, [r2, #0]
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	19bb      	adds	r3, r7, r6
 8000b3e:	222f      	movs	r2, #47	; 0x2f
 8000b40:	18ba      	adds	r2, r7, r2
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	545a      	strb	r2, [r3, r1]
	}

	buffer[bfrIx++] = album_len / 2;
 8000b46:	252e      	movs	r5, #46	; 0x2e
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	197a      	adds	r2, r7, r5
 8000b4e:	1c59      	adds	r1, r3, #1
 8000b50:	7011      	strb	r1, [r2, #0]
 8000b52:	001a      	movs	r2, r3
 8000b54:	233d      	movs	r3, #61	; 0x3d
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	b2d9      	uxtb	r1, r3
 8000b5e:	2620      	movs	r6, #32
 8000b60:	19bb      	adds	r3, r7, r6
 8000b62:	5499      	strb	r1, [r3, r2]
	if (bfrIx == 8) {
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	d11c      	bne.n	8000ba6 <can_tx_send_music_metadata+0x4ca>
		can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000b6c:	19bb      	adds	r3, r7, r6
 8000b6e:	483e      	ldr	r0, [pc, #248]	; (8000c68 <can_tx_send_music_metadata+0x58c>)
 8000b70:	2208      	movs	r2, #8
 8000b72:	0019      	movs	r1, r3
 8000b74:	f7ff fc88 	bl	8000488 <can_tx_send_packet>
		bfrIx = 0;
 8000b78:	197b      	adds	r3, r7, r5
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
		buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000b7e:	232f      	movs	r3, #47	; 0x2f
 8000b80:	18fc      	adds	r4, r7, r3
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fd8e 	bl	80006a8 <_next_tp_id>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	7023      	strb	r3, [r4, #0]
 8000b90:	197b      	adds	r3, r7, r5
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	197a      	adds	r2, r7, r5
 8000b96:	1c59      	adds	r1, r3, #1
 8000b98:	7011      	strb	r1, [r2, #0]
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	19bb      	adds	r3, r7, r6
 8000b9e:	222f      	movs	r2, #47	; 0x2f
 8000ba0:	18ba      	adds	r2, r7, r2
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	545a      	strb	r2, [r3, r1]
	}

	for (uint8_t i = 0; i < album_len; i++) {
 8000ba6:	232b      	movs	r3, #43	; 0x2b
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	e036      	b.n	8000c1e <can_tx_send_music_metadata+0x542>
		buffer[bfrIx++] = album[i];
 8000bb0:	232b      	movs	r3, #43	; 0x2b
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bb8:	18d2      	adds	r2, r2, r3
 8000bba:	252e      	movs	r5, #46	; 0x2e
 8000bbc:	197b      	adds	r3, r7, r5
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	1979      	adds	r1, r7, r5
 8000bc2:	1c58      	adds	r0, r3, #1
 8000bc4:	7008      	strb	r0, [r1, #0]
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	2620      	movs	r6, #32
 8000bcc:	19bb      	adds	r3, r7, r6
 8000bce:	545a      	strb	r2, [r3, r1]
		if (bfrIx == 8) {
 8000bd0:	197b      	adds	r3, r7, r5
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	d11c      	bne.n	8000c12 <can_tx_send_music_metadata+0x536>
			can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000bd8:	19bb      	adds	r3, r7, r6
 8000bda:	4823      	ldr	r0, [pc, #140]	; (8000c68 <can_tx_send_music_metadata+0x58c>)
 8000bdc:	2208      	movs	r2, #8
 8000bde:	0019      	movs	r1, r3
 8000be0:	f7ff fc52 	bl	8000488 <can_tx_send_packet>
			bfrIx = 0;
 8000be4:	197b      	adds	r3, r7, r5
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
			buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000bea:	232f      	movs	r3, #47	; 0x2f
 8000bec:	18fc      	adds	r4, r7, r3
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fd58 	bl	80006a8 <_next_tp_id>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	7023      	strb	r3, [r4, #0]
 8000bfc:	197b      	adds	r3, r7, r5
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	197a      	adds	r2, r7, r5
 8000c02:	1c59      	adds	r1, r3, #1
 8000c04:	7011      	strb	r1, [r2, #0]
 8000c06:	0019      	movs	r1, r3
 8000c08:	19bb      	adds	r3, r7, r6
 8000c0a:	222f      	movs	r2, #47	; 0x2f
 8000c0c:	18ba      	adds	r2, r7, r2
 8000c0e:	7812      	ldrb	r2, [r2, #0]
 8000c10:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 0; i < album_len; i++) {
 8000c12:	212b      	movs	r1, #43	; 0x2b
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	3201      	adds	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	232b      	movs	r3, #43	; 0x2b
 8000c20:	18fa      	adds	r2, r7, r3
 8000c22:	233d      	movs	r3, #61	; 0x3d
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d3c0      	bcc.n	8000bb0 <can_tx_send_music_metadata+0x4d4>
		}
	}

	while (bfrIx < 8) {
 8000c2e:	e00a      	b.n	8000c46 <can_tx_send_music_metadata+0x56a>
		buffer[bfrIx++] = 0x00;
 8000c30:	222e      	movs	r2, #46	; 0x2e
 8000c32:	18bb      	adds	r3, r7, r2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	18ba      	adds	r2, r7, r2
 8000c38:	1c59      	adds	r1, r3, #1
 8000c3a:	7011      	strb	r1, [r2, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2320      	movs	r3, #32
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	5499      	strb	r1, [r3, r2]
	while (bfrIx < 8) {
 8000c46:	232e      	movs	r3, #46	; 0x2e
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b07      	cmp	r3, #7
 8000c4e:	d9ef      	bls.n	8000c30 <can_tx_send_music_metadata+0x554>
	}

	can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000c50:	2320      	movs	r3, #32
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <can_tx_send_music_metadata+0x58c>)
 8000c56:	2208      	movs	r2, #8
 8000c58:	0019      	movs	r1, r3
 8000c5a:	f7ff fc15 	bl	8000488 <can_tx_send_packet>
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b011      	add	sp, #68	; 0x44
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	000006c1 	.word	0x000006c1

08000c6c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	can_tx_cts = true;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000000 	.word	0x20000000

08000c88 <circ_buf_push_bytes>:
	c->buffer[c->head] = data;  // Load data and then move
	c->head = next;             // head to next data offset.
	return 0;  // return success to indicate successful push.
}

int circ_buf_push_bytes(circ_buf_t *c, uint8_t *data, int size) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
	if (size > c->maxlen) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dd02      	ble.n	8000ca4 <circ_buf_push_bytes+0x1c>
		return -1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	425b      	negs	r3, r3
 8000ca2:	e06c      	b.n	8000d7e <circ_buf_push_bytes+0xf6>
	}

	int sizeToWrite = size;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24

	int maxSize = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
	if (c->tail > c-> head) {
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dd07      	ble.n	8000cc8 <circ_buf_push_bytes+0x40>
		maxSize = c->tail - c->head - 1;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]
 8000cc6:	e009      	b.n	8000cdc <circ_buf_push_bytes+0x54>
	}
	else {
		maxSize = c->maxlen - c->head + c->tail - 1;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	1ad2      	subs	r2, r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	18d3      	adds	r3, r2, r3
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	623b      	str	r3, [r7, #32]
	}

	if (maxSize < sizeToWrite)
 8000cdc:	6a3a      	ldr	r2, [r7, #32]
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	da01      	bge.n	8000ce8 <circ_buf_push_bytes+0x60>
		sizeToWrite = maxSize;
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24

	int firstBatch = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
	int secondBatch = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]

	if (c->head + sizeToWrite > c->maxlen) {
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	18d2      	adds	r2, r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dd0a      	ble.n	8000d16 <circ_buf_push_bytes+0x8e>
		firstBatch = c->maxlen - c->head;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	61fb      	str	r3, [r7, #28]
		secondBatch = sizeToWrite - firstBatch;
 8000d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	e001      	b.n	8000d1a <circ_buf_push_bytes+0x92>
	} else {
		firstBatch = sizeToWrite;
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	61fb      	str	r3, [r7, #28]
	}

	int data_ix = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
	memcpy(c->buffer + c->head, data, firstBatch);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f004 fdc7 	bl	80058c0 <memcpy>
	c->head += firstBatch;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	18d2      	adds	r2, r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	605a      	str	r2, [r3, #4]
	data_ix += firstBatch;
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	18d3      	adds	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]

	if (c->head >= c->maxlen)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	db02      	blt.n	8000d58 <circ_buf_push_bytes+0xd0>
		c->head = 0;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]

	if (secondBatch > 0) {
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	dd0e      	ble.n	8000d7c <circ_buf_push_bytes+0xf4>
		memcpy(c->buffer, data + data_ix, secondBatch);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	18d3      	adds	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	f004 fda8 	bl	80058c0 <memcpy>
		c->head += secondBatch;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	18d2      	adds	r2, r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	605a      	str	r2, [r3, #4]
	}

	return sizeToWrite;
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b00a      	add	sp, #40	; 0x28
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <circ_buf_pop>:

int circ_buf_pop(circ_buf_t *c) {
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
	int next;

	if (c->head == c->tail)  // if the head == tail, we don't have any data
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d102      	bne.n	8000da0 <circ_buf_pop+0x1a>
		return -1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	425b      	negs	r3, r3
 8000d9e:	e018      	b.n	8000dd2 <circ_buf_pop+0x4c>

	next = c->tail + 1;  // next is where tail will point to after this read.
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	3301      	adds	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
	if (next >= c->maxlen)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	db01      	blt.n	8000db6 <circ_buf_pop+0x30>
		next = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]

	uint8_t val = c->buffer[c->tail];  // Read data and then move
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	18d2      	adds	r2, r2, r3
 8000dc0:	210b      	movs	r1, #11
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	701a      	strb	r2, [r3, #0]
	c->tail = next;              // tail to next offset.
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	609a      	str	r2, [r3, #8]
	return val;  // return success to indicate successful push.
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b004      	add	sp, #16
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <esp_reset>:
bool prev_song_requested = false;

void _esp_parse_command();
void _esp_process_uart_byte(uint8_t data);

void esp_reset() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	mode = UART_MODE_RESET;
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <esp_reset+0x10>)
 8000de2:	22fe      	movs	r2, #254	; 0xfe
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000001 	.word	0x20000001

08000df0 <esp_start>:

uint8_t started = 0;

void esp_start() {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	0219      	lsls	r1, r3, #8
 8000df8:	2390      	movs	r3, #144	; 0x90
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f002 f946 	bl	8003090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_RESET);
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	0059      	lsls	r1, r3, #1
 8000e08:	2390      	movs	r3, #144	; 0x90
 8000e0a:	05db      	lsls	r3, r3, #23
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f002 f93e 	bl	8003090 <HAL_GPIO_WritePin>
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <esp_kill>:

void esp_kill() {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	0059      	lsls	r1, r3, #1
 8000e22:	2390      	movs	r3, #144	; 0x90
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	2201      	movs	r2, #1
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 f931 	bl	8003090 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	0219      	lsls	r1, r3, #8
 8000e32:	2390      	movs	r3, #144	; 0x90
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	2200      	movs	r2, #0
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f002 f929 	bl	8003090 <HAL_GPIO_WritePin>
	esp_reset();
 8000e3e:	f7ff ffcd 	bl	8000ddc <esp_reset>
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <esp_receive_uart>:

void esp_receive_uart() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
	int available = uart_data_available();
 8000e4e:	f000 fd37 	bl	80018c0 <uart_data_available>
 8000e52:	0003      	movs	r3, r0
 8000e54:	60bb      	str	r3, [r7, #8]
	if (available) {
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d013      	beq.n	8000e84 <esp_receive_uart+0x3c>
		for (int i = 0; i < available; i++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e00c      	b.n	8000e7c <esp_receive_uart+0x34>
			uint8_t value = uart_get_byte() & 0xFF;
 8000e62:	f000 fd49 	bl	80018f8 <uart_get_byte>
 8000e66:	0002      	movs	r2, r0
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	701a      	strb	r2, [r3, #0]
			_esp_process_uart_byte(value);
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 f80b 	bl	8000e8c <_esp_process_uart_byte>
		for (int i = 0; i < available; i++) {
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbee      	blt.n	8000e62 <esp_receive_uart+0x1a>
		}
	}
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b004      	add	sp, #16
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_esp_process_uart_byte>:

void _esp_process_uart_byte(uint8_t value) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	0002      	movs	r2, r0
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	701a      	strb	r2, [r3, #0]
	if (mode == UART_MODE_RESET) {
 8000e98:	4b5c      	ldr	r3, [pc, #368]	; (800100c <_esp_process_uart_byte+0x180>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e9e:	d151      	bne.n	8000f44 <_esp_process_uart_byte+0xb8>
		if (reset_ix == 0) {
 8000ea0:	4b5b      	ldr	r3, [pc, #364]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10a      	bne.n	8000ebe <_esp_process_uart_byte+0x32>
			if (value == 0xAA)
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2baa      	cmp	r3, #170	; 0xaa
 8000eae:	d13e      	bne.n	8000f2e <_esp_process_uart_byte+0xa2>
				reset_ix++;
 8000eb0:	4b57      	ldr	r3, [pc, #348]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b55      	ldr	r3, [pc, #340]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e037      	b.n	8000f2e <_esp_process_uart_byte+0xa2>
		} else if (reset_ix == 1) {
 8000ebe:	4b54      	ldr	r3, [pc, #336]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d10e      	bne.n	8000ee4 <_esp_process_uart_byte+0x58>
			if (value == 0xFF)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2bff      	cmp	r3, #255	; 0xff
 8000ecc:	d106      	bne.n	8000edc <_esp_process_uart_byte+0x50>
				reset_ix++;
 8000ece:	4b50      	ldr	r3, [pc, #320]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e028      	b.n	8000f2e <_esp_process_uart_byte+0xa2>
			else
				reset_ix = 0;
 8000edc:	4b4c      	ldr	r3, [pc, #304]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e024      	b.n	8000f2e <_esp_process_uart_byte+0xa2>
		} else if (reset_ix == 2) {
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d10e      	bne.n	8000f0a <_esp_process_uart_byte+0x7e>
			if (value == 0x55)
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b55      	cmp	r3, #85	; 0x55
 8000ef2:	d106      	bne.n	8000f02 <_esp_process_uart_byte+0x76>
				reset_ix++;
 8000ef4:	4b46      	ldr	r3, [pc, #280]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b44      	ldr	r3, [pc, #272]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e015      	b.n	8000f2e <_esp_process_uart_byte+0xa2>
			else
				reset_ix = 0;
 8000f02:	4b43      	ldr	r3, [pc, #268]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e011      	b.n	8000f2e <_esp_process_uart_byte+0xa2>
		} else if (reset_ix == 3) {
 8000f0a:	4b41      	ldr	r3, [pc, #260]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d10d      	bne.n	8000f2e <_esp_process_uart_byte+0xa2>
			if (value == 0x00)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d106      	bne.n	8000f28 <_esp_process_uart_byte+0x9c>
				reset_ix++;
 8000f1a:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e002      	b.n	8000f2e <_esp_process_uart_byte+0xa2>
			else
				reset_ix = 0;
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
		}

		if (reset_ix == 4) {
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <_esp_process_uart_byte+0x184>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d166      	bne.n	8001004 <_esp_process_uart_byte+0x178>
			mode = UART_MODE_WAIT;
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <_esp_process_uart_byte+0x180>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
			command = UART_MODE_WAIT;
 8000f3c:	4b35      	ldr	r3, [pc, #212]	; (8001014 <_esp_process_uart_byte+0x188>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
			if (text_ix >= size) {
				_esp_parse_command();
			}
		}
	}
}
 8000f42:	e05f      	b.n	8001004 <_esp_process_uart_byte+0x178>
	} else if (command == 0x00) {
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <_esp_process_uart_byte+0x188>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d116      	bne.n	8000f7a <_esp_process_uart_byte+0xee>
		command = value;
 8000f4c:	4b31      	ldr	r3, [pc, #196]	; (8001014 <_esp_process_uart_byte+0x188>)
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	701a      	strb	r2, [r3, #0]
		if (command > 0x80 && command < 0x90) {
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <_esp_process_uart_byte+0x188>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b80      	cmp	r3, #128	; 0x80
 8000f5a:	d90a      	bls.n	8000f72 <_esp_process_uart_byte+0xe6>
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <_esp_process_uart_byte+0x188>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b8f      	cmp	r3, #143	; 0x8f
 8000f62:	d806      	bhi.n	8000f72 <_esp_process_uart_byte+0xe6>
			mode = UART_MODE_READ_SIZE;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <_esp_process_uart_byte+0x180>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
			size_ix = 0;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <_esp_process_uart_byte+0x18c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
}
 8000f70:	e048      	b.n	8001004 <_esp_process_uart_byte+0x178>
			command = 0x00;
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <_esp_process_uart_byte+0x188>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
}
 8000f78:	e044      	b.n	8001004 <_esp_process_uart_byte+0x178>
		if (mode == UART_MODE_READ_SIZE) {
 8000f7a:	4b24      	ldr	r3, [pc, #144]	; (800100c <_esp_process_uart_byte+0x180>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d121      	bne.n	8000fc6 <_esp_process_uart_byte+0x13a>
			size_buf[size_ix++] = value;
 8000f82:	4b25      	ldr	r3, [pc, #148]	; (8001018 <_esp_process_uart_byte+0x18c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	b2d1      	uxtb	r1, r2
 8000f8a:	4a23      	ldr	r2, [pc, #140]	; (8001018 <_esp_process_uart_byte+0x18c>)
 8000f8c:	7011      	strb	r1, [r2, #0]
 8000f8e:	0019      	movs	r1, r3
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <_esp_process_uart_byte+0x190>)
 8000f92:	1dfa      	adds	r2, r7, #7
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	545a      	strb	r2, [r3, r1]
			if (size_ix == 2) {
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <_esp_process_uart_byte+0x18c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d131      	bne.n	8001004 <_esp_process_uart_byte+0x178>
				size = size_buf[1] << 8 | size_buf[0];
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <_esp_process_uart_byte+0x190>)
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <_esp_process_uart_byte+0x190>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <_esp_process_uart_byte+0x194>)
 8000fb6:	801a      	strh	r2, [r3, #0]
				mode = UART_MODE_READ_TEXT;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <_esp_process_uart_byte+0x180>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	701a      	strb	r2, [r3, #0]
				text_ix = 0;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <_esp_process_uart_byte+0x198>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
}
 8000fc4:	e01e      	b.n	8001004 <_esp_process_uart_byte+0x178>
		} else if (mode == UART_MODE_READ_TEXT) {
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <_esp_process_uart_byte+0x180>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d11a      	bne.n	8001004 <_esp_process_uart_byte+0x178>
			if (text_ix < 128) {
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_esp_process_uart_byte+0x198>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db06      	blt.n	8000fe6 <_esp_process_uart_byte+0x15a>
				text_buf[text_ix] = value;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <_esp_process_uart_byte+0x198>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	0019      	movs	r1, r3
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <_esp_process_uart_byte+0x19c>)
 8000fe0:	1dfa      	adds	r2, r7, #7
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	545a      	strb	r2, [r3, r1]
			text_ix++;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <_esp_process_uart_byte+0x198>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <_esp_process_uart_byte+0x198>)
 8000ff0:	701a      	strb	r2, [r3, #0]
			if (text_ix >= size) {
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <_esp_process_uart_byte+0x198>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <_esp_process_uart_byte+0x194>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d301      	bcc.n	8001004 <_esp_process_uart_byte+0x178>
				_esp_parse_command();
 8001000:	f000 f858 	bl	80010b4 <_esp_parse_command>
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000001 	.word	0x20000001
 8001010:	20000545 	.word	0x20000545
 8001014:	20000546 	.word	0x20000546
 8001018:	2000054a 	.word	0x2000054a
 800101c:	20000548 	.word	0x20000548
 8001020:	2000054c 	.word	0x2000054c
 8001024:	200005d0 	.word	0x200005d0
 8001028:	20000550 	.word	0x20000550

0800102c <esp_next_song>:

void esp_next_song() {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	next_song_requested = true;
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <esp_next_song+0x10>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200005d1 	.word	0x200005d1

08001040 <esp_prev_song>:

void esp_prev_song() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	prev_song_requested = true;
 8001044:	4b02      	ldr	r3, [pc, #8]	; (8001050 <esp_prev_song+0x10>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200005d2 	.word	0x200005d2

08001054 <esp_run_can_events>:

void esp_run_can_events() {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	if (prev_song_requested) {
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <esp_run_can_events+0x50>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <esp_run_can_events+0x26>
		prev_song_requested = false;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <esp_run_can_events+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
		uint8_t data[1] = { CMD_PREV };
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <esp_run_can_events+0x54>)
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	701a      	strb	r2, [r3, #0]
		uart_send_data(data, 1);
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2101      	movs	r1, #1
 8001074:	0018      	movs	r0, r3
 8001076:	f000 fc4b 	bl	8001910 <uart_send_data>
	}

	if (next_song_requested) {
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <esp_run_can_events+0x58>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <esp_run_can_events+0x46>
		next_song_requested = false;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <esp_run_can_events+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
		uint8_t data[1] = { CMD_NEXT };
 8001088:	003b      	movs	r3, r7
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <esp_run_can_events+0x5c>)
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	701a      	strb	r2, [r3, #0]
		uart_send_data(data, 1);
 8001090:	003b      	movs	r3, r7
 8001092:	2101      	movs	r1, #1
 8001094:	0018      	movs	r0, r3
 8001096:	f000 fc3b 	bl	8001910 <uart_send_data>
	}
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	200005d2 	.word	0x200005d2
 80010a8:	080058f4 	.word	0x080058f4
 80010ac:	200005d1 	.word	0x200005d1
 80010b0:	080058f8 	.word	0x080058f8

080010b4 <_esp_parse_command>:

void _esp_parse_command() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	if (size > 128)
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <_esp_parse_command+0x70>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	2b80      	cmp	r3, #128	; 0x80
 80010be:	d902      	bls.n	80010c6 <_esp_parse_command+0x12>
		size = 128;
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <_esp_parse_command+0x70>)
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	801a      	strh	r2, [r3, #0]

	switch (command) {
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <_esp_parse_command+0x74>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b83      	cmp	r3, #131	; 0x83
 80010cc:	d017      	beq.n	80010fe <_esp_parse_command+0x4a>
 80010ce:	dc1f      	bgt.n	8001110 <_esp_parse_command+0x5c>
 80010d0:	2b81      	cmp	r3, #129	; 0x81
 80010d2:	d002      	beq.n	80010da <_esp_parse_command+0x26>
 80010d4:	2b82      	cmp	r3, #130	; 0x82
 80010d6:	d009      	beq.n	80010ec <_esp_parse_command+0x38>
		break;
	case CMD_ALBUM:
		can_tx_set_album(text_buf, size);
		break;
	default:
		break;
 80010d8:	e01a      	b.n	8001110 <_esp_parse_command+0x5c>
		can_tx_set_title(text_buf, size);
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <_esp_parse_command+0x70>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <_esp_parse_command+0x78>)
 80010e2:	0011      	movs	r1, r2
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff f96d 	bl	80003c4 <can_tx_set_title>
		break;
 80010ea:	e012      	b.n	8001112 <_esp_parse_command+0x5e>
		can_tx_set_artist(text_buf, size);
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <_esp_parse_command+0x70>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <_esp_parse_command+0x78>)
 80010f4:	0011      	movs	r1, r2
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff f980 	bl	80003fc <can_tx_set_artist>
		break;
 80010fc:	e009      	b.n	8001112 <_esp_parse_command+0x5e>
		can_tx_set_album(text_buf, size);
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <_esp_parse_command+0x70>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <_esp_parse_command+0x78>)
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff f993 	bl	8000434 <can_tx_set_album>
		break;
 800110e:	e000      	b.n	8001112 <_esp_parse_command+0x5e>
		break;
 8001110:	46c0      	nop			; (mov r8, r8)
	}

	mode = UART_MODE_WAIT;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_esp_parse_command+0x7c>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	command = UART_MODE_WAIT;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <_esp_parse_command+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000054c 	.word	0x2000054c
 8001128:	20000546 	.word	0x20000546
 800112c:	20000550 	.word	0x20000550
 8001130:	20000001 	.word	0x20000001

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 fc80 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f816 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 f996 	bl	8001470 <MX_GPIO_Init>
  MX_DMA_Init();
 8001144:	f000 f976 	bl	8001434 <MX_DMA_Init>
  MX_CAN_Init();
 8001148:	f000 f876 	bl	8001238 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800114c:	f000 f942 	bl	80013d4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001150:	f000 f8e8 	bl	8001324 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	uart_start(&huart1);
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <main+0x34>)
 8001156:	0018      	movs	r0, r3
 8001158:	f000 fb8e 	bl	8001878 <uart_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		esp_receive_uart();
 800115c:	f7ff fe74 	bl	8000e48 <esp_receive_uart>
		esp_run_can_events();
 8001160:	f7ff ff78 	bl	8001054 <esp_run_can_events>
		esp_receive_uart();
 8001164:	e7fa      	b.n	800115c <main+0x28>
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	20000644 	.word	0x20000644

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b099      	sub	sp, #100	; 0x64
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	242c      	movs	r4, #44	; 0x2c
 8001174:	193b      	adds	r3, r7, r4
 8001176:	0018      	movs	r0, r3
 8001178:	2334      	movs	r3, #52	; 0x34
 800117a:	001a      	movs	r2, r3
 800117c:	2100      	movs	r1, #0
 800117e:	f004 fb72 	bl	8005866 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001182:	231c      	movs	r3, #28
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	0018      	movs	r0, r3
 8001188:	2310      	movs	r3, #16
 800118a:	001a      	movs	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	f004 fb6a 	bl	8005866 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	0018      	movs	r0, r3
 8001196:	2318      	movs	r3, #24
 8001198:	001a      	movs	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	f004 fb63 	bl	8005866 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80011a0:	0021      	movs	r1, r4
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2203      	movs	r2, #3
 80011a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2201      	movs	r2, #1
 80011ac:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2201      	movs	r2, #1
 80011b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2210      	movs	r2, #16
 80011b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2202      	movs	r2, #2
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	0252      	lsls	r2, r2, #9
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	22e0      	movs	r2, #224	; 0xe0
 80011cc:	0392      	lsls	r2, r2, #14
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV3;
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2202      	movs	r2, #2
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	0018      	movs	r0, r3
 80011da:	f001 ff77 	bl	80030cc <HAL_RCC_OscConfig>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011e2:	f000 f9a7 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	211c      	movs	r1, #28
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2207      	movs	r2, #7
 80011ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2202      	movs	r2, #2
 80011f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	00d2      	lsls	r2, r2, #3
 8001200:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2101      	movs	r1, #1
 8001206:	0018      	movs	r0, r3
 8001208:	f002 fae6 	bl	80037d8 <HAL_RCC_ClockConfig>
 800120c:	1e03      	subs	r3, r0, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001210:	f000 f990 	bl	8001534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2203      	movs	r2, #3
 800121e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	0018      	movs	r0, r3
 8001224:	f002 fc46 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800122c:	f000 f982 	bl	8001534 <Error_Handler>
  }
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b019      	add	sp, #100	; 0x64
 8001236:	bd90      	pop	{r4, r7, pc}

08001238 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800123e:	4b37      	ldr	r3, [pc, #220]	; (800131c <MX_CAN_Init+0xe4>)
 8001240:	4a37      	ldr	r2, [pc, #220]	; (8001320 <MX_CAN_Init+0xe8>)
 8001242:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 14;
 8001244:	4b35      	ldr	r3, [pc, #212]	; (800131c <MX_CAN_Init+0xe4>)
 8001246:	220e      	movs	r2, #14
 8001248:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800124a:	4b34      	ldr	r3, [pc, #208]	; (800131c <MX_CAN_Init+0xe4>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001250:	4b32      	ldr	r3, [pc, #200]	; (800131c <MX_CAN_Init+0xe4>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <MX_CAN_Init+0xe4>)
 8001258:	22c0      	movs	r2, #192	; 0xc0
 800125a:	0312      	lsls	r2, r2, #12
 800125c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <MX_CAN_Init+0xe4>)
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	0352      	lsls	r2, r2, #13
 8001264:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <MX_CAN_Init+0xe4>)
 8001268:	2200      	movs	r2, #0
 800126a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <MX_CAN_Init+0xe4>)
 800126e:	2201      	movs	r2, #1
 8001270:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_CAN_Init+0xe4>)
 8001274:	2201      	movs	r2, #1
 8001276:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <MX_CAN_Init+0xe4>)
 800127a:	2201      	movs	r2, #1
 800127c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800127e:	4b27      	ldr	r3, [pc, #156]	; (800131c <MX_CAN_Init+0xe4>)
 8001280:	2200      	movs	r2, #0
 8001282:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <MX_CAN_Init+0xe4>)
 8001286:	2200      	movs	r2, #0
 8001288:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <MX_CAN_Init+0xe4>)
 800128c:	0018      	movs	r0, r3
 800128e:	f000 fc39 	bl	8001b04 <HAL_CAN_Init>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d001      	beq.n	800129a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001296:	f000 f94d 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

	can_tx_set_hcan(&hcan);
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <MX_CAN_Init+0xe4>)
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff f86f 	bl	8000380 <can_tx_set_hcan>

	sFilterConfig.FilterBank = 0;
 80012a2:	003b      	movs	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80012a8:	003b      	movs	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80012ae:	003b      	movs	r3, r7
 80012b0:	2201      	movs	r2, #1
 80012b2:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80012b4:	003b      	movs	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80012ba:	003b      	movs	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80012c0:	003b      	movs	r3, r7
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80012c6:	003b      	movs	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80012cc:	003b      	movs	r3, r7
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80012d2:	003b      	movs	r3, r7
 80012d4:	2201      	movs	r2, #1
 80012d6:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80012d8:	003b      	movs	r3, r7
 80012da:	220e      	movs	r2, #14
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80012de:	003a      	movs	r2, r7
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_CAN_Init+0xe4>)
 80012e2:	0011      	movs	r1, r2
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 fd0b 	bl	8001d00 <HAL_CAN_ConfigFilter>
 80012ea:	1e03      	subs	r3, r0, #0
 80012ec:	d001      	beq.n	80012f2 <MX_CAN_Init+0xba>
		/* Filter configuration Error */
		Error_Handler();
 80012ee:	f000 f921 	bl	8001534 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_CAN_Init+0xe4>)
 80012f4:	0018      	movs	r0, r3
 80012f6:	f000 fdf5 	bl	8001ee4 <HAL_CAN_Start>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d001      	beq.n	8001302 <MX_CAN_Init+0xca>
		/* Start Error */
		Error_Handler();
 80012fe:	f000 f919 	bl	8001534 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan,
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_CAN_Init+0xe4>)
 8001304:	2103      	movs	r1, #3
 8001306:	0018      	movs	r0, r3
 8001308:	f001 f82f 	bl	800236a <HAL_CAN_ActivateNotification>
 800130c:	1e03      	subs	r3, r0, #0
 800130e:	d001      	beq.n	8001314 <MX_CAN_Init+0xdc>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8001310:	f000 f910 	bl	8001534 <Error_Handler>
	}
  /* USER CODE END CAN_Init 2 */

}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b00a      	add	sp, #40	; 0x28
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200005d4 	.word	0x200005d4
 8001320:	40006400 	.word	0x40006400

08001324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	2308      	movs	r3, #8
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	0018      	movs	r0, r3
 8001330:	2310      	movs	r3, #16
 8001332:	001a      	movs	r2, r3
 8001334:	2100      	movs	r1, #0
 8001336:	f004 fa96 	bl	8005866 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133a:	003b      	movs	r3, r7
 800133c:	0018      	movs	r0, r3
 800133e:	2308      	movs	r3, #8
 8001340:	001a      	movs	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	f004 fa8f 	bl	8005866 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_TIM2_Init+0xa8>)
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	05d2      	lsls	r2, r2, #23
 800134e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4266;
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_TIM2_Init+0xa8>)
 8001352:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <MX_TIM2_Init+0xac>)
 8001354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM2_Init+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_TIM2_Init+0xa8>)
 800135e:	2219      	movs	r2, #25
 8001360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_TIM2_Init+0xa8>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_TIM2_Init+0xa8>)
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_TIM2_Init+0xa8>)
 8001370:	0018      	movs	r0, r3
 8001372:	f002 fc8d 	bl	8003c90 <HAL_TIM_Base_Init>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800137a:	f000 f8db 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137e:	2108      	movs	r1, #8
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0152      	lsls	r2, r2, #5
 8001386:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001388:	187a      	adds	r2, r7, r1
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_TIM2_Init+0xa8>)
 800138c:	0011      	movs	r1, r2
 800138e:	0018      	movs	r0, r3
 8001390:	f002 fe30 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 8001394:	1e03      	subs	r3, r0, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001398:	f000 f8cc 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	003b      	movs	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	003b      	movs	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a8:	003a      	movs	r2, r7
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_TIM2_Init+0xa8>)
 80013ac:	0011      	movs	r1, r2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f003 f824 	bl	80043fc <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80013b8:	f000 f8bc 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <MX_TIM2_Init+0xa8>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f002 fcb6 	bl	8003d30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b006      	add	sp, #24
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200005fc 	.word	0x200005fc
 80013d0:	000010aa 	.word	0x000010aa

080013d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013da:	4a15      	ldr	r2, [pc, #84]	; (8001430 <MX_USART1_UART_Init+0x5c>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013e0:	22e1      	movs	r2, #225	; 0xe1
 80013e2:	0252      	lsls	r2, r2, #9
 80013e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_USART1_UART_Init+0x58>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_USART1_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_USART1_UART_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_USART1_UART_Init+0x58>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_USART1_UART_Init+0x58>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <MX_USART1_UART_Init+0x58>)
 8001418:	0018      	movs	r0, r3
 800141a:	f003 f857 	bl	80044cc <HAL_UART_Init>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d001      	beq.n	8001426 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001422:	f000 f887 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000644 	.word	0x20000644
 8001430:	40013800 	.word	0x40013800

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_DMA_Init+0x38>)
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_DMA_Init+0x38>)
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_DMA_Init+0x38>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	2201      	movs	r2, #1
 800144c:	4013      	ands	r3, r2
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	200a      	movs	r0, #10
 8001458:	f001 fa6a 	bl	8002930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800145c:	200a      	movs	r0, #10
 800145e:	f001 fa7c 	bl	800295a <HAL_NVIC_EnableIRQ>

}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	40021000 	.word	0x40021000

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	240c      	movs	r4, #12
 8001478:	193b      	adds	r3, r7, r4
 800147a:	0018      	movs	r0, r3
 800147c:	2314      	movs	r3, #20
 800147e:	001a      	movs	r2, r3
 8001480:	2100      	movs	r1, #0
 8001482:	f004 f9f0 	bl	8005866 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_GPIO_Init+0xa0>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <MX_GPIO_Init+0xa0>)
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	03c9      	lsls	r1, r1, #15
 8001490:	430a      	orrs	r2, r1
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_GPIO_Init+0xa0>)
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	03db      	lsls	r3, r3, #15
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_GPIO_Init+0xa0>)
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_GPIO_Init+0xa0>)
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	0289      	lsls	r1, r1, #10
 80014ac:	430a      	orrs	r2, r1
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_GPIO_Init+0xa0>)
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	029b      	lsls	r3, r3, #10
 80014b8:	4013      	ands	r3, r2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	0059      	lsls	r1, r3, #1
 80014c2:	2390      	movs	r3, #144	; 0x90
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	2201      	movs	r2, #1
 80014c8:	0018      	movs	r0, r3
 80014ca:	f001 fde1 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	0219      	lsls	r1, r3, #8
 80014d2:	2390      	movs	r3, #144	; 0x90
 80014d4:	05db      	lsls	r3, r3, #23
 80014d6:	2200      	movs	r2, #0
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 fdd9 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_LP_Pin BUCK_EN_Pin */
  GPIO_InitStruct.Pin = CAN_LP_Pin|BUCK_EN_Pin;
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2281      	movs	r2, #129	; 0x81
 80014e2:	0212      	lsls	r2, r2, #8
 80014e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	193b      	adds	r3, r7, r4
 80014e8:	2201      	movs	r2, #1
 80014ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	193a      	adds	r2, r7, r4
 80014fa:	2390      	movs	r3, #144	; 0x90
 80014fc:	05db      	lsls	r3, r3, #23
 80014fe:	0011      	movs	r1, r2
 8001500:	0018      	movs	r0, r3
 8001502:	f001 fc5d 	bl	8002dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b009      	add	sp, #36	; 0x24
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) //check if the interrupt comes from TIM3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	05db      	lsls	r3, r3, #23
 8001524:	429a      	cmp	r2, r3
 8001526:	d101      	bne.n	800152c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		can_tx_send_next();
 8001528:	f7ff f834 	bl	8000594 <can_tx_send_next>
	}
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_MspInit+0x44>)
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_MspInit+0x44>)
 800154c:	2101      	movs	r1, #1
 800154e:	430a      	orrs	r2, r1
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_MspInit+0x44>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2201      	movs	r2, #1
 8001558:	4013      	ands	r3, r2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x44>)
 8001560:	69da      	ldr	r2, [r3, #28]
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_MspInit+0x44>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0549      	lsls	r1, r1, #21
 8001568:	430a      	orrs	r2, r1
 800156a:	61da      	str	r2, [r3, #28]
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_MspInit+0x44>)
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	055b      	lsls	r3, r3, #21
 8001574:	4013      	ands	r3, r2
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b08b      	sub	sp, #44	; 0x2c
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	2414      	movs	r4, #20
 8001592:	193b      	adds	r3, r7, r4
 8001594:	0018      	movs	r0, r3
 8001596:	2314      	movs	r3, #20
 8001598:	001a      	movs	r2, r3
 800159a:	2100      	movs	r1, #0
 800159c:	f004 f963 	bl	8005866 <memset>
  if(hcan->Instance==CAN)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_CAN_MspInit+0xa4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d13b      	bne.n	8001622 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_CAN_MspInit+0xa8>)
 80015ac:	69da      	ldr	r2, [r3, #28]
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_CAN_MspInit+0xa8>)
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	0489      	lsls	r1, r1, #18
 80015b4:	430a      	orrs	r2, r1
 80015b6:	61da      	str	r2, [r3, #28]
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_CAN_MspInit+0xa8>)
 80015ba:	69da      	ldr	r2, [r3, #28]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	049b      	lsls	r3, r3, #18
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_CAN_MspInit+0xa8>)
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_CAN_MspInit+0xa8>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	0289      	lsls	r1, r1, #10
 80015d0:	430a      	orrs	r2, r1
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_CAN_MspInit+0xa8>)
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015e2:	193b      	adds	r3, r7, r4
 80015e4:	22c0      	movs	r2, #192	; 0xc0
 80015e6:	0152      	lsls	r2, r2, #5
 80015e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	0021      	movs	r1, r4
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2202      	movs	r2, #2
 80015f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2203      	movs	r2, #3
 80015fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2204      	movs	r2, #4
 8001602:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	187a      	adds	r2, r7, r1
 8001606:	2390      	movs	r3, #144	; 0x90
 8001608:	05db      	lsls	r3, r3, #23
 800160a:	0011      	movs	r1, r2
 800160c:	0018      	movs	r0, r3
 800160e:	f001 fbd7 	bl	8002dc0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	201e      	movs	r0, #30
 8001618:	f001 f98a 	bl	8002930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800161c:	201e      	movs	r0, #30
 800161e:	f001 f99c 	bl	800295a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b00b      	add	sp, #44	; 0x2c
 8001628:	bd90      	pop	{r4, r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40006400 	.word	0x40006400
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	05db      	lsls	r3, r3, #23
 8001644:	429a      	cmp	r2, r3
 8001646:	d113      	bne.n	8001670 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_TIM_Base_MspInit+0x44>)
 800164a:	69da      	ldr	r2, [r3, #28]
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_TIM_Base_MspInit+0x44>)
 800164e:	2101      	movs	r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	61da      	str	r2, [r3, #28]
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_TIM_Base_MspInit+0x44>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	200f      	movs	r0, #15
 8001666:	f001 f963 	bl	8002930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800166a:	200f      	movs	r0, #15
 800166c:	f001 f975 	bl	800295a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	2414      	movs	r4, #20
 8001686:	193b      	adds	r3, r7, r4
 8001688:	0018      	movs	r0, r3
 800168a:	2314      	movs	r3, #20
 800168c:	001a      	movs	r2, r3
 800168e:	2100      	movs	r1, #0
 8001690:	f004 f8e9 	bl	8005866 <memset>
  if(huart->Instance==USART1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a47      	ldr	r2, [pc, #284]	; (80017b8 <HAL_UART_MspInit+0x13c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d000      	beq.n	80016a0 <HAL_UART_MspInit+0x24>
 800169e:	e087      	b.n	80017b0 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_UART_MspInit+0x140>)
 80016a2:	699a      	ldr	r2, [r3, #24]
 80016a4:	4b45      	ldr	r3, [pc, #276]	; (80017bc <HAL_UART_MspInit+0x140>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	01c9      	lsls	r1, r1, #7
 80016aa:	430a      	orrs	r2, r1
 80016ac:	619a      	str	r2, [r3, #24]
 80016ae:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_UART_MspInit+0x140>)
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	01db      	lsls	r3, r3, #7
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_UART_MspInit+0x140>)
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_UART_MspInit+0x140>)
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	0289      	lsls	r1, r1, #10
 80016c6:	430a      	orrs	r2, r1
 80016c8:	615a      	str	r2, [r3, #20]
 80016ca:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <HAL_UART_MspInit+0x140>)
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	22c0      	movs	r2, #192	; 0xc0
 80016dc:	00d2      	lsls	r2, r2, #3
 80016de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	0021      	movs	r1, r4
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2202      	movs	r2, #2
 80016e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2203      	movs	r2, #3
 80016f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2201      	movs	r2, #1
 80016f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	187a      	adds	r2, r7, r1
 80016fc:	2390      	movs	r3, #144	; 0x90
 80016fe:	05db      	lsls	r3, r3, #23
 8001700:	0011      	movs	r1, r2
 8001702:	0018      	movs	r0, r3
 8001704:	f001 fb5c 	bl	8002dc0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_UART_MspInit+0x144>)
 800170a:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <HAL_UART_MspInit+0x148>)
 800170c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_UART_MspInit+0x144>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_UART_MspInit+0x144>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_UART_MspInit+0x144>)
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_UART_MspInit+0x144>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_UART_MspInit+0x144>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_UART_MspInit+0x144>)
 800172e:	2220      	movs	r2, #32
 8001730:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_UART_MspInit+0x144>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_UART_MspInit+0x144>)
 800173a:	0018      	movs	r0, r3
 800173c:	f001 f92a 	bl	8002994 <HAL_DMA_Init>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d001      	beq.n	8001748 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001744:	f7ff fef6 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_UART_MspInit+0x144>)
 800174c:	675a      	str	r2, [r3, #116]	; 0x74
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_UART_MspInit+0x144>)
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_UART_MspInit+0x150>)
 8001758:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 800175c:	2210      	movs	r2, #16
 800175e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 8001786:	0018      	movs	r0, r3
 8001788:	f001 f904 	bl	8002994 <HAL_DMA_Init>
 800178c:	1e03      	subs	r3, r0, #0
 800178e:	d001      	beq.n	8001794 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8001790:	f7ff fed0 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 8001798:	671a      	str	r2, [r3, #112]	; 0x70
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_UART_MspInit+0x14c>)
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	201b      	movs	r0, #27
 80017a6:	f001 f8c3 	bl	8002930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017aa:	201b      	movs	r0, #27
 80017ac:	f001 f8d5 	bl	800295a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b00b      	add	sp, #44	; 0x2c
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	40013800 	.word	0x40013800
 80017bc:	40021000 	.word	0x40021000
 80017c0:	200006cc 	.word	0x200006cc
 80017c4:	40020030 	.word	0x40020030
 80017c8:	20000710 	.word	0x20000710
 80017cc:	4002001c 	.word	0x4002001c

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f96a 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001806:	0018      	movs	r0, r3
 8001808:	f001 f9ef 	bl	8002bea <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <DMA1_Channel2_3_IRQHandler+0x20>)
 800180e:	0018      	movs	r0, r3
 8001810:	f001 f9eb 	bl	8002bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	20000710 	.word	0x20000710
 8001820:	200006cc 	.word	0x200006cc

08001824 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <TIM2_IRQHandler+0x14>)
 800182a:	0018      	movs	r0, r3
 800182c:	f002 facc 	bl	8003dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	200005fc 	.word	0x200005fc

0800183c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <USART1_IRQHandler+0x14>)
 8001842:	0018      	movs	r0, r3
 8001844:	f002 ff36 	bl	80046b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	20000644 	.word	0x20000644

08001854 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <CEC_CAN_IRQHandler+0x14>)
 800185a:	0018      	movs	r0, r3
 800185c:	f000 fdaf 	bl	80023be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001860:	46c0      	nop			; (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	200005d4 	.word	0x200005d4

0800186c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <uart_start>:

bool uart_cts = true;

void _uart_send_buffer();

void uart_start(UART_HandleTypeDef *uart) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uart_huart = *uart;
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <uart_start+0x40>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0010      	movs	r0, r2
 8001886:	0019      	movs	r1, r3
 8001888:	2388      	movs	r3, #136	; 0x88
 800188a:	001a      	movs	r2, r3
 800188c:	f004 f818 	bl	80058c0 <memcpy>
	HAL_UARTEx_ReceiveToIdle_DMA(uart, uart_byte_buf, UART_BUFFER_SIZE);
 8001890:	490a      	ldr	r1, [pc, #40]	; (80018bc <uart_start+0x44>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2220      	movs	r2, #32
 8001896:	0018      	movs	r0, r3
 8001898:	f003 ff7d 	bl	8005796 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(uart->hdmarx, DMA_IT_HT); // Theoretically I might be able to disable half transfers. But maybe let's implement rest n ow.
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2104      	movs	r1, #4
 80018ac:	438a      	bics	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000854 	.word	0x20000854
 80018bc:	20000754 	.word	0x20000754

080018c0 <uart_data_available>:

int uart_data_available() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	if (uart_ring_buf.head >= uart_ring_buf.tail)
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <uart_data_available+0x34>)
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <uart_data_available+0x34>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	db05      	blt.n	80018dc <uart_data_available+0x1c>
		return uart_ring_buf.head - uart_ring_buf.tail;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <uart_data_available+0x34>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <uart_data_available+0x34>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	e007      	b.n	80018ec <uart_data_available+0x2c>

	return uart_ring_buf.maxlen - (uart_ring_buf.tail - uart_ring_buf.head);
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <uart_data_available+0x34>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <uart_data_available+0x34>)
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <uart_data_available+0x34>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	1acb      	subs	r3, r1, r3
 80018ea:	1ad3      	subs	r3, r2, r3
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	20000008 	.word	0x20000008

080018f8 <uart_get_byte>:

int uart_get_byte() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	return circ_buf_pop(&uart_ring_buf);
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <uart_get_byte+0x14>)
 80018fe:	0018      	movs	r0, r3
 8001900:	f7ff fa41 	bl	8000d86 <circ_buf_pop>
 8001904:	0003      	movs	r3, r0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000008 	.word	0x20000008

08001910 <uart_send_data>:

void uart_send_data(uint8_t * data, uint8_t len) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	000a      	movs	r2, r1
 800191a:	1cfb      	adds	r3, r7, #3
 800191c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit (&uart_huart, data, len, 100);
 800191e:	1cfb      	adds	r3, r7, #3
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b29a      	uxth	r2, r3
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <uart_send_data+0x28>)
 8001928:	2364      	movs	r3, #100	; 0x64
 800192a:	f002 fe23 	bl	8004574 <HAL_UART_Transmit>
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	20000854 	.word	0x20000854

0800193c <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	000a      	movs	r2, r1
 8001946:	1cbb      	adds	r3, r7, #2
 8001948:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_UARTEx_RxEventCallback+0x70>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d126      	bne.n	80019a2 <HAL_UARTEx_RxEventCallback+0x66>
		uint16_t copyIx = 0;
 8001954:	210e      	movs	r1, #14
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2200      	movs	r2, #0
 800195a:	801a      	strh	r2, [r3, #0]
		uint16_t copySize = Size;
 800195c:	200c      	movs	r0, #12
 800195e:	183b      	adds	r3, r7, r0
 8001960:	1cba      	adds	r2, r7, #2
 8001962:	8812      	ldrh	r2, [r2, #0]
 8001964:	801a      	strh	r2, [r3, #0]

		if (copySize > 0) {
 8001966:	183b      	adds	r3, r7, r0
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d009      	beq.n	8001982 <HAL_UARTEx_RxEventCallback+0x46>
			circ_buf_push_bytes(&uart_ring_buf, uart_byte_buf + copyIx,
 800196e:	187b      	adds	r3, r7, r1
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_UARTEx_RxEventCallback+0x74>)
 8001974:	18d1      	adds	r1, r2, r3
 8001976:	183b      	adds	r3, r7, r0
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_UARTEx_RxEventCallback+0x78>)
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff f983 	bl	8000c88 <circ_buf_push_bytes>
					copySize);
		}
		HAL_UARTEx_ReceiveToIdle_DMA(huart, uart_byte_buf, UART_BUFFER_SIZE);
 8001982:	490b      	ldr	r1, [pc, #44]	; (80019b0 <HAL_UARTEx_RxEventCallback+0x74>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	0018      	movs	r0, r3
 800198a:	f003 ff04 	bl	8005796 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2104      	movs	r1, #4
 800199e:	438a      	bics	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
	}
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b004      	add	sp, #16
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40013800 	.word	0x40013800
 80019b0:	20000754 	.word	0x20000754
 80019b4:	20000008 	.word	0x20000008

080019b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b8:	4813      	ldr	r0, [pc, #76]	; (8001a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019bc:	f7ff ff56 	bl	800186c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80019c0:	4812      	ldr	r0, [pc, #72]	; (8001a0c <LoopForever+0x6>)
    LDR R1, [R0]
 80019c2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80019c4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <LoopForever+0xa>)
    CMP R1, R2
 80019c8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80019ca:	d105      	bne.n	80019d8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80019cc:	4811      	ldr	r0, [pc, #68]	; (8001a14 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80019ce:	4912      	ldr	r1, [pc, #72]	; (8001a18 <LoopForever+0x12>)
    STR R1, [R0]
 80019d0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80019d2:	4812      	ldr	r0, [pc, #72]	; (8001a1c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80019d4:	4912      	ldr	r1, [pc, #72]	; (8001a20 <LoopForever+0x1a>)
    STR R1, [R0]
 80019d6:	6001      	str	r1, [r0, #0]

080019d8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d8:	4812      	ldr	r0, [pc, #72]	; (8001a24 <LoopForever+0x1e>)
  ldr r1, =_edata
 80019da:	4913      	ldr	r1, [pc, #76]	; (8001a28 <LoopForever+0x22>)
  ldr r2, =_sidata
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <LoopForever+0x26>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80019f0:	4c10      	ldr	r4, [pc, #64]	; (8001a34 <LoopForever+0x2e>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019fe:	f003 ff3b 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a02:	f7ff fb97 	bl	8001134 <main>

08001a06 <LoopForever>:

LoopForever:
    b LoopForever
 8001a06:	e7fe      	b.n	8001a06 <LoopForever>
  ldr   r0, =_estack
 8001a08:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001a0c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001a10:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001a14:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001a18:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001a1c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001a20:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a28:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001a2c:	0800593c 	.word	0x0800593c
  ldr r2, =_sbss
 8001a30:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001a34:	200009e0 	.word	0x200009e0

08001a38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC1_IRQHandler>
	...

08001a3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_Init+0x24>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_Init+0x24>)
 8001a46:	2110      	movs	r1, #16
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f809 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a52:	f7ff fd75 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	40022000 	.word	0x40022000

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_InitTick+0x5c>)
 8001a6e:	681c      	ldr	r4, [r3, #0]
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_InitTick+0x60>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	0019      	movs	r1, r3
 8001a76:	23fa      	movs	r3, #250	; 0xfa
 8001a78:	0098      	lsls	r0, r3, #2
 8001a7a:	f7fe fb45 	bl	8000108 <__udivsi3>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	0019      	movs	r1, r3
 8001a82:	0020      	movs	r0, r4
 8001a84:	f7fe fb40 	bl	8000108 <__udivsi3>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 ff75 	bl	800297a <HAL_SYSTICK_Config>
 8001a90:	1e03      	subs	r3, r0, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e00f      	b.n	8001ab8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d80b      	bhi.n	8001ab6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 ff42 	bl	8002930 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_InitTick+0x64>)
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b003      	add	sp, #12
 8001abe:	bd90      	pop	{r4, r7, pc}
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	2000001c 	.word	0x2000001c
 8001ac8:	20000018 	.word	0x20000018

08001acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_IncTick+0x1c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_IncTick+0x20>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	18d2      	adds	r2, r2, r3
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_IncTick+0x20>)
 8001ade:	601a      	str	r2, [r3, #0]
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	2000001c 	.word	0x2000001c
 8001aec:	200009dc 	.word	0x200009dc

08001af0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <HAL_GetTick+0x10>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	200009dc 	.word	0x200009dc

08001b04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0f0      	b.n	8001cf8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff fd2f 	bl	8001588 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b3a:	f7ff ffd9 	bl	8001af0 <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b42:	e013      	b.n	8001b6c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b44:	f7ff ffd4 	bl	8001af0 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b0a      	cmp	r3, #10
 8001b50:	d90c      	bls.n	8001b6c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	0292      	lsls	r2, r2, #10
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	2105      	movs	r1, #5
 8001b66:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0c5      	b.n	8001cf8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4013      	ands	r3, r2
 8001b76:	d0e5      	beq.n	8001b44 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2102      	movs	r1, #2
 8001b84:	438a      	bics	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b88:	f7ff ffb2 	bl	8001af0 <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b90:	e013      	b.n	8001bba <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b92:	f7ff ffad 	bl	8001af0 <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b0a      	cmp	r3, #10
 8001b9e:	d90c      	bls.n	8001bba <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	0292      	lsls	r2, r2, #10
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	2105      	movs	r1, #5
 8001bb4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e09e      	b.n	8001cf8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d1e5      	bne.n	8001b92 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7e1b      	ldrb	r3, [r3, #24]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d108      	bne.n	8001be0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e007      	b.n	8001bf0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	438a      	bics	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7e5b      	ldrb	r3, [r3, #25]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d108      	bne.n	8001c0a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e007      	b.n	8001c1a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2140      	movs	r1, #64	; 0x40
 8001c16:	438a      	bics	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7e9b      	ldrb	r3, [r3, #26]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2120      	movs	r1, #32
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e007      	b.n	8001c44 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2120      	movs	r1, #32
 8001c40:	438a      	bics	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7edb      	ldrb	r3, [r3, #27]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d108      	bne.n	8001c5e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2110      	movs	r1, #16
 8001c58:	438a      	bics	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e007      	b.n	8001c6e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2110      	movs	r1, #16
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7f1b      	ldrb	r3, [r3, #28]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d108      	bne.n	8001c88 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2108      	movs	r1, #8
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e007      	b.n	8001c98 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2108      	movs	r1, #8
 8001c94:	438a      	bics	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7f5b      	ldrb	r3, [r3, #29]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2104      	movs	r1, #4
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e007      	b.n	8001cc2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	0011      	movs	r1, r2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	1e5a      	subs	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b004      	add	sp, #16
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d10:	2013      	movs	r0, #19
 8001d12:	183b      	adds	r3, r7, r0
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	2120      	movs	r1, #32
 8001d18:	5c52      	ldrb	r2, [r2, r1]
 8001d1a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	18bb      	adds	r3, r7, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d004      	beq.n	8001d30 <HAL_CAN_ConfigFilter+0x30>
 8001d26:	18bb      	adds	r3, r7, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d000      	beq.n	8001d30 <HAL_CAN_ConfigFilter+0x30>
 8001d2e:	e0cd      	b.n	8001ecc <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	58d3      	ldr	r3, [r2, r3]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	0011      	movs	r1, r2
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	221f      	movs	r2, #31
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2201      	movs	r2, #1
 8001d50:	409a      	lsls	r2, r3
 8001d52:	0013      	movs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	2387      	movs	r3, #135	; 0x87
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	58d3      	ldr	r3, [r2, r3]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	43d2      	mvns	r2, r2
 8001d62:	401a      	ands	r2, r3
 8001d64:	0011      	movs	r1, r2
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	2387      	movs	r3, #135	; 0x87
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d129      	bne.n	8001dca <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	2383      	movs	r3, #131	; 0x83
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	58d3      	ldr	r3, [r2, r3]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	43d2      	mvns	r2, r2
 8001d82:	401a      	ands	r2, r3
 8001d84:	0011      	movs	r1, r2
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	2383      	movs	r3, #131	; 0x83
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001da0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3248      	adds	r2, #72	; 0x48
 8001da6:	00d2      	lsls	r2, r2, #3
 8001da8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dbc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dbe:	6979      	ldr	r1, [r7, #20]
 8001dc0:	3348      	adds	r3, #72	; 0x48
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	18cb      	adds	r3, r1, r3
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d128      	bne.n	8001e24 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	2383      	movs	r3, #131	; 0x83
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	58d2      	ldr	r2, [r2, r3]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	0011      	movs	r1, r2
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	2383      	movs	r3, #131	; 0x83
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dfa:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3248      	adds	r2, #72	; 0x48
 8001e00:	00d2      	lsls	r2, r2, #3
 8001e02:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e18:	6979      	ldr	r1, [r7, #20]
 8001e1a:	3348      	adds	r3, #72	; 0x48
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	18cb      	adds	r3, r1, r3
 8001e20:	3304      	adds	r3, #4
 8001e22:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10c      	bne.n	8001e46 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	2381      	movs	r3, #129	; 0x81
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	58d3      	ldr	r3, [r2, r3]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	43d2      	mvns	r2, r2
 8001e38:	401a      	ands	r2, r3
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	2381      	movs	r3, #129	; 0x81
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	50d1      	str	r1, [r2, r3]
 8001e44:	e00a      	b.n	8001e5c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	2381      	movs	r3, #129	; 0x81
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	58d2      	ldr	r2, [r2, r3]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	0011      	movs	r1, r2
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	2381      	movs	r3, #129	; 0x81
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10c      	bne.n	8001e7e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	2385      	movs	r3, #133	; 0x85
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	58d3      	ldr	r3, [r2, r3]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	43d2      	mvns	r2, r2
 8001e70:	401a      	ands	r2, r3
 8001e72:	0011      	movs	r1, r2
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	2385      	movs	r3, #133	; 0x85
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	50d1      	str	r1, [r2, r3]
 8001e7c:	e00a      	b.n	8001e94 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	2385      	movs	r3, #133	; 0x85
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	58d2      	ldr	r2, [r2, r3]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	2385      	movs	r3, #133	; 0x85
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10a      	bne.n	8001eb2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	2387      	movs	r3, #135	; 0x87
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	58d2      	ldr	r2, [r2, r3]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	0011      	movs	r1, r2
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	2387      	movs	r3, #135	; 0x87
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	58d3      	ldr	r3, [r2, r3]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e007      	b.n	8001edc <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	02d2      	lsls	r2, r2, #11
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
  }
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b006      	add	sp, #24
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	5c9b      	ldrb	r3, [r3, r2]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d12f      	bne.n	8001f58 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	2102      	movs	r1, #2
 8001efe:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	438a      	bics	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f10:	f7ff fdee 	bl	8001af0 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f18:	e013      	b.n	8001f42 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f1a:	f7ff fde9 	bl	8001af0 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b0a      	cmp	r3, #10
 8001f26:	d90c      	bls.n	8001f42 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	0292      	lsls	r2, r2, #10
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	2105      	movs	r1, #5
 8001f3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e012      	b.n	8001f68 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d1e5      	bne.n	8001f1a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e007      	b.n	8001f68 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	0312      	lsls	r2, r2, #12
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
  }
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b004      	add	sp, #16
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f7e:	201f      	movs	r0, #31
 8001f80:	183b      	adds	r3, r7, r0
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	2120      	movs	r1, #32
 8001f86:	5c52      	ldrb	r2, [r2, r1]
 8001f88:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f92:	183b      	adds	r3, r7, r0
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d004      	beq.n	8001fa4 <HAL_CAN_AddTxMessage+0x34>
 8001f9a:	183b      	adds	r3, r7, r0
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d000      	beq.n	8001fa4 <HAL_CAN_AddTxMessage+0x34>
 8001fa2:	e0ab      	b.n	80020fc <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	04db      	lsls	r3, r3, #19
 8001faa:	4013      	ands	r3, r2
 8001fac:	d10a      	bne.n	8001fc4 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	051b      	lsls	r3, r3, #20
 8001fb4:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fb6:	d105      	bne.n	8001fc4 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	055b      	lsls	r3, r3, #21
 8001fbe:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fc0:	d100      	bne.n	8001fc4 <HAL_CAN_AddTxMessage+0x54>
 8001fc2:	e092      	b.n	80020ea <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	0e1b      	lsrs	r3, r3, #24
 8001fc8:	2203      	movs	r2, #3
 8001fca:	4013      	ands	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001fce:	2201      	movs	r2, #1
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10c      	bne.n	8001ffa <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	3218      	adds	r2, #24
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	50d1      	str	r1, [r2, r3]
 8001ff8:	e00f      	b.n	800201a <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002004:	431a      	orrs	r2, r3
 8002006:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002010:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	3218      	adds	r2, #24
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3318      	adds	r3, #24
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	18cb      	adds	r3, r1, r3
 800202a:	3304      	adds	r3, #4
 800202c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	7d1b      	ldrb	r3, [r3, #20]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d112      	bne.n	800205c <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3318      	adds	r3, #24
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	3304      	adds	r3, #4
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	431a      	orrs	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3318      	adds	r3, #24
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	18cb      	adds	r3, r1, r3
 8002058:	3304      	adds	r3, #4
 800205a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3307      	adds	r3, #7
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	061a      	lsls	r2, r3, #24
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3306      	adds	r3, #6
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3305      	adds	r3, #5
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	0019      	movs	r1, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	6979      	ldr	r1, [r7, #20]
 8002088:	23c6      	movs	r3, #198	; 0xc6
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	0109      	lsls	r1, r1, #4
 800208e:	1841      	adds	r1, r0, r1
 8002090:	18cb      	adds	r3, r1, r3
 8002092:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3303      	adds	r3, #3
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	061a      	lsls	r2, r3, #24
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3302      	adds	r3, #2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	041b      	lsls	r3, r3, #16
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3301      	adds	r3, #1
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	0019      	movs	r1, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	6979      	ldr	r1, [r7, #20]
 80020be:	23c4      	movs	r3, #196	; 0xc4
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	0109      	lsls	r1, r1, #4
 80020c4:	1841      	adds	r1, r0, r1
 80020c6:	18cb      	adds	r3, r1, r3
 80020c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	3218      	adds	r2, #24
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	58d2      	ldr	r2, [r2, r3]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2101      	movs	r1, #1
 80020dc:	4311      	orrs	r1, r2
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	3218      	adds	r2, #24
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e010      	b.n	800210c <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	0392      	lsls	r2, r2, #14
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e007      	b.n	800210c <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	02d2      	lsls	r2, r2, #11
 8002104:	431a      	orrs	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
  }
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b008      	add	sp, #32
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002122:	2017      	movs	r0, #23
 8002124:	183b      	adds	r3, r7, r0
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	2120      	movs	r1, #32
 800212a:	5c52      	ldrb	r2, [r2, r1]
 800212c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800212e:	0002      	movs	r2, r0
 8002130:	18bb      	adds	r3, r7, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d004      	beq.n	8002142 <HAL_CAN_GetRxMessage+0x2e>
 8002138:	18bb      	adds	r3, r7, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d000      	beq.n	8002142 <HAL_CAN_GetRxMessage+0x2e>
 8002140:	e107      	b.n	8002352 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10e      	bne.n	8002166 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2203      	movs	r2, #3
 8002150:	4013      	ands	r3, r2
 8002152:	d117      	bne.n	8002184 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	0392      	lsls	r2, r2, #14
 800215c:	431a      	orrs	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0fd      	b.n	8002362 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	2203      	movs	r2, #3
 800216e:	4013      	ands	r3, r2
 8002170:	d108      	bne.n	8002184 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	0392      	lsls	r2, r2, #14
 800217a:	431a      	orrs	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0ee      	b.n	8002362 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	321b      	adds	r2, #27
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	58d3      	ldr	r3, [r2, r3]
 8002190:	2204      	movs	r2, #4
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	321b      	adds	r2, #27
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	58d3      	ldr	r3, [r2, r3]
 80021ac:	0d5b      	lsrs	r3, r3, #21
 80021ae:	055b      	lsls	r3, r3, #21
 80021b0:	0d5a      	lsrs	r2, r3, #21
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e00a      	b.n	80021ce <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	321b      	adds	r2, #27
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	58d3      	ldr	r3, [r2, r3]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	321b      	adds	r2, #27
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	58d3      	ldr	r3, [r2, r3]
 80021da:	2202      	movs	r2, #2
 80021dc:	401a      	ands	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	331b      	adds	r3, #27
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	3304      	adds	r3, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2208      	movs	r2, #8
 80021f4:	4013      	ands	r3, r2
 80021f6:	d003      	beq.n	8002200 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2208      	movs	r2, #8
 80021fc:	611a      	str	r2, [r3, #16]
 80021fe:	e00b      	b.n	8002218 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	331b      	adds	r3, #27
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	18d3      	adds	r3, r2, r3
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	220f      	movs	r2, #15
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	331b      	adds	r3, #27
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	18d3      	adds	r3, r2, r3
 8002224:	3304      	adds	r3, #4
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	22ff      	movs	r2, #255	; 0xff
 800222c:	401a      	ands	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	331b      	adds	r3, #27
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	18d3      	adds	r3, r2, r3
 800223e:	3304      	adds	r3, #4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	0c1a      	lsrs	r2, r3, #16
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	23dc      	movs	r3, #220	; 0xdc
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	188a      	adds	r2, r1, r2
 800225a:	18d3      	adds	r3, r2, r3
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	23dc      	movs	r3, #220	; 0xdc
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	188a      	adds	r2, r1, r2
 8002272:	18d3      	adds	r3, r2, r3
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0a1a      	lsrs	r2, r3, #8
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	23dc      	movs	r3, #220	; 0xdc
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	188a      	adds	r2, r1, r2
 800228e:	18d3      	adds	r3, r2, r3
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0c1a      	lsrs	r2, r3, #16
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	3302      	adds	r3, #2
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6819      	ldr	r1, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	23dc      	movs	r3, #220	; 0xdc
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	188a      	adds	r2, r1, r2
 80022aa:	18d3      	adds	r3, r2, r3
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e1a      	lsrs	r2, r3, #24
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	3303      	adds	r3, #3
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	23de      	movs	r3, #222	; 0xde
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	188a      	adds	r2, r1, r2
 80022c6:	18d3      	adds	r3, r2, r3
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3304      	adds	r3, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	23de      	movs	r3, #222	; 0xde
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	188a      	adds	r2, r1, r2
 80022e0:	18d3      	adds	r3, r2, r3
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0a1a      	lsrs	r2, r3, #8
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3305      	adds	r3, #5
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	23de      	movs	r3, #222	; 0xde
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	188a      	adds	r2, r1, r2
 80022fc:	18d3      	adds	r3, r2, r3
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0c1a      	lsrs	r2, r3, #16
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3306      	adds	r3, #6
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	23de      	movs	r3, #222	; 0xde
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	188a      	adds	r2, r1, r2
 8002318:	18d3      	adds	r3, r2, r3
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e1a      	lsrs	r2, r3, #24
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	3307      	adds	r3, #7
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d108      	bne.n	800233e <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2120      	movs	r1, #32
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	e007      	b.n	800234e <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2120      	movs	r1, #32
 800234a:	430a      	orrs	r2, r1
 800234c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e007      	b.n	8002362 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	02d2      	lsls	r2, r2, #11
 800235a:	431a      	orrs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
  }
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b006      	add	sp, #24
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002374:	200f      	movs	r0, #15
 8002376:	183b      	adds	r3, r7, r0
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	2120      	movs	r1, #32
 800237c:	5c52      	ldrb	r2, [r2, r1]
 800237e:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002380:	0002      	movs	r2, r0
 8002382:	18bb      	adds	r3, r7, r2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d003      	beq.n	8002392 <HAL_CAN_ActivateNotification+0x28>
 800238a:	18bb      	adds	r3, r7, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d109      	bne.n	80023a6 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6959      	ldr	r1, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e007      	b.n	80023b6 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	02d2      	lsls	r2, r2, #11
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
  }
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b004      	add	sp, #16
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b08a      	sub	sp, #40	; 0x28
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2201      	movs	r2, #1
 80023fe:	4013      	ands	r3, r2
 8002400:	d100      	bne.n	8002404 <HAL_CAN_IRQHandler+0x46>
 8002402:	e084      	b.n	800250e <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2201      	movs	r2, #1
 8002408:	4013      	ands	r3, r2
 800240a:	d024      	beq.n	8002456 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f7fe fc24 	bl	8000c6c <HAL_CAN_TxMailbox0CompleteCallback>
 8002424:	e017      	b.n	8002456 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2204      	movs	r2, #4
 800242a:	4013      	ands	r3, r2
 800242c:	d005      	beq.n	800243a <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	4313      	orrs	r3, r2
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	e00d      	b.n	8002456 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2208      	movs	r2, #8
 800243e:	4013      	ands	r3, r2
 8002440:	d005      	beq.n	800244e <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	2280      	movs	r2, #128	; 0x80
 8002446:	0152      	lsls	r2, r2, #5
 8002448:	4313      	orrs	r3, r2
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
 800244c:	e003      	b.n	8002456 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f000 f978 	bl	8002746 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d028      	beq.n	80024b2 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2280      	movs	r2, #128	; 0x80
 8002466:	0052      	lsls	r2, r2, #1
 8002468:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d004      	beq.n	800247e <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f955 	bl	8002726 <HAL_CAN_TxMailbox1CompleteCallback>
 800247c:	e019      	b.n	80024b2 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4013      	ands	r3, r2
 8002486:	d005      	beq.n	8002494 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	0192      	lsls	r2, r2, #6
 800248e:	4313      	orrs	r3, r2
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
 8002492:	e00e      	b.n	80024b2 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	4013      	ands	r3, r2
 800249c:	d005      	beq.n	80024aa <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	01d2      	lsls	r2, r2, #7
 80024a4:	4313      	orrs	r3, r2
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
 80024a8:	e003      	b.n	80024b2 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f000 f952 	bl	8002756 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	025b      	lsls	r3, r3, #9
 80024b8:	4013      	ands	r3, r2
 80024ba:	d028      	beq.n	800250e <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	0252      	lsls	r2, r2, #9
 80024c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	029b      	lsls	r3, r3, #10
 80024cc:	4013      	ands	r3, r2
 80024ce:	d004      	beq.n	80024da <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 f92f 	bl	8002736 <HAL_CAN_TxMailbox2CompleteCallback>
 80024d8:	e019      	b.n	800250e <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	02db      	lsls	r3, r3, #11
 80024e0:	4013      	ands	r3, r2
 80024e2:	d005      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	0212      	lsls	r2, r2, #8
 80024ea:	4313      	orrs	r3, r2
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
 80024ee:	e00e      	b.n	800250e <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	031b      	lsls	r3, r3, #12
 80024f6:	4013      	ands	r3, r2
 80024f8:	d005      	beq.n	8002506 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	0252      	lsls	r2, r2, #9
 8002500:	4313      	orrs	r3, r2
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
 8002504:	e003      	b.n	800250e <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f92c 	bl	8002766 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2208      	movs	r2, #8
 8002512:	4013      	ands	r3, r2
 8002514:	d00c      	beq.n	8002530 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2210      	movs	r2, #16
 800251a:	4013      	ands	r3, r2
 800251c:	d008      	beq.n	8002530 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4313      	orrs	r3, r2
 8002526:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2210      	movs	r2, #16
 800252e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	2204      	movs	r2, #4
 8002534:	4013      	ands	r3, r2
 8002536:	d00b      	beq.n	8002550 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2208      	movs	r2, #8
 800253c:	4013      	ands	r3, r2
 800253e:	d007      	beq.n	8002550 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2208      	movs	r2, #8
 8002546:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	0018      	movs	r0, r3
 800254c:	f000 f913 	bl	8002776 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2202      	movs	r2, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2203      	movs	r2, #3
 8002560:	4013      	ands	r3, r2
 8002562:	d003      	beq.n	800256c <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0018      	movs	r0, r3
 8002568:	f7fd fe5a 	bl	8000220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	4013      	ands	r3, r2
 8002572:	d00c      	beq.n	800258e <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2210      	movs	r2, #16
 8002578:	4013      	ands	r3, r2
 800257a:	d008      	beq.n	800258e <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	2280      	movs	r2, #128	; 0x80
 8002580:	00d2      	lsls	r2, r2, #3
 8002582:	4313      	orrs	r3, r2
 8002584:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2210      	movs	r2, #16
 800258c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	2220      	movs	r2, #32
 8002592:	4013      	ands	r3, r2
 8002594:	d00b      	beq.n	80025ae <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2208      	movs	r2, #8
 800259a:	4013      	ands	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2208      	movs	r2, #8
 80025a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 f8f4 	bl	8002796 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	2210      	movs	r2, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	d009      	beq.n	80025ca <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2203      	movs	r2, #3
 80025be:	4013      	ands	r3, r2
 80025c0:	d003      	beq.n	80025ca <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 f8de 	bl	8002786 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025ca:	6a3a      	ldr	r2, [r7, #32]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	4013      	ands	r3, r2
 80025d2:	d00b      	beq.n	80025ec <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2210      	movs	r2, #16
 80025d8:	4013      	ands	r3, r2
 80025da:	d007      	beq.n	80025ec <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 f8dd 	bl	80027a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025ec:	6a3a      	ldr	r2, [r7, #32]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	025b      	lsls	r3, r3, #9
 80025f2:	4013      	ands	r3, r2
 80025f4:	d00b      	beq.n	800260e <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2208      	movs	r2, #8
 80025fa:	4013      	ands	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2208      	movs	r2, #8
 8002604:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f000 f8d4 	bl	80027b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800260e:	6a3a      	ldr	r2, [r7, #32]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	4013      	ands	r3, r2
 8002616:	d100      	bne.n	800261a <HAL_CAN_IRQHandler+0x25c>
 8002618:	e074      	b.n	8002704 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	2204      	movs	r2, #4
 800261e:	4013      	ands	r3, r2
 8002620:	d100      	bne.n	8002624 <HAL_CAN_IRQHandler+0x266>
 8002622:	e06b      	b.n	80026fc <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002624:	6a3a      	ldr	r2, [r7, #32]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4013      	ands	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002634:	d003      	beq.n	800263e <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	2201      	movs	r2, #1
 800263a:	4313      	orrs	r3, r2
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800263e:	6a3a      	ldr	r2, [r7, #32]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4013      	ands	r3, r2
 8002646:	d007      	beq.n	8002658 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2202      	movs	r2, #2
 800264c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800264e:	d003      	beq.n	8002658 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	2202      	movs	r2, #2
 8002654:	4313      	orrs	r3, r2
 8002656:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4013      	ands	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2204      	movs	r2, #4
 8002666:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002668:	d003      	beq.n	8002672 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	2204      	movs	r2, #4
 800266e:	4313      	orrs	r3, r2
 8002670:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002672:	6a3a      	ldr	r2, [r7, #32]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4013      	ands	r3, r2
 800267a:	d03f      	beq.n	80026fc <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2270      	movs	r2, #112	; 0x70
 8002680:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002682:	d03b      	beq.n	80026fc <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2270      	movs	r2, #112	; 0x70
 8002688:	4013      	ands	r3, r2
 800268a:	2b60      	cmp	r3, #96	; 0x60
 800268c:	d027      	beq.n	80026de <HAL_CAN_IRQHandler+0x320>
 800268e:	d82c      	bhi.n	80026ea <HAL_CAN_IRQHandler+0x32c>
 8002690:	2b50      	cmp	r3, #80	; 0x50
 8002692:	d01f      	beq.n	80026d4 <HAL_CAN_IRQHandler+0x316>
 8002694:	d829      	bhi.n	80026ea <HAL_CAN_IRQHandler+0x32c>
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	d017      	beq.n	80026ca <HAL_CAN_IRQHandler+0x30c>
 800269a:	d826      	bhi.n	80026ea <HAL_CAN_IRQHandler+0x32c>
 800269c:	2b30      	cmp	r3, #48	; 0x30
 800269e:	d00f      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x302>
 80026a0:	d823      	bhi.n	80026ea <HAL_CAN_IRQHandler+0x32c>
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d002      	beq.n	80026ac <HAL_CAN_IRQHandler+0x2ee>
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d005      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026aa:	e01e      	b.n	80026ea <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	2208      	movs	r2, #8
 80026b0:	4313      	orrs	r3, r2
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026b4:	e01a      	b.n	80026ec <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	2210      	movs	r2, #16
 80026ba:	4313      	orrs	r3, r2
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026be:	e015      	b.n	80026ec <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	2220      	movs	r2, #32
 80026c4:	4313      	orrs	r3, r2
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026c8:	e010      	b.n	80026ec <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	2240      	movs	r2, #64	; 0x40
 80026ce:	4313      	orrs	r3, r2
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026d2:	e00b      	b.n	80026ec <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	4313      	orrs	r3, r2
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026dc:	e006      	b.n	80026ec <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	0052      	lsls	r2, r2, #1
 80026e4:	4313      	orrs	r3, r2
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026e8:	e000      	b.n	80026ec <HAL_CAN_IRQHandler+0x32e>
            break;
 80026ea:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2170      	movs	r1, #112	; 0x70
 80026f8:	438a      	bics	r2, r1
 80026fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2204      	movs	r2, #4
 8002702:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f854 	bl	80027c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	b00a      	add	sp, #40	; 0x28
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b002      	add	sp, #8
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b002      	add	sp, #8
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b002      	add	sp, #8
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b002      	add	sp, #8
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b002      	add	sp, #8
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	0002      	movs	r2, r0
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	1dfb      	adds	r3, r7, #7
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b7f      	cmp	r3, #127	; 0x7f
 80027ea:	d809      	bhi.n	8002800 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	001a      	movs	r2, r3
 80027f2:	231f      	movs	r3, #31
 80027f4:	401a      	ands	r2, r3
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <__NVIC_EnableIRQ+0x30>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	4091      	lsls	r1, r2
 80027fc:	000a      	movs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
  }
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}
 8002808:	e000e100 	.word	0xe000e100

0800280c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	0002      	movs	r2, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b7f      	cmp	r3, #127	; 0x7f
 8002820:	d828      	bhi.n	8002874 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002822:	4a2f      	ldr	r2, [pc, #188]	; (80028e0 <__NVIC_SetPriority+0xd4>)
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b25b      	sxtb	r3, r3
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	33c0      	adds	r3, #192	; 0xc0
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	589b      	ldr	r3, [r3, r2]
 8002832:	1dfa      	adds	r2, r7, #7
 8002834:	7812      	ldrb	r2, [r2, #0]
 8002836:	0011      	movs	r1, r2
 8002838:	2203      	movs	r2, #3
 800283a:	400a      	ands	r2, r1
 800283c:	00d2      	lsls	r2, r2, #3
 800283e:	21ff      	movs	r1, #255	; 0xff
 8002840:	4091      	lsls	r1, r2
 8002842:	000a      	movs	r2, r1
 8002844:	43d2      	mvns	r2, r2
 8002846:	401a      	ands	r2, r3
 8002848:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	22ff      	movs	r2, #255	; 0xff
 8002850:	401a      	ands	r2, r3
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	0018      	movs	r0, r3
 8002858:	2303      	movs	r3, #3
 800285a:	4003      	ands	r3, r0
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002860:	481f      	ldr	r0, [pc, #124]	; (80028e0 <__NVIC_SetPriority+0xd4>)
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b25b      	sxtb	r3, r3
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	430a      	orrs	r2, r1
 800286c:	33c0      	adds	r3, #192	; 0xc0
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002872:	e031      	b.n	80028d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002874:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <__NVIC_SetPriority+0xd8>)
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	0019      	movs	r1, r3
 800287c:	230f      	movs	r3, #15
 800287e:	400b      	ands	r3, r1
 8002880:	3b08      	subs	r3, #8
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3306      	adds	r3, #6
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	18d3      	adds	r3, r2, r3
 800288a:	3304      	adds	r3, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	1dfa      	adds	r2, r7, #7
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	0011      	movs	r1, r2
 8002894:	2203      	movs	r2, #3
 8002896:	400a      	ands	r2, r1
 8002898:	00d2      	lsls	r2, r2, #3
 800289a:	21ff      	movs	r1, #255	; 0xff
 800289c:	4091      	lsls	r1, r2
 800289e:	000a      	movs	r2, r1
 80028a0:	43d2      	mvns	r2, r2
 80028a2:	401a      	ands	r2, r3
 80028a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	22ff      	movs	r2, #255	; 0xff
 80028ac:	401a      	ands	r2, r3
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	0018      	movs	r0, r3
 80028b4:	2303      	movs	r3, #3
 80028b6:	4003      	ands	r3, r0
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028bc:	4809      	ldr	r0, [pc, #36]	; (80028e4 <__NVIC_SetPriority+0xd8>)
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	001c      	movs	r4, r3
 80028c4:	230f      	movs	r3, #15
 80028c6:	4023      	ands	r3, r4
 80028c8:	3b08      	subs	r3, #8
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	430a      	orrs	r2, r1
 80028ce:	3306      	adds	r3, #6
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	18c3      	adds	r3, r0, r3
 80028d4:	3304      	adds	r3, #4
 80028d6:	601a      	str	r2, [r3, #0]
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b003      	add	sp, #12
 80028de:	bd90      	pop	{r4, r7, pc}
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	1e5a      	subs	r2, r3, #1
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	045b      	lsls	r3, r3, #17
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d301      	bcc.n	8002900 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fc:	2301      	movs	r3, #1
 80028fe:	e010      	b.n	8002922 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <SysTick_Config+0x44>)
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	3a01      	subs	r2, #1
 8002906:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002908:	2301      	movs	r3, #1
 800290a:	425b      	negs	r3, r3
 800290c:	2103      	movs	r1, #3
 800290e:	0018      	movs	r0, r3
 8002910:	f7ff ff7c 	bl	800280c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x44>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x44>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b002      	add	sp, #8
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	210f      	movs	r1, #15
 800293c:	187b      	adds	r3, r7, r1
 800293e:	1c02      	adds	r2, r0, #0
 8002940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	187b      	adds	r3, r7, r1
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b25b      	sxtb	r3, r3
 800294a:	0011      	movs	r1, r2
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff ff5d 	bl	800280c <__NVIC_SetPriority>
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	b004      	add	sp, #16
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	0002      	movs	r2, r0
 8002962:	1dfb      	adds	r3, r7, #7
 8002964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	b25b      	sxtb	r3, r3
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff ff33 	bl	80027d8 <__NVIC_EnableIRQ>
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b002      	add	sp, #8
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f7ff ffaf 	bl	80028e8 <SysTick_Config>
 800298a:	0003      	movs	r3, r0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e036      	b.n	8002a18 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2221      	movs	r2, #33	; 0x21
 80029ae:	2102      	movs	r1, #2
 80029b0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_DMA_Init+0x8c>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f9c4 	bl	8002d88 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2221      	movs	r2, #33	; 0x21
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b004      	add	sp, #16
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	ffffc00f 	.word	0xffffc00f

08002a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2317      	movs	r3, #23
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	5c9b      	ldrb	r3, [r3, r2]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_DMA_Start_IT+0x24>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e04f      	b.n	8002ae8 <HAL_DMA_Start_IT+0xc4>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2221      	movs	r2, #33	; 0x21
 8002a54:	5c9b      	ldrb	r3, [r3, r2]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d13a      	bne.n	8002ad2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2221      	movs	r2, #33	; 0x21
 8002a60:	2102      	movs	r1, #2
 8002a62:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2101      	movs	r1, #1
 8002a76:	438a      	bics	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f954 	bl	8002d2e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	210e      	movs	r1, #14
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e00f      	b.n	8002ac0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	210a      	movs	r1, #10
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2104      	movs	r1, #4
 8002abc:	438a      	bics	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e007      	b.n	8002ae2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ada:	2317      	movs	r3, #23
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2202      	movs	r2, #2
 8002ae0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002ae2:	2317      	movs	r3, #23
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b006      	add	sp, #24
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2221      	movs	r2, #33	; 0x21
 8002afc:	5c9b      	ldrb	r3, [r3, r2]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2204      	movs	r2, #4
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	2100      	movs	r1, #0
 8002b10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e020      	b.n	8002b58 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	210e      	movs	r1, #14
 8002b22:	438a      	bics	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	438a      	bics	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4091      	lsls	r1, r2
 8002b42:	000a      	movs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2221      	movs	r2, #33	; 0x21
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b68:	210f      	movs	r1, #15
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2221      	movs	r2, #33	; 0x21
 8002b74:	5c9b      	ldrb	r3, [r3, r2]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d006      	beq.n	8002b8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e028      	b.n	8002bdc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	210e      	movs	r1, #14
 8002b96:	438a      	bics	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	438a      	bics	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4091      	lsls	r1, r2
 8002bb6:	000a      	movs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2221      	movs	r2, #33	; 0x21
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	0010      	movs	r0, r2
 8002bda:	4798      	blx	r3
    }
  }
  return status;
 8002bdc:	230f      	movs	r3, #15
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	781b      	ldrb	r3, [r3, #0]
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2204      	movs	r2, #4
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d024      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x72>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2204      	movs	r2, #4
 8002c16:	4013      	ands	r3, r2
 8002c18:	d020      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2220      	movs	r2, #32
 8002c22:	4013      	ands	r3, r2
 8002c24:	d107      	bne.n	8002c36 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2104      	movs	r1, #4
 8002c32:	438a      	bics	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2104      	movs	r1, #4
 8002c40:	4091      	lsls	r1, r2
 8002c42:	000a      	movs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d100      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x66>
 8002c4e:	e06a      	b.n	8002d26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	0010      	movs	r0, r2
 8002c58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c5a:	e064      	b.n	8002d26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2202      	movs	r2, #2
 8002c62:	409a      	lsls	r2, r3
 8002c64:	0013      	movs	r3, r2
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d02b      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0xda>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	4013      	ands	r3, r2
 8002c72:	d027      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d10b      	bne.n	8002c98 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	210a      	movs	r1, #10
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2221      	movs	r2, #33	; 0x21
 8002c94:	2101      	movs	r1, #1
 8002c96:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	4091      	lsls	r1, r2
 8002ca4:	000a      	movs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	2100      	movs	r1, #0
 8002cae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d036      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	0010      	movs	r0, r2
 8002cc0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cc2:	e030      	b.n	8002d26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2208      	movs	r2, #8
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	0013      	movs	r3, r2
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d028      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x13c>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d024      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	210e      	movs	r1, #14
 8002ce8:	438a      	bics	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4091      	lsls	r1, r2
 8002cf8:	000a      	movs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2221      	movs	r2, #33	; 0x21
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	2100      	movs	r1, #0
 8002d10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	0010      	movs	r0, r2
 8002d22:	4798      	blx	r3
    }
  }
}
 8002d24:	e7ff      	b.n	8002d26 <HAL_DMA_IRQHandler+0x13c>
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	2101      	movs	r1, #1
 8002d46:	4091      	lsls	r1, r2
 8002d48:	000a      	movs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d108      	bne.n	8002d6e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d6c:	e007      	b.n	8002d7e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	60da      	str	r2, [r3, #12]
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b004      	add	sp, #16
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <DMA_CalcBaseAndBitshift+0x30>)
 8002d96:	4694      	mov	ip, r2
 8002d98:	4463      	add	r3, ip
 8002d9a:	2114      	movs	r1, #20
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7fd f9b3 	bl	8000108 <__udivsi3>
 8002da2:	0003      	movs	r3, r0
 8002da4:	009a      	lsls	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <DMA_CalcBaseAndBitshift+0x34>)
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	bffdfff8 	.word	0xbffdfff8
 8002dbc:	40020000 	.word	0x40020000

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dce:	e149      	b.n	8003064 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4091      	lsls	r1, r2
 8002dda:	000a      	movs	r2, r1
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d100      	bne.n	8002de8 <HAL_GPIO_Init+0x28>
 8002de6:	e13a      	b.n	800305e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2203      	movs	r2, #3
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d005      	beq.n	8002e00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d130      	bne.n	8002e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	0013      	movs	r3, r2
 8002e10:	43da      	mvns	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	409a      	lsls	r2, r3
 8002e22:	0013      	movs	r3, r2
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e36:	2201      	movs	r2, #1
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	0013      	movs	r3, r2
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	409a      	lsls	r2, r3
 8002e54:	0013      	movs	r3, r2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2203      	movs	r2, #3
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d017      	beq.n	8002e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	0013      	movs	r3, r2
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	0013      	movs	r3, r2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d123      	bne.n	8002ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	58d3      	ldr	r3, [r2, r3]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2207      	movs	r2, #7
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2107      	movs	r1, #7
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	409a      	lsls	r2, r3
 8002edc:	0013      	movs	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3208      	adds	r2, #8
 8002eec:	0092      	lsls	r2, r2, #2
 8002eee:	6939      	ldr	r1, [r7, #16]
 8002ef0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	409a      	lsls	r2, r3
 8002f00:	0013      	movs	r3, r2
 8002f02:	43da      	mvns	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	401a      	ands	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	409a      	lsls	r2, r3
 8002f18:	0013      	movs	r3, r2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	029b      	lsls	r3, r3, #10
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d100      	bne.n	8002f34 <HAL_GPIO_Init+0x174>
 8002f32:	e094      	b.n	800305e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f34:	4b51      	ldr	r3, [pc, #324]	; (800307c <HAL_GPIO_Init+0x2bc>)
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	4b50      	ldr	r3, [pc, #320]	; (800307c <HAL_GPIO_Init+0x2bc>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
 8002f40:	4b4e      	ldr	r3, [pc, #312]	; (800307c <HAL_GPIO_Init+0x2bc>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f4c:	4a4c      	ldr	r2, [pc, #304]	; (8003080 <HAL_GPIO_Init+0x2c0>)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	589b      	ldr	r3, [r3, r2]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	4013      	ands	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	409a      	lsls	r2, r3
 8002f66:	0013      	movs	r3, r2
 8002f68:	43da      	mvns	r2, r3
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	2390      	movs	r3, #144	; 0x90
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d00d      	beq.n	8002f96 <HAL_GPIO_Init+0x1d6>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a41      	ldr	r2, [pc, #260]	; (8003084 <HAL_GPIO_Init+0x2c4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <HAL_GPIO_Init+0x1d2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a40      	ldr	r2, [pc, #256]	; (8003088 <HAL_GPIO_Init+0x2c8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_GPIO_Init+0x1ce>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e004      	b.n	8002f98 <HAL_GPIO_Init+0x1d8>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_Init+0x1d8>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_GPIO_Init+0x1d8>
 8002f96:	2300      	movs	r3, #0
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	2103      	movs	r1, #3
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	4093      	lsls	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fa8:	4935      	ldr	r1, [pc, #212]	; (8003080 <HAL_GPIO_Init+0x2c0>)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb6:	4b35      	ldr	r3, [pc, #212]	; (800308c <HAL_GPIO_Init+0x2cc>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	035b      	lsls	r3, r3, #13
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_GPIO_Init+0x2cc>)
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002fe0:	4b2a      	ldr	r3, [pc, #168]	; (800308c <HAL_GPIO_Init+0x2cc>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	039b      	lsls	r3, r3, #14
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003004:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_GPIO_Init+0x2cc>)
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_GPIO_Init+0x2cc>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	43da      	mvns	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	029b      	lsls	r3, r3, #10
 8003022:	4013      	ands	r3, r2
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_GPIO_Init+0x2cc>)
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_GPIO_Init+0x2cc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43da      	mvns	r2, r3
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	025b      	lsls	r3, r3, #9
 800304c:	4013      	ands	r3, r2
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_GPIO_Init+0x2cc>)
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3301      	adds	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	40da      	lsrs	r2, r3
 800306c:	1e13      	subs	r3, r2, #0
 800306e:	d000      	beq.n	8003072 <HAL_GPIO_Init+0x2b2>
 8003070:	e6ae      	b.n	8002dd0 <HAL_GPIO_Init+0x10>
  } 
}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b006      	add	sp, #24
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	48000400 	.word	0x48000400
 8003088:	48000800 	.word	0x48000800
 800308c:	40010400 	.word	0x40010400

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	0008      	movs	r0, r1
 800309a:	0011      	movs	r1, r2
 800309c:	1cbb      	adds	r3, r7, #2
 800309e:	1c02      	adds	r2, r0, #0
 80030a0:	801a      	strh	r2, [r3, #0]
 80030a2:	1c7b      	adds	r3, r7, #1
 80030a4:	1c0a      	adds	r2, r1, #0
 80030a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a8:	1c7b      	adds	r3, r7, #1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b0:	1cbb      	adds	r3, r7, #2
 80030b2:	881a      	ldrh	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ba:	1cbb      	adds	r3, r7, #2
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b002      	add	sp, #8
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f000 fb76 	bl	80037cc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	4013      	ands	r3, r2
 80030e8:	d100      	bne.n	80030ec <HAL_RCC_OscConfig+0x20>
 80030ea:	e08e      	b.n	800320a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030ec:	4bc5      	ldr	r3, [pc, #788]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	220c      	movs	r2, #12
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d00e      	beq.n	8003116 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030f8:	4bc2      	ldr	r3, [pc, #776]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	220c      	movs	r2, #12
 80030fe:	4013      	ands	r3, r2
 8003100:	2b08      	cmp	r3, #8
 8003102:	d117      	bne.n	8003134 <HAL_RCC_OscConfig+0x68>
 8003104:	4bbf      	ldr	r3, [pc, #764]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	23c0      	movs	r3, #192	; 0xc0
 800310a:	025b      	lsls	r3, r3, #9
 800310c:	401a      	ands	r2, r3
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	025b      	lsls	r3, r3, #9
 8003112:	429a      	cmp	r2, r3
 8003114:	d10e      	bne.n	8003134 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003116:	4bbb      	ldr	r3, [pc, #748]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	029b      	lsls	r3, r3, #10
 800311e:	4013      	ands	r3, r2
 8003120:	d100      	bne.n	8003124 <HAL_RCC_OscConfig+0x58>
 8003122:	e071      	b.n	8003208 <HAL_RCC_OscConfig+0x13c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d000      	beq.n	800312e <HAL_RCC_OscConfig+0x62>
 800312c:	e06c      	b.n	8003208 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f000 fb4c 	bl	80037cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x80>
 800313c:	4bb1      	ldr	r3, [pc, #708]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4bb0      	ldr	r3, [pc, #704]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	0249      	lsls	r1, r1, #9
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e02f      	b.n	80031ac <HAL_RCC_OscConfig+0xe0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10c      	bne.n	800316e <HAL_RCC_OscConfig+0xa2>
 8003154:	4bab      	ldr	r3, [pc, #684]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4baa      	ldr	r3, [pc, #680]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800315a:	49ab      	ldr	r1, [pc, #684]	; (8003408 <HAL_RCC_OscConfig+0x33c>)
 800315c:	400a      	ands	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	4ba8      	ldr	r3, [pc, #672]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4ba7      	ldr	r3, [pc, #668]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003166:	49a9      	ldr	r1, [pc, #676]	; (800340c <HAL_RCC_OscConfig+0x340>)
 8003168:	400a      	ands	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e01e      	b.n	80031ac <HAL_RCC_OscConfig+0xe0>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d10e      	bne.n	8003194 <HAL_RCC_OscConfig+0xc8>
 8003176:	4ba3      	ldr	r3, [pc, #652]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4ba2      	ldr	r3, [pc, #648]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	02c9      	lsls	r1, r1, #11
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	4b9f      	ldr	r3, [pc, #636]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b9e      	ldr	r3, [pc, #632]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	0249      	lsls	r1, r1, #9
 800318e:	430a      	orrs	r2, r1
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xe0>
 8003194:	4b9b      	ldr	r3, [pc, #620]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b9a      	ldr	r3, [pc, #616]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800319a:	499b      	ldr	r1, [pc, #620]	; (8003408 <HAL_RCC_OscConfig+0x33c>)
 800319c:	400a      	ands	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	4b98      	ldr	r3, [pc, #608]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4b97      	ldr	r3, [pc, #604]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80031a6:	4999      	ldr	r1, [pc, #612]	; (800340c <HAL_RCC_OscConfig+0x340>)
 80031a8:	400a      	ands	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d014      	beq.n	80031de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fc9c 	bl	8001af0 <HAL_GetTick>
 80031b8:	0003      	movs	r3, r0
 80031ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031be:	f7fe fc97 	bl	8001af0 <HAL_GetTick>
 80031c2:	0002      	movs	r2, r0
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b64      	cmp	r3, #100	; 0x64
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e2fd      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d0:	4b8c      	ldr	r3, [pc, #560]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	029b      	lsls	r3, r3, #10
 80031d8:	4013      	ands	r3, r2
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0xf2>
 80031dc:	e015      	b.n	800320a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe fc87 	bl	8001af0 <HAL_GetTick>
 80031e2:	0003      	movs	r3, r0
 80031e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fc82 	bl	8001af0 <HAL_GetTick>
 80031ec:	0002      	movs	r2, r0
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e2e8      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	4b82      	ldr	r3, [pc, #520]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	029b      	lsls	r3, r3, #10
 8003202:	4013      	ands	r3, r2
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x11c>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2202      	movs	r2, #2
 8003210:	4013      	ands	r3, r2
 8003212:	d100      	bne.n	8003216 <HAL_RCC_OscConfig+0x14a>
 8003214:	e06c      	b.n	80032f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003216:	4b7b      	ldr	r3, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	220c      	movs	r2, #12
 800321c:	4013      	ands	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003220:	4b78      	ldr	r3, [pc, #480]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	220c      	movs	r2, #12
 8003226:	4013      	ands	r3, r2
 8003228:	2b08      	cmp	r3, #8
 800322a:	d11f      	bne.n	800326c <HAL_RCC_OscConfig+0x1a0>
 800322c:	4b75      	ldr	r3, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	23c0      	movs	r3, #192	; 0xc0
 8003232:	025b      	lsls	r3, r3, #9
 8003234:	401a      	ands	r2, r3
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	429a      	cmp	r2, r3
 800323c:	d116      	bne.n	800326c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	4b71      	ldr	r3, [pc, #452]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2202      	movs	r2, #2
 8003244:	4013      	ands	r3, r2
 8003246:	d005      	beq.n	8003254 <HAL_RCC_OscConfig+0x188>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d001      	beq.n	8003254 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e2bb      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003254:	4b6b      	ldr	r3, [pc, #428]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	22f8      	movs	r2, #248	; 0xf8
 800325a:	4393      	bics	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00da      	lsls	r2, r3, #3
 8003264:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	e041      	b.n	80032f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d024      	beq.n	80032be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003274:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b62      	ldr	r3, [pc, #392]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800327a:	2101      	movs	r1, #1
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fc36 	bl	8001af0 <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328a:	f7fe fc31 	bl	8001af0 <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e297      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	4b59      	ldr	r3, [pc, #356]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d0f1      	beq.n	800328a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	22f8      	movs	r2, #248	; 0xf8
 80032ac:	4393      	bics	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	00da      	lsls	r2, r3, #3
 80032b6:	4b53      	ldr	r3, [pc, #332]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e018      	b.n	80032f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b51      	ldr	r3, [pc, #324]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b50      	ldr	r3, [pc, #320]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	438a      	bics	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ca:	f7fe fc11 	bl	8001af0 <HAL_GetTick>
 80032ce:	0003      	movs	r3, r0
 80032d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fe fc0c 	bl	8001af0 <HAL_GetTick>
 80032d8:	0002      	movs	r2, r0
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e272      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2202      	movs	r2, #2
 80032ec:	4013      	ands	r3, r2
 80032ee:	d1f1      	bne.n	80032d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2208      	movs	r2, #8
 80032f6:	4013      	ands	r3, r2
 80032f8:	d036      	beq.n	8003368 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d019      	beq.n	8003336 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003306:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003308:	2101      	movs	r1, #1
 800330a:	430a      	orrs	r2, r1
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330e:	f7fe fbef 	bl	8001af0 <HAL_GetTick>
 8003312:	0003      	movs	r3, r0
 8003314:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe fbea 	bl	8001af0 <HAL_GetTick>
 800331c:	0002      	movs	r2, r0
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e250      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2202      	movs	r2, #2
 8003330:	4013      	ands	r3, r2
 8003332:	d0f1      	beq.n	8003318 <HAL_RCC_OscConfig+0x24c>
 8003334:	e018      	b.n	8003368 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003336:	4b33      	ldr	r3, [pc, #204]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800333a:	4b32      	ldr	r3, [pc, #200]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800333c:	2101      	movs	r1, #1
 800333e:	438a      	bics	r2, r1
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7fe fbd5 	bl	8001af0 <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334c:	f7fe fbd0 	bl	8001af0 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e236      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2202      	movs	r2, #2
 8003364:	4013      	ands	r3, r2
 8003366:	d1f1      	bne.n	800334c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2204      	movs	r2, #4
 800336e:	4013      	ands	r3, r2
 8003370:	d100      	bne.n	8003374 <HAL_RCC_OscConfig+0x2a8>
 8003372:	e0b5      	b.n	80034e0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003374:	201f      	movs	r0, #31
 8003376:	183b      	adds	r3, r7, r0
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	055b      	lsls	r3, r3, #21
 8003384:	4013      	ands	r3, r2
 8003386:	d110      	bne.n	80033aa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	0549      	lsls	r1, r1, #21
 8003392:	430a      	orrs	r2, r1
 8003394:	61da      	str	r2, [r3, #28]
 8003396:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	055b      	lsls	r3, r3, #21
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033a4:	183b      	adds	r3, r7, r0
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_OscConfig+0x344>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4013      	ands	r3, r2
 80033b4:	d11a      	bne.n	80033ec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <HAL_RCC_OscConfig+0x344>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_RCC_OscConfig+0x344>)
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	0049      	lsls	r1, r1, #1
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c4:	f7fe fb94 	bl	8001af0 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ce:	f7fe fb8f 	bl	8001af0 <HAL_GetTick>
 80033d2:	0002      	movs	r2, r0
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b64      	cmp	r3, #100	; 0x64
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1f5      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_OscConfig+0x344>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4013      	ands	r3, r2
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d10f      	bne.n	8003414 <HAL_RCC_OscConfig+0x348>
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <HAL_RCC_OscConfig+0x338>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	430a      	orrs	r2, r1
 80033fe:	621a      	str	r2, [r3, #32]
 8003400:	e036      	b.n	8003470 <HAL_RCC_OscConfig+0x3a4>
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	40021000 	.word	0x40021000
 8003408:	fffeffff 	.word	0xfffeffff
 800340c:	fffbffff 	.word	0xfffbffff
 8003410:	40007000 	.word	0x40007000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10c      	bne.n	8003436 <HAL_RCC_OscConfig+0x36a>
 800341c:	4bca      	ldr	r3, [pc, #808]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	4bc9      	ldr	r3, [pc, #804]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003422:	2101      	movs	r1, #1
 8003424:	438a      	bics	r2, r1
 8003426:	621a      	str	r2, [r3, #32]
 8003428:	4bc7      	ldr	r3, [pc, #796]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	4bc6      	ldr	r3, [pc, #792]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800342e:	2104      	movs	r1, #4
 8003430:	438a      	bics	r2, r1
 8003432:	621a      	str	r2, [r3, #32]
 8003434:	e01c      	b.n	8003470 <HAL_RCC_OscConfig+0x3a4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b05      	cmp	r3, #5
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x38c>
 800343e:	4bc2      	ldr	r3, [pc, #776]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003440:	6a1a      	ldr	r2, [r3, #32]
 8003442:	4bc1      	ldr	r3, [pc, #772]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003444:	2104      	movs	r1, #4
 8003446:	430a      	orrs	r2, r1
 8003448:	621a      	str	r2, [r3, #32]
 800344a:	4bbf      	ldr	r3, [pc, #764]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800344c:	6a1a      	ldr	r2, [r3, #32]
 800344e:	4bbe      	ldr	r3, [pc, #760]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003450:	2101      	movs	r1, #1
 8003452:	430a      	orrs	r2, r1
 8003454:	621a      	str	r2, [r3, #32]
 8003456:	e00b      	b.n	8003470 <HAL_RCC_OscConfig+0x3a4>
 8003458:	4bbb      	ldr	r3, [pc, #748]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	4bba      	ldr	r3, [pc, #744]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800345e:	2101      	movs	r1, #1
 8003460:	438a      	bics	r2, r1
 8003462:	621a      	str	r2, [r3, #32]
 8003464:	4bb8      	ldr	r3, [pc, #736]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	4bb7      	ldr	r3, [pc, #732]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800346a:	2104      	movs	r1, #4
 800346c:	438a      	bics	r2, r1
 800346e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d014      	beq.n	80034a2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fe fb3a 	bl	8001af0 <HAL_GetTick>
 800347c:	0003      	movs	r3, r0
 800347e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003480:	e009      	b.n	8003496 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fb35 	bl	8001af0 <HAL_GetTick>
 8003486:	0002      	movs	r2, r0
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	4aaf      	ldr	r2, [pc, #700]	; (800374c <HAL_RCC_OscConfig+0x680>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e19a      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003496:	4bac      	ldr	r3, [pc, #688]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	2202      	movs	r2, #2
 800349c:	4013      	ands	r3, r2
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x3b6>
 80034a0:	e013      	b.n	80034ca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fe fb25 	bl	8001af0 <HAL_GetTick>
 80034a6:	0003      	movs	r3, r0
 80034a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034aa:	e009      	b.n	80034c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fe fb20 	bl	8001af0 <HAL_GetTick>
 80034b0:	0002      	movs	r2, r0
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	4aa5      	ldr	r2, [pc, #660]	; (800374c <HAL_RCC_OscConfig+0x680>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e185      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c0:	4ba1      	ldr	r3, [pc, #644]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	2202      	movs	r2, #2
 80034c6:	4013      	ands	r3, r2
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ca:	231f      	movs	r3, #31
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	4b9c      	ldr	r3, [pc, #624]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	4b9b      	ldr	r3, [pc, #620]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80034da:	499d      	ldr	r1, [pc, #628]	; (8003750 <HAL_RCC_OscConfig+0x684>)
 80034dc:	400a      	ands	r2, r1
 80034de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2210      	movs	r2, #16
 80034e6:	4013      	ands	r3, r2
 80034e8:	d063      	beq.n	80035b2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d12a      	bne.n	8003548 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80034f2:	4b95      	ldr	r3, [pc, #596]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80034f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f6:	4b94      	ldr	r3, [pc, #592]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80034f8:	2104      	movs	r1, #4
 80034fa:	430a      	orrs	r2, r1
 80034fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80034fe:	4b92      	ldr	r3, [pc, #584]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003502:	4b91      	ldr	r3, [pc, #580]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003504:	2101      	movs	r1, #1
 8003506:	430a      	orrs	r2, r1
 8003508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7fe faf1 	bl	8001af0 <HAL_GetTick>
 800350e:	0003      	movs	r3, r0
 8003510:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003514:	f7fe faec 	bl	8001af0 <HAL_GetTick>
 8003518:	0002      	movs	r2, r0
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e152      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352a:	2202      	movs	r2, #2
 800352c:	4013      	ands	r3, r2
 800352e:	d0f1      	beq.n	8003514 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003530:	4b85      	ldr	r3, [pc, #532]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	22f8      	movs	r2, #248	; 0xf8
 8003536:	4393      	bics	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	00da      	lsls	r2, r3, #3
 8003540:	4b81      	ldr	r3, [pc, #516]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003542:	430a      	orrs	r2, r1
 8003544:	635a      	str	r2, [r3, #52]	; 0x34
 8003546:	e034      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	3305      	adds	r3, #5
 800354e:	d111      	bne.n	8003574 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003550:	4b7d      	ldr	r3, [pc, #500]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003554:	4b7c      	ldr	r3, [pc, #496]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003556:	2104      	movs	r1, #4
 8003558:	438a      	bics	r2, r1
 800355a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800355c:	4b7a      	ldr	r3, [pc, #488]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003560:	22f8      	movs	r2, #248	; 0xf8
 8003562:	4393      	bics	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	00da      	lsls	r2, r3, #3
 800356c:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800356e:	430a      	orrs	r2, r1
 8003570:	635a      	str	r2, [r3, #52]	; 0x34
 8003572:	e01e      	b.n	80035b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003574:	4b74      	ldr	r3, [pc, #464]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003578:	4b73      	ldr	r3, [pc, #460]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800357a:	2104      	movs	r1, #4
 800357c:	430a      	orrs	r2, r1
 800357e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003580:	4b71      	ldr	r3, [pc, #452]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003584:	4b70      	ldr	r3, [pc, #448]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003586:	2101      	movs	r1, #1
 8003588:	438a      	bics	r2, r1
 800358a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fe fab0 	bl	8001af0 <HAL_GetTick>
 8003590:	0003      	movs	r3, r0
 8003592:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003596:	f7fe faab 	bl	8001af0 <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e111      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035a8:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80035aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ac:	2202      	movs	r2, #2
 80035ae:	4013      	ands	r3, r2
 80035b0:	d1f1      	bne.n	8003596 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2220      	movs	r2, #32
 80035b8:	4013      	ands	r3, r2
 80035ba:	d05c      	beq.n	8003676 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035bc:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	220c      	movs	r2, #12
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d00e      	beq.n	80035e6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035c8:	4b5f      	ldr	r3, [pc, #380]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	220c      	movs	r2, #12
 80035ce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d114      	bne.n	80035fe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035d4:	4b5c      	ldr	r3, [pc, #368]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	23c0      	movs	r3, #192	; 0xc0
 80035da:	025b      	lsls	r3, r3, #9
 80035dc:	401a      	ands	r2, r3
 80035de:	23c0      	movs	r3, #192	; 0xc0
 80035e0:	025b      	lsls	r3, r3, #9
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d10b      	bne.n	80035fe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80035e6:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80035e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	029b      	lsls	r3, r3, #10
 80035ee:	4013      	ands	r3, r2
 80035f0:	d040      	beq.n	8003674 <HAL_RCC_OscConfig+0x5a8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d03c      	beq.n	8003674 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0e6      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01b      	beq.n	800363e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003606:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360a:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	0249      	lsls	r1, r1, #9
 8003610:	430a      	orrs	r2, r1
 8003612:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe fa6c 	bl	8001af0 <HAL_GetTick>
 8003618:	0003      	movs	r3, r0
 800361a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800361e:	f7fe fa67 	bl	8001af0 <HAL_GetTick>
 8003622:	0002      	movs	r2, r0
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0cd      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003630:	4b45      	ldr	r3, [pc, #276]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	029b      	lsls	r3, r3, #10
 8003638:	4013      	ands	r3, r2
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x552>
 800363c:	e01b      	b.n	8003676 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800363e:	4b42      	ldr	r3, [pc, #264]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003644:	4943      	ldr	r1, [pc, #268]	; (8003754 <HAL_RCC_OscConfig+0x688>)
 8003646:	400a      	ands	r2, r1
 8003648:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fe fa51 	bl	8001af0 <HAL_GetTick>
 800364e:	0003      	movs	r3, r0
 8003650:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003654:	f7fe fa4c 	bl	8001af0 <HAL_GetTick>
 8003658:	0002      	movs	r2, r0
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0b2      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003666:	4b38      	ldr	r3, [pc, #224]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	029b      	lsls	r3, r3, #10
 800366e:	4013      	ands	r3, r2
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x588>
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003674:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d100      	bne.n	8003680 <HAL_RCC_OscConfig+0x5b4>
 800367e:	e0a4      	b.n	80037ca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003680:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	220c      	movs	r2, #12
 8003686:	4013      	ands	r3, r2
 8003688:	2b08      	cmp	r3, #8
 800368a:	d100      	bne.n	800368e <HAL_RCC_OscConfig+0x5c2>
 800368c:	e078      	b.n	8003780 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b02      	cmp	r3, #2
 8003694:	d14c      	bne.n	8003730 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 800369c:	492e      	ldr	r1, [pc, #184]	; (8003758 <HAL_RCC_OscConfig+0x68c>)
 800369e:	400a      	ands	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fa25 	bl	8001af0 <HAL_GetTick>
 80036a6:	0003      	movs	r3, r0
 80036a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe fa20 	bl	8001af0 <HAL_GetTick>
 80036b0:	0002      	movs	r2, r0
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e086      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	049b      	lsls	r3, r3, #18
 80036c6:	4013      	ands	r3, r2
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ca:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	220f      	movs	r2, #15
 80036d0:	4393      	bics	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_RCC_OscConfig+0x690>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	431a      	orrs	r2, r3
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	0449      	lsls	r1, r1, #17
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fe f9f3 	bl	8001af0 <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe f9ee 	bl	8001af0 <HAL_GetTick>
 8003714:	0002      	movs	r2, r0
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e054      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	049b      	lsls	r3, r3, #18
 800372a:	4013      	ands	r3, r2
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x644>
 800372e:	e04c      	b.n	80037ca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <HAL_RCC_OscConfig+0x67c>)
 8003736:	4908      	ldr	r1, [pc, #32]	; (8003758 <HAL_RCC_OscConfig+0x68c>)
 8003738:	400a      	ands	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe f9d8 	bl	8001af0 <HAL_GetTick>
 8003740:	0003      	movs	r3, r0
 8003742:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	e015      	b.n	8003772 <HAL_RCC_OscConfig+0x6a6>
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	40021000 	.word	0x40021000
 800374c:	00001388 	.word	0x00001388
 8003750:	efffffff 	.word	0xefffffff
 8003754:	fffeffff 	.word	0xfffeffff
 8003758:	feffffff 	.word	0xfeffffff
 800375c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe f9c6 	bl	8001af0 <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e02c      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003772:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <HAL_RCC_OscConfig+0x708>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	049b      	lsls	r3, r3, #18
 800377a:	4013      	ands	r3, r2
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x694>
 800377e:	e024      	b.n	80037ca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e01f      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_RCC_OscConfig+0x708>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCC_OscConfig+0x708>)
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	23c0      	movs	r3, #192	; 0xc0
 800379c:	025b      	lsls	r3, r3, #9
 800379e:	401a      	ands	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d10e      	bne.n	80037c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	220f      	movs	r2, #15
 80037ac:	401a      	ands	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	23f0      	movs	r3, #240	; 0xf0
 80037ba:	039b      	lsls	r3, r3, #14
 80037bc:	401a      	ands	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d001      	beq.n	80037ca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b008      	add	sp, #32
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000

080037d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0bf      	b.n	800396c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b61      	ldr	r3, [pc, #388]	; (8003974 <HAL_RCC_ClockConfig+0x19c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2201      	movs	r2, #1
 80037f2:	4013      	ands	r3, r2
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d911      	bls.n	800381e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <HAL_RCC_ClockConfig+0x19c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2201      	movs	r2, #1
 8003800:	4393      	bics	r3, r2
 8003802:	0019      	movs	r1, r3
 8003804:	4b5b      	ldr	r3, [pc, #364]	; (8003974 <HAL_RCC_ClockConfig+0x19c>)
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380c:	4b59      	ldr	r3, [pc, #356]	; (8003974 <HAL_RCC_ClockConfig+0x19c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2201      	movs	r2, #1
 8003812:	4013      	ands	r3, r2
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0a6      	b.n	800396c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2202      	movs	r2, #2
 8003824:	4013      	ands	r3, r2
 8003826:	d015      	beq.n	8003854 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2204      	movs	r2, #4
 800382e:	4013      	ands	r3, r2
 8003830:	d006      	beq.n	8003840 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003832:	4b51      	ldr	r3, [pc, #324]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003838:	21e0      	movs	r1, #224	; 0xe0
 800383a:	00c9      	lsls	r1, r1, #3
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	22f0      	movs	r2, #240	; 0xf0
 8003846:	4393      	bics	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	4013      	ands	r3, r2
 800385c:	d04c      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b44      	ldr	r3, [pc, #272]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	029b      	lsls	r3, r3, #10
 800386e:	4013      	ands	r3, r2
 8003870:	d120      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07a      	b.n	800396c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387e:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	049b      	lsls	r3, r3, #18
 8003886:	4013      	ands	r3, r2
 8003888:	d114      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e06e      	b.n	800396c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	029b      	lsls	r3, r3, #10
 800389e:	4013      	ands	r3, r2
 80038a0:	d108      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e062      	b.n	800396c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b34      	ldr	r3, [pc, #208]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2202      	movs	r2, #2
 80038ac:	4013      	ands	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e05b      	b.n	800396c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b4:	4b30      	ldr	r3, [pc, #192]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2203      	movs	r2, #3
 80038ba:	4393      	bics	r3, r2
 80038bc:	0019      	movs	r1, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c8:	f7fe f912 	bl	8001af0 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d0:	e009      	b.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d2:	f7fe f90d 	bl	8001af0 <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	4a27      	ldr	r2, [pc, #156]	; (800397c <HAL_RCC_ClockConfig+0x1a4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e042      	b.n	800396c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	220c      	movs	r2, #12
 80038ec:	401a      	ands	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d1ec      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f8:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <HAL_RCC_ClockConfig+0x19c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4013      	ands	r3, r2
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d211      	bcs.n	800392a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_RCC_ClockConfig+0x19c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2201      	movs	r2, #1
 800390c:	4393      	bics	r3, r2
 800390e:	0019      	movs	r1, r3
 8003910:	4b18      	ldr	r3, [pc, #96]	; (8003974 <HAL_RCC_ClockConfig+0x19c>)
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_RCC_ClockConfig+0x19c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2201      	movs	r2, #1
 800391e:	4013      	ands	r3, r2
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d001      	beq.n	800392a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e020      	b.n	800396c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2204      	movs	r2, #4
 8003930:	4013      	ands	r3, r2
 8003932:	d009      	beq.n	8003948 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003934:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a11      	ldr	r2, [pc, #68]	; (8003980 <HAL_RCC_ClockConfig+0x1a8>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003948:	f000 f820 	bl	800398c <HAL_RCC_GetSysClockFreq>
 800394c:	0001      	movs	r1, r0
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_ClockConfig+0x1a0>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	220f      	movs	r2, #15
 8003956:	4013      	ands	r3, r2
 8003958:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <HAL_RCC_ClockConfig+0x1ac>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	000a      	movs	r2, r1
 800395e:	40da      	lsrs	r2, r3
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x1b0>)
 8003962:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003964:	2003      	movs	r0, #3
 8003966:	f7fe f87d 	bl	8001a64 <HAL_InitTick>
  
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b004      	add	sp, #16
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40022000 	.word	0x40022000
 8003978:	40021000 	.word	0x40021000
 800397c:	00001388 	.word	0x00001388
 8003980:	fffff8ff 	.word	0xfffff8ff
 8003984:	080058fc 	.word	0x080058fc
 8003988:	20000004 	.word	0x20000004

0800398c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80039a6:	4b2e      	ldr	r3, [pc, #184]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	220c      	movs	r2, #12
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d048      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0xbc>
 80039b6:	d84a      	bhi.n	8003a4e <HAL_RCC_GetSysClockFreq+0xc2>
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d002      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x36>
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d004      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x3e>
 80039c0:	e045      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c2:	23fa      	movs	r3, #250	; 0xfa
 80039c4:	03db      	lsls	r3, r3, #15
 80039c6:	613b      	str	r3, [r7, #16]
      break;
 80039c8:	e044      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xc8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	0c9b      	lsrs	r3, r3, #18
 80039ce:	220f      	movs	r2, #15
 80039d0:	4013      	ands	r3, r2
 80039d2:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xd8>)
 80039d4:	5cd3      	ldrb	r3, [r2, r3]
 80039d6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80039d8:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	220f      	movs	r2, #15
 80039de:	4013      	ands	r3, r2
 80039e0:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xdc>)
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	23c0      	movs	r3, #192	; 0xc0
 80039ea:	025b      	lsls	r3, r3, #9
 80039ec:	401a      	ands	r2, r3
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	025b      	lsls	r3, r3, #9
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d10a      	bne.n	8003a0c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	23fa      	movs	r3, #250	; 0xfa
 80039fa:	03d8      	lsls	r0, r3, #15
 80039fc:	f7fc fb84 	bl	8000108 <__udivsi3>
 8003a00:	0003      	movs	r3, r0
 8003a02:	001a      	movs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4353      	muls	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e01a      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0xb6>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	23c0      	movs	r3, #192	; 0xc0
 8003a10:	025b      	lsls	r3, r3, #9
 8003a12:	401a      	ands	r2, r3
 8003a14:	23c0      	movs	r3, #192	; 0xc0
 8003a16:	025b      	lsls	r3, r3, #9
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d109      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0xa4>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	4813      	ldr	r0, [pc, #76]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xe0>)
 8003a20:	f7fc fb72 	bl	8000108 <__udivsi3>
 8003a24:	0003      	movs	r3, r0
 8003a26:	001a      	movs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4353      	muls	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0xb6>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	480f      	ldr	r0, [pc, #60]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xe4>)
 8003a34:	f7fc fb68 	bl	8000108 <__udivsi3>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	001a      	movs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4353      	muls	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	613b      	str	r3, [r7, #16]
      break;
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xc8>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xe0>)
 8003a4a:	613b      	str	r3, [r7, #16]
      break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xc8>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xe4>)
 8003a50:	613b      	str	r3, [r7, #16]
      break;
 8003a52:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a54:	693b      	ldr	r3, [r7, #16]
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b006      	add	sp, #24
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08005914 	.word	0x08005914
 8003a68:	08005924 	.word	0x08005924
 8003a6c:	02dc6c00 	.word	0x02dc6c00
 8003a70:	007a1200 	.word	0x007a1200

08003a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a78:	4b02      	ldr	r3, [pc, #8]	; (8003a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003a8c:	f7ff fff2 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003a90:	0001      	movs	r1, r0
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	2207      	movs	r2, #7
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	40d9      	lsrs	r1, r3
 8003aa2:	000b      	movs	r3, r1
}    
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	0800590c 	.word	0x0800590c

08003ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	025b      	lsls	r3, r3, #9
 8003acc:	4013      	ands	r3, r2
 8003ace:	d100      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003ad0:	e08e      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003ad2:	2017      	movs	r0, #23
 8003ad4:	183b      	adds	r3, r7, r0
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ada:	4b67      	ldr	r3, [pc, #412]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	055b      	lsls	r3, r3, #21
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d110      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ae6:	4b64      	ldr	r3, [pc, #400]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003aec:	2180      	movs	r1, #128	; 0x80
 8003aee:	0549      	lsls	r1, r1, #21
 8003af0:	430a      	orrs	r2, r1
 8003af2:	61da      	str	r2, [r3, #28]
 8003af4:	4b60      	ldr	r3, [pc, #384]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	055b      	lsls	r3, r3, #21
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b02:	183b      	adds	r3, r7, r0
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b5c      	ldr	r3, [pc, #368]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	d11a      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b58      	ldr	r3, [pc, #352]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b1a:	2180      	movs	r1, #128	; 0x80
 8003b1c:	0049      	lsls	r1, r1, #1
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b22:	f7fd ffe5 	bl	8001af0 <HAL_GetTick>
 8003b26:	0003      	movs	r3, r0
 8003b28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	e008      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2c:	f7fd ffe0 	bl	8001af0 <HAL_GetTick>
 8003b30:	0002      	movs	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e097      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3e:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b4a:	4b4b      	ldr	r3, [pc, #300]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b4c:	6a1a      	ldr	r2, [r3, #32]
 8003b4e:	23c0      	movs	r3, #192	; 0xc0
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4013      	ands	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d034      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	23c0      	movs	r3, #192	; 0xc0
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4013      	ands	r3, r2
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d02c      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b6c:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a43      	ldr	r2, [pc, #268]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b76:	4b40      	ldr	r3, [pc, #256]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b7c:	2180      	movs	r1, #128	; 0x80
 8003b7e:	0249      	lsls	r1, r1, #9
 8003b80:	430a      	orrs	r2, r1
 8003b82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b84:	4b3c      	ldr	r3, [pc, #240]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	4b3b      	ldr	r3, [pc, #236]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b8a:	493e      	ldr	r1, [pc, #248]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b90:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fd ffa7 	bl	8001af0 <HAL_GetTick>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	e009      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fd ffa2 	bl	8001af0 <HAL_GetTick>
 8003bac:	0002      	movs	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	4a35      	ldr	r2, [pc, #212]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e058      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc6:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	0019      	movs	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bda:	2317      	movs	r3, #23
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be4:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bea:	4928      	ldr	r1, [pc, #160]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	2203      	movs	r2, #3
 8003c00:	4393      	bics	r3, r2
 8003c02:	0019      	movs	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2220      	movs	r2, #32
 8003c14:	4013      	ands	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c18:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	4393      	bics	r3, r2
 8003c20:	0019      	movs	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	029b      	lsls	r3, r3, #10
 8003c34:	4013      	ands	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	4393      	bics	r3, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4013      	ands	r3, r2
 8003c56:	d009      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	4393      	bics	r3, r2
 8003c60:	0019      	movs	r1, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b006      	add	sp, #24
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	fffffcff 	.word	0xfffffcff
 8003c84:	fffeffff 	.word	0xfffeffff
 8003c88:	00001388 	.word	0x00001388
 8003c8c:	efffffff 	.word	0xefffffff

08003c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e042      	b.n	8003d28 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	223d      	movs	r2, #61	; 0x3d
 8003ca6:	5c9b      	ldrb	r3, [r3, r2]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d107      	bne.n	8003cbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	223c      	movs	r2, #60	; 0x3c
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7fd fcbb 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	223d      	movs	r2, #61	; 0x3d
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	0019      	movs	r1, r3
 8003cd0:	0010      	movs	r0, r2
 8003cd2:	f000 fa83 	bl	80041dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2246      	movs	r2, #70	; 0x46
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	223e      	movs	r2, #62	; 0x3e
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	223f      	movs	r2, #63	; 0x3f
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2240      	movs	r2, #64	; 0x40
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	5499      	strb	r1, [r3, r2]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2241      	movs	r2, #65	; 0x41
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2242      	movs	r2, #66	; 0x42
 8003d02:	2101      	movs	r1, #1
 8003d04:	5499      	strb	r1, [r3, r2]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2243      	movs	r2, #67	; 0x43
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	5499      	strb	r1, [r3, r2]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2244      	movs	r2, #68	; 0x44
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2245      	movs	r2, #69	; 0x45
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	223d      	movs	r2, #61	; 0x3d
 8003d22:	2101      	movs	r1, #1
 8003d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	223d      	movs	r2, #61	; 0x3d
 8003d3c:	5c9b      	ldrb	r3, [r3, r2]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d001      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e036      	b.n	8003db6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	223d      	movs	r2, #61	; 0x3d
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <HAL_TIM_Base_Start_IT+0x90>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00a      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x50>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	05db      	lsls	r3, r3, #23
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d004      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x50>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <HAL_TIM_Base_Start_IT+0x94>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d111      	bne.n	8003da4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2207      	movs	r2, #7
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d010      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	e007      	b.n	8003db4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b004      	add	sp, #16
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40000400 	.word	0x40000400

08003dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d124      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2202      	movs	r2, #2
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d11d      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2203      	movs	r2, #3
 8003df2:	4252      	negs	r2, r2
 8003df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2203      	movs	r2, #3
 8003e04:	4013      	ands	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 f9ce 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003e10:	e007      	b.n	8003e22 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 f9c1 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f000 f9cd 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d125      	bne.n	8003e82 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d11e      	bne.n	8003e82 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2205      	movs	r2, #5
 8003e4a:	4252      	negs	r2, r2
 8003e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	23c0      	movs	r3, #192	; 0xc0
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f000 f9a1 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003e6a:	e007      	b.n	8003e7c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 f994 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	0018      	movs	r0, r3
 8003e78:	f000 f9a0 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d124      	bne.n	8003eda <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2208      	movs	r2, #8
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d11d      	bne.n	8003eda <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2209      	movs	r2, #9
 8003ea4:	4252      	negs	r2, r2
 8003ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 f975 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003ec2:	e007      	b.n	8003ed4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 f968 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 f974 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d125      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d11e      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2211      	movs	r2, #17
 8003efc:	4252      	negs	r2, r2
 8003efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2208      	movs	r2, #8
 8003f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	23c0      	movs	r3, #192	; 0xc0
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4013      	ands	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	0018      	movs	r0, r3
 8003f18:	f000 f948 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e007      	b.n	8003f2e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 f93b 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 f947 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d10f      	bne.n	8003f62 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d108      	bne.n	8003f62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2202      	movs	r2, #2
 8003f56:	4252      	negs	r2, r2
 8003f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7fd fad9 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b80      	cmp	r3, #128	; 0x80
 8003f6e:	d10f      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2280      	movs	r2, #128	; 0x80
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d108      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2281      	movs	r2, #129	; 0x81
 8003f84:	4252      	negs	r2, r2
 8003f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 fa96 	bl	80044bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2240      	movs	r2, #64	; 0x40
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d10f      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2240      	movs	r2, #64	; 0x40
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d108      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2241      	movs	r2, #65	; 0x41
 8003fb2:	4252      	negs	r2, r2
 8003fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f000 f907 	bl	80041cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d10f      	bne.n	8003fec <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d108      	bne.n	8003fec <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2221      	movs	r2, #33	; 0x21
 8003fe0:	4252      	negs	r2, r2
 8003fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 fa60 	bl	80044ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffe:	230f      	movs	r3, #15
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	223c      	movs	r2, #60	; 0x3c
 800400a:	5c9b      	ldrb	r3, [r3, r2]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_TIM_ConfigClockSource+0x20>
 8004010:	2302      	movs	r3, #2
 8004012:	e0bc      	b.n	800418e <HAL_TIM_ConfigClockSource+0x19a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	223c      	movs	r2, #60	; 0x3c
 8004018:	2101      	movs	r1, #1
 800401a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	223d      	movs	r2, #61	; 0x3d
 8004020:	2102      	movs	r1, #2
 8004022:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2277      	movs	r2, #119	; 0x77
 8004030:	4393      	bics	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4a58      	ldr	r2, [pc, #352]	; (8004198 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004038:	4013      	ands	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2280      	movs	r2, #128	; 0x80
 800404a:	0192      	lsls	r2, r2, #6
 800404c:	4293      	cmp	r3, r2
 800404e:	d040      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0xde>
 8004050:	2280      	movs	r2, #128	; 0x80
 8004052:	0192      	lsls	r2, r2, #6
 8004054:	4293      	cmp	r3, r2
 8004056:	d900      	bls.n	800405a <HAL_TIM_ConfigClockSource+0x66>
 8004058:	e088      	b.n	800416c <HAL_TIM_ConfigClockSource+0x178>
 800405a:	2280      	movs	r2, #128	; 0x80
 800405c:	0152      	lsls	r2, r2, #5
 800405e:	4293      	cmp	r3, r2
 8004060:	d100      	bne.n	8004064 <HAL_TIM_ConfigClockSource+0x70>
 8004062:	e088      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x182>
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	0152      	lsls	r2, r2, #5
 8004068:	4293      	cmp	r3, r2
 800406a:	d900      	bls.n	800406e <HAL_TIM_ConfigClockSource+0x7a>
 800406c:	e07e      	b.n	800416c <HAL_TIM_ConfigClockSource+0x178>
 800406e:	2b70      	cmp	r3, #112	; 0x70
 8004070:	d018      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0xb0>
 8004072:	d900      	bls.n	8004076 <HAL_TIM_ConfigClockSource+0x82>
 8004074:	e07a      	b.n	800416c <HAL_TIM_ConfigClockSource+0x178>
 8004076:	2b60      	cmp	r3, #96	; 0x60
 8004078:	d04f      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x126>
 800407a:	d900      	bls.n	800407e <HAL_TIM_ConfigClockSource+0x8a>
 800407c:	e076      	b.n	800416c <HAL_TIM_ConfigClockSource+0x178>
 800407e:	2b50      	cmp	r3, #80	; 0x50
 8004080:	d03b      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x106>
 8004082:	d900      	bls.n	8004086 <HAL_TIM_ConfigClockSource+0x92>
 8004084:	e072      	b.n	800416c <HAL_TIM_ConfigClockSource+0x178>
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d057      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x146>
 800408a:	d900      	bls.n	800408e <HAL_TIM_ConfigClockSource+0x9a>
 800408c:	e06e      	b.n	800416c <HAL_TIM_ConfigClockSource+0x178>
 800408e:	2b30      	cmp	r3, #48	; 0x30
 8004090:	d063      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x166>
 8004092:	d86b      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x178>
 8004094:	2b20      	cmp	r3, #32
 8004096:	d060      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x166>
 8004098:	d868      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x178>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d05d      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x166>
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d05b      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x166>
 80040a2:	e063      	b.n	800416c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040b4:	f000 f982 	bl	80043bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2277      	movs	r2, #119	; 0x77
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	609a      	str	r2, [r3, #8]
      break;
 80040d0:	e052      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040e2:	f000 f96b 	bl	80043bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2180      	movs	r1, #128	; 0x80
 80040f2:	01c9      	lsls	r1, r1, #7
 80040f4:	430a      	orrs	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]
      break;
 80040f8:	e03e      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004106:	001a      	movs	r2, r3
 8004108:	f000 f8de 	bl	80042c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2150      	movs	r1, #80	; 0x50
 8004112:	0018      	movs	r0, r3
 8004114:	f000 f938 	bl	8004388 <TIM_ITRx_SetConfig>
      break;
 8004118:	e02e      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004126:	001a      	movs	r2, r3
 8004128:	f000 f8fc 	bl	8004324 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2160      	movs	r1, #96	; 0x60
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f928 	bl	8004388 <TIM_ITRx_SetConfig>
      break;
 8004138:	e01e      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	001a      	movs	r2, r3
 8004148:	f000 f8be 	bl	80042c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2140      	movs	r1, #64	; 0x40
 8004152:	0018      	movs	r0, r3
 8004154:	f000 f918 	bl	8004388 <TIM_ITRx_SetConfig>
      break;
 8004158:	e00e      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0019      	movs	r1, r3
 8004164:	0010      	movs	r0, r2
 8004166:	f000 f90f 	bl	8004388 <TIM_ITRx_SetConfig>
      break;
 800416a:	e005      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800416c:	230f      	movs	r3, #15
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
      break;
 8004174:	e000      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004176:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	223d      	movs	r2, #61	; 0x3d
 800417c:	2101      	movs	r1, #1
 800417e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	223c      	movs	r2, #60	; 0x3c
 8004184:	2100      	movs	r1, #0
 8004186:	5499      	strb	r1, [r3, r2]

  return status;
 8004188:	230f      	movs	r3, #15
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	781b      	ldrb	r3, [r3, #0]
}
 800418e:	0018      	movs	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	ffff00ff 	.word	0xffff00ff

0800419c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}

080041dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a30      	ldr	r2, [pc, #192]	; (80042b0 <TIM_Base_SetConfig+0xd4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d008      	beq.n	8004206 <TIM_Base_SetConfig+0x2a>
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	05db      	lsls	r3, r3, #23
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x2a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2c      	ldr	r2, [pc, #176]	; (80042b4 <TIM_Base_SetConfig+0xd8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2270      	movs	r2, #112	; 0x70
 800420a:	4393      	bics	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <TIM_Base_SetConfig+0xd4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d014      	beq.n	800424a <TIM_Base_SetConfig+0x6e>
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	05db      	lsls	r3, r3, #23
 8004226:	429a      	cmp	r2, r3
 8004228:	d00f      	beq.n	800424a <TIM_Base_SetConfig+0x6e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <TIM_Base_SetConfig+0xd8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00b      	beq.n	800424a <TIM_Base_SetConfig+0x6e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <TIM_Base_SetConfig+0xdc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d007      	beq.n	800424a <TIM_Base_SetConfig+0x6e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <TIM_Base_SetConfig+0xe0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <TIM_Base_SetConfig+0x6e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d108      	bne.n	800425c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <TIM_Base_SetConfig+0xe8>)
 800424e:	4013      	ands	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2280      	movs	r2, #128	; 0x80
 8004260:	4393      	bics	r3, r2
 8004262:	001a      	movs	r2, r3
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <TIM_Base_SetConfig+0xd4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_Base_SetConfig+0xbe>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a0b      	ldr	r2, [pc, #44]	; (80042bc <TIM_Base_SetConfig+0xe0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_Base_SetConfig+0xbe>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d103      	bne.n	80042a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	615a      	str	r2, [r3, #20]
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b004      	add	sp, #16
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40002000 	.word	0x40002000
 80042bc:	40014400 	.word	0x40014400
 80042c0:	40014800 	.word	0x40014800
 80042c4:	fffffcff 	.word	0xfffffcff

080042c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	2201      	movs	r2, #1
 80042e0:	4393      	bics	r3, r2
 80042e2:	001a      	movs	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	22f0      	movs	r2, #240	; 0xf0
 80042f2:	4393      	bics	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	220a      	movs	r2, #10
 8004304:	4393      	bics	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	621a      	str	r2, [r3, #32]
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b006      	add	sp, #24
 8004322:	bd80      	pop	{r7, pc}

08004324 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	2210      	movs	r2, #16
 8004336:	4393      	bics	r3, r2
 8004338:	001a      	movs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <TIM_TI2_ConfigInputStage+0x60>)
 800434e:	4013      	ands	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	031b      	lsls	r3, r3, #12
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	22a0      	movs	r2, #160	; 0xa0
 8004360:	4393      	bics	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b006      	add	sp, #24
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	ffff0fff 	.word	0xffff0fff

08004388 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2270      	movs	r2, #112	; 0x70
 800439c:	4393      	bics	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	2207      	movs	r2, #7
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	609a      	str	r2, [r3, #8]
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b004      	add	sp, #16
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <TIM_ETR_SetConfig+0x3c>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	021a      	lsls	r2, r3, #8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	431a      	orrs	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	609a      	str	r2, [r3, #8]
}
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b006      	add	sp, #24
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	ffff00ff 	.word	0xffff00ff

080043fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	223c      	movs	r2, #60	; 0x3c
 800440a:	5c9b      	ldrb	r3, [r3, r2]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004410:	2302      	movs	r3, #2
 8004412:	e042      	b.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	223c      	movs	r2, #60	; 0x3c
 8004418:	2101      	movs	r1, #1
 800441a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	223d      	movs	r2, #61	; 0x3d
 8004420:	2102      	movs	r1, #2
 8004422:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2270      	movs	r2, #112	; 0x70
 8004438:	4393      	bics	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00a      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	05db      	lsls	r3, r3, #23
 8004460:	429a      	cmp	r2, r3
 8004462:	d004      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10c      	bne.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2280      	movs	r2, #128	; 0x80
 8004472:	4393      	bics	r3, r2
 8004474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	4313      	orrs	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	223d      	movs	r2, #61	; 0x3d
 800448c:	2101      	movs	r1, #1
 800448e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	223c      	movs	r2, #60	; 0x3c
 8004494:	2100      	movs	r1, #0
 8004496:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	0018      	movs	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	b004      	add	sp, #16
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40000400 	.word	0x40000400

080044ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c4:	46c0      	nop			; (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b002      	add	sp, #8
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e044      	b.n	8004568 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2278      	movs	r2, #120	; 0x78
 80044ea:	2100      	movs	r1, #0
 80044ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f7fd f8c3 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2224      	movs	r2, #36	; 0x24
 80044fa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2101      	movs	r1, #1
 8004508:	438a      	bics	r2, r1
 800450a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0018      	movs	r0, r3
 8004510:	f000 fbd0 	bl	8004cb4 <UART_SetConfig>
 8004514:	0003      	movs	r3, r0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e024      	b.n	8004568 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0018      	movs	r0, r3
 800452a:	f000 fd03 	bl	8004f34 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	490d      	ldr	r1, [pc, #52]	; (8004570 <HAL_UART_Init+0xa4>)
 800453a:	400a      	ands	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	212a      	movs	r1, #42	; 0x2a
 800454a:	438a      	bics	r2, r1
 800454c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2101      	movs	r1, #1
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f000 fd9b 	bl	800509c <UART_CheckIdleState>
 8004566:	0003      	movs	r3, r0
}
 8004568:	0018      	movs	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	b002      	add	sp, #8
 800456e:	bd80      	pop	{r7, pc}
 8004570:	ffffb7ff 	.word	0xffffb7ff

08004574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	1dbb      	adds	r3, r7, #6
 8004582:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004588:	2b20      	cmp	r3, #32
 800458a:	d000      	beq.n	800458e <HAL_UART_Transmit+0x1a>
 800458c:	e08d      	b.n	80046aa <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_UART_Transmit+0x28>
 8004594:	1dbb      	adds	r3, r7, #6
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e085      	b.n	80046ac <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	015b      	lsls	r3, r3, #5
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d109      	bne.n	80045c0 <HAL_UART_Transmit+0x4c>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2201      	movs	r2, #1
 80045b8:	4013      	ands	r3, r2
 80045ba:	d001      	beq.n	80045c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e075      	b.n	80046ac <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2284      	movs	r2, #132	; 0x84
 80045c4:	2100      	movs	r1, #0
 80045c6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2221      	movs	r2, #33	; 0x21
 80045cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ce:	f7fd fa8f 	bl	8001af0 <HAL_GetTick>
 80045d2:	0003      	movs	r3, r0
 80045d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1dba      	adds	r2, r7, #6
 80045da:	2150      	movs	r1, #80	; 0x50
 80045dc:	8812      	ldrh	r2, [r2, #0]
 80045de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1dba      	adds	r2, r7, #6
 80045e4:	2152      	movs	r1, #82	; 0x52
 80045e6:	8812      	ldrh	r2, [r2, #0]
 80045e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	015b      	lsls	r3, r3, #5
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d108      	bne.n	8004608 <HAL_UART_Transmit+0x94>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	e003      	b.n	8004610 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004610:	e030      	b.n	8004674 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	0013      	movs	r3, r2
 800461c:	2200      	movs	r2, #0
 800461e:	2180      	movs	r1, #128	; 0x80
 8004620:	f000 fde4 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 8004624:	1e03      	subs	r3, r0, #0
 8004626:	d004      	beq.n	8004632 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e03c      	b.n	80046ac <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10b      	bne.n	8004650 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	05d2      	lsls	r2, r2, #23
 8004642:	0dd2      	lsrs	r2, r2, #23
 8004644:	b292      	uxth	r2, r2
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	3302      	adds	r3, #2
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e008      	b.n	8004662 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b292      	uxth	r2, r2
 800465a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	3301      	adds	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2252      	movs	r2, #82	; 0x52
 8004666:	5a9b      	ldrh	r3, [r3, r2]
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b299      	uxth	r1, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2252      	movs	r2, #82	; 0x52
 8004672:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2252      	movs	r2, #82	; 0x52
 8004678:	5a9b      	ldrh	r3, [r3, r2]
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1c8      	bne.n	8004612 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	0013      	movs	r3, r2
 800468a:	2200      	movs	r2, #0
 800468c:	2140      	movs	r1, #64	; 0x40
 800468e:	f000 fdad 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 8004692:	1e03      	subs	r3, r0, #0
 8004694:	d004      	beq.n	80046a0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e005      	b.n	80046ac <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e000      	b.n	80046ac <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80046aa:	2302      	movs	r3, #2
  }
}
 80046ac:	0018      	movs	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b008      	add	sp, #32
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b0ab      	sub	sp, #172	; 0xac
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	22a4      	movs	r2, #164	; 0xa4
 80046c4:	18b9      	adds	r1, r7, r2
 80046c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	20a0      	movs	r0, #160	; 0xa0
 80046d0:	1839      	adds	r1, r7, r0
 80046d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	219c      	movs	r1, #156	; 0x9c
 80046dc:	1879      	adds	r1, r7, r1
 80046de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046e0:	0011      	movs	r1, r2
 80046e2:	18bb      	adds	r3, r7, r2
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a99      	ldr	r2, [pc, #612]	; (800494c <HAL_UART_IRQHandler+0x298>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	2298      	movs	r2, #152	; 0x98
 80046ec:	18bc      	adds	r4, r7, r2
 80046ee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80046f0:	18bb      	adds	r3, r7, r2
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d114      	bne.n	8004722 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2220      	movs	r2, #32
 80046fe:	4013      	ands	r3, r2
 8004700:	d00f      	beq.n	8004722 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004702:	183b      	adds	r3, r7, r0
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2220      	movs	r2, #32
 8004708:	4013      	ands	r3, r2
 800470a:	d00a      	beq.n	8004722 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004710:	2b00      	cmp	r3, #0
 8004712:	d100      	bne.n	8004716 <HAL_UART_IRQHandler+0x62>
 8004714:	e29e      	b.n	8004c54 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	0010      	movs	r0, r2
 800471e:	4798      	blx	r3
      }
      return;
 8004720:	e298      	b.n	8004c54 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004722:	2398      	movs	r3, #152	; 0x98
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d100      	bne.n	800472e <HAL_UART_IRQHandler+0x7a>
 800472c:	e114      	b.n	8004958 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800472e:	239c      	movs	r3, #156	; 0x9c
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2201      	movs	r2, #1
 8004736:	4013      	ands	r3, r2
 8004738:	d106      	bne.n	8004748 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800473a:	23a0      	movs	r3, #160	; 0xa0
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a83      	ldr	r2, [pc, #524]	; (8004950 <HAL_UART_IRQHandler+0x29c>)
 8004742:	4013      	ands	r3, r2
 8004744:	d100      	bne.n	8004748 <HAL_UART_IRQHandler+0x94>
 8004746:	e107      	b.n	8004958 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004748:	23a4      	movs	r3, #164	; 0xa4
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2201      	movs	r2, #1
 8004750:	4013      	ands	r3, r2
 8004752:	d012      	beq.n	800477a <HAL_UART_IRQHandler+0xc6>
 8004754:	23a0      	movs	r3, #160	; 0xa0
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4013      	ands	r3, r2
 8004760:	d00b      	beq.n	800477a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2284      	movs	r2, #132	; 0x84
 800476e:	589b      	ldr	r3, [r3, r2]
 8004770:	2201      	movs	r2, #1
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2184      	movs	r1, #132	; 0x84
 8004778:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800477a:	23a4      	movs	r3, #164	; 0xa4
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2202      	movs	r2, #2
 8004782:	4013      	ands	r3, r2
 8004784:	d011      	beq.n	80047aa <HAL_UART_IRQHandler+0xf6>
 8004786:	239c      	movs	r3, #156	; 0x9c
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	4013      	ands	r3, r2
 8004790:	d00b      	beq.n	80047aa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2202      	movs	r2, #2
 8004798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2284      	movs	r2, #132	; 0x84
 800479e:	589b      	ldr	r3, [r3, r2]
 80047a0:	2204      	movs	r2, #4
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2184      	movs	r1, #132	; 0x84
 80047a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047aa:	23a4      	movs	r3, #164	; 0xa4
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2204      	movs	r2, #4
 80047b2:	4013      	ands	r3, r2
 80047b4:	d011      	beq.n	80047da <HAL_UART_IRQHandler+0x126>
 80047b6:	239c      	movs	r3, #156	; 0x9c
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	4013      	ands	r3, r2
 80047c0:	d00b      	beq.n	80047da <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2204      	movs	r2, #4
 80047c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2284      	movs	r2, #132	; 0x84
 80047ce:	589b      	ldr	r3, [r3, r2]
 80047d0:	2202      	movs	r2, #2
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2184      	movs	r1, #132	; 0x84
 80047d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047da:	23a4      	movs	r3, #164	; 0xa4
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2208      	movs	r2, #8
 80047e2:	4013      	ands	r3, r2
 80047e4:	d017      	beq.n	8004816 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047e6:	23a0      	movs	r3, #160	; 0xa0
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2220      	movs	r2, #32
 80047ee:	4013      	ands	r3, r2
 80047f0:	d105      	bne.n	80047fe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047f2:	239c      	movs	r3, #156	; 0x9c
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2201      	movs	r2, #1
 80047fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047fc:	d00b      	beq.n	8004816 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2208      	movs	r2, #8
 8004804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2284      	movs	r2, #132	; 0x84
 800480a:	589b      	ldr	r3, [r3, r2]
 800480c:	2208      	movs	r2, #8
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2184      	movs	r1, #132	; 0x84
 8004814:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004816:	23a4      	movs	r3, #164	; 0xa4
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	4013      	ands	r3, r2
 8004822:	d013      	beq.n	800484c <HAL_UART_IRQHandler+0x198>
 8004824:	23a0      	movs	r3, #160	; 0xa0
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	04db      	lsls	r3, r3, #19
 800482e:	4013      	ands	r3, r2
 8004830:	d00c      	beq.n	800484c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	0112      	lsls	r2, r2, #4
 800483a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2284      	movs	r2, #132	; 0x84
 8004840:	589b      	ldr	r3, [r3, r2]
 8004842:	2220      	movs	r2, #32
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2184      	movs	r1, #132	; 0x84
 800484a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2284      	movs	r2, #132	; 0x84
 8004850:	589b      	ldr	r3, [r3, r2]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d100      	bne.n	8004858 <HAL_UART_IRQHandler+0x1a4>
 8004856:	e1ff      	b.n	8004c58 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004858:	23a4      	movs	r3, #164	; 0xa4
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2220      	movs	r2, #32
 8004860:	4013      	ands	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004864:	23a0      	movs	r3, #160	; 0xa0
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2220      	movs	r2, #32
 800486c:	4013      	ands	r3, r2
 800486e:	d008      	beq.n	8004882 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	0010      	movs	r0, r2
 8004880:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2284      	movs	r2, #132	; 0x84
 8004886:	589b      	ldr	r3, [r3, r2]
 8004888:	2194      	movs	r1, #148	; 0x94
 800488a:	187a      	adds	r2, r7, r1
 800488c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2240      	movs	r2, #64	; 0x40
 8004896:	4013      	ands	r3, r2
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d004      	beq.n	80048a6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800489c:	187b      	adds	r3, r7, r1
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2228      	movs	r2, #40	; 0x28
 80048a2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048a4:	d047      	beq.n	8004936 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 fdcd 	bl	8005448 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2240      	movs	r2, #64	; 0x40
 80048b6:	4013      	ands	r3, r2
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	d137      	bne.n	800492c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048bc:	f3ef 8310 	mrs	r3, PRIMASK
 80048c0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80048c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c4:	2090      	movs	r0, #144	; 0x90
 80048c6:	183a      	adds	r2, r7, r0
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	2301      	movs	r3, #1
 80048cc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d0:	f383 8810 	msr	PRIMASK, r3
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2140      	movs	r1, #64	; 0x40
 80048e2:	438a      	bics	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]
 80048e6:	183b      	adds	r3, r7, r0
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ee:	f383 8810 	msr	PRIMASK, r3
}
 80048f2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d012      	beq.n	8004922 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <HAL_UART_IRQHandler+0x2a0>)
 8004902:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004908:	0018      	movs	r0, r3
 800490a:	f7fe f929 	bl	8002b60 <HAL_DMA_Abort_IT>
 800490e:	1e03      	subs	r3, r0, #0
 8004910:	d01a      	beq.n	8004948 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491c:	0018      	movs	r0, r3
 800491e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	e012      	b.n	8004948 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f9bd 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492a:	e00d      	b.n	8004948 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f000 f9b8 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004934:	e008      	b.n	8004948 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f000 f9b3 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2284      	movs	r2, #132	; 0x84
 8004942:	2100      	movs	r1, #0
 8004944:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004946:	e187      	b.n	8004c58 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004948:	46c0      	nop			; (mov r8, r8)
    return;
 800494a:	e185      	b.n	8004c58 <HAL_UART_IRQHandler+0x5a4>
 800494c:	0000080f 	.word	0x0000080f
 8004950:	04000120 	.word	0x04000120
 8004954:	08005703 	.word	0x08005703

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495c:	2b01      	cmp	r3, #1
 800495e:	d000      	beq.n	8004962 <HAL_UART_IRQHandler+0x2ae>
 8004960:	e139      	b.n	8004bd6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004962:	23a4      	movs	r3, #164	; 0xa4
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2210      	movs	r2, #16
 800496a:	4013      	ands	r3, r2
 800496c:	d100      	bne.n	8004970 <HAL_UART_IRQHandler+0x2bc>
 800496e:	e132      	b.n	8004bd6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004970:	23a0      	movs	r3, #160	; 0xa0
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2210      	movs	r2, #16
 8004978:	4013      	ands	r3, r2
 800497a:	d100      	bne.n	800497e <HAL_UART_IRQHandler+0x2ca>
 800497c:	e12b      	b.n	8004bd6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2210      	movs	r2, #16
 8004984:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2240      	movs	r2, #64	; 0x40
 800498e:	4013      	ands	r3, r2
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d000      	beq.n	8004996 <HAL_UART_IRQHandler+0x2e2>
 8004994:	e09f      	b.n	8004ad6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	217e      	movs	r1, #126	; 0x7e
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049a4:	187b      	adds	r3, r7, r1
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d100      	bne.n	80049ae <HAL_UART_IRQHandler+0x2fa>
 80049ac:	e156      	b.n	8004c5c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2258      	movs	r2, #88	; 0x58
 80049b2:	5a9b      	ldrh	r3, [r3, r2]
 80049b4:	187a      	adds	r2, r7, r1
 80049b6:	8812      	ldrh	r2, [r2, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d300      	bcc.n	80049be <HAL_UART_IRQHandler+0x30a>
 80049bc:	e14e      	b.n	8004c5c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	187a      	adds	r2, r7, r1
 80049c2:	215a      	movs	r1, #90	; 0x5a
 80049c4:	8812      	ldrh	r2, [r2, #0]
 80049c6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d06f      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d2:	f3ef 8310 	mrs	r3, PRIMASK
 80049d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049da:	67bb      	str	r3, [r7, #120]	; 0x78
 80049dc:	2301      	movs	r3, #1
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	f383 8810 	msr	PRIMASK, r3
}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	499e      	ldr	r1, [pc, #632]	; (8004c6c <HAL_UART_IRQHandler+0x5b8>)
 80049f4:	400a      	ands	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	f383 8810 	msr	PRIMASK, r3
}
 8004a02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a04:	f3ef 8310 	mrs	r3, PRIMASK
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0c:	677b      	str	r3, [r7, #116]	; 0x74
 8004a0e:	2301      	movs	r3, #1
 8004a10:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a14:	f383 8810 	msr	PRIMASK, r3
}
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2101      	movs	r1, #1
 8004a26:	438a      	bics	r2, r1
 8004a28:	609a      	str	r2, [r3, #8]
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a30:	f383 8810 	msr	PRIMASK, r3
}
 8004a34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a36:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a40:	2301      	movs	r3, #1
 8004a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a46:	f383 8810 	msr	PRIMASK, r3
}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2140      	movs	r1, #64	; 0x40
 8004a58:	438a      	bics	r2, r1
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a5e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2280      	movs	r2, #128	; 0x80
 8004a6c:	2120      	movs	r1, #32
 8004a6e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a76:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a80:	2301      	movs	r3, #1
 8004a82:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a86:	f383 8810 	msr	PRIMASK, r3
}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2110      	movs	r1, #16
 8004a98:	438a      	bics	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7fe f81f 	bl	8002af0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2258      	movs	r2, #88	; 0x58
 8004abc:	5a9a      	ldrh	r2, [r3, r2]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	215a      	movs	r1, #90	; 0x5a
 8004ac2:	5a5b      	ldrh	r3, [r3, r1]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0011      	movs	r1, r2
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7fc ff34 	bl	800193c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ad4:	e0c2      	b.n	8004c5c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2258      	movs	r2, #88	; 0x58
 8004ada:	5a99      	ldrh	r1, [r3, r2]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	225a      	movs	r2, #90	; 0x5a
 8004ae0:	5a9b      	ldrh	r3, [r3, r2]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	208e      	movs	r0, #142	; 0x8e
 8004ae6:	183b      	adds	r3, r7, r0
 8004ae8:	1a8a      	subs	r2, r1, r2
 8004aea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	225a      	movs	r2, #90	; 0x5a
 8004af0:	5a9b      	ldrh	r3, [r3, r2]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d100      	bne.n	8004afa <HAL_UART_IRQHandler+0x446>
 8004af8:	e0b2      	b.n	8004c60 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004afa:	183b      	adds	r3, r7, r0
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d100      	bne.n	8004b04 <HAL_UART_IRQHandler+0x450>
 8004b02:	e0ad      	b.n	8004c60 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b04:	f3ef 8310 	mrs	r3, PRIMASK
 8004b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0c:	2488      	movs	r4, #136	; 0x88
 8004b0e:	193a      	adds	r2, r7, r4
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	2301      	movs	r3, #1
 8004b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f383 8810 	msr	PRIMASK, r3
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4951      	ldr	r1, [pc, #324]	; (8004c70 <HAL_UART_IRQHandler+0x5bc>)
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	193b      	adds	r3, r7, r4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f383 8810 	msr	PRIMASK, r3
}
 8004b3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b40:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b42:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	2484      	movs	r4, #132	; 0x84
 8004b46:	193a      	adds	r2, r7, r4
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f383 8810 	msr	PRIMASK, r3
}
 8004b54:	46c0      	nop			; (mov r8, r8)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2101      	movs	r1, #1
 8004b62:	438a      	bics	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	193b      	adds	r3, r7, r4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	f383 8810 	msr	PRIMASK, r3
}
 8004b72:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2280      	movs	r2, #128	; 0x80
 8004b78:	2120      	movs	r1, #32
 8004b7a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b88:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b90:	2480      	movs	r4, #128	; 0x80
 8004b92:	193a      	adds	r2, r7, r4
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	2301      	movs	r3, #1
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2110      	movs	r1, #16
 8004bae:	438a      	bics	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	193b      	adds	r3, r7, r4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bba:	f383 8810 	msr	PRIMASK, r3
}
 8004bbe:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bc6:	183b      	adds	r3, r7, r0
 8004bc8:	881a      	ldrh	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0011      	movs	r1, r2
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f7fc feb4 	bl	800193c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bd4:	e044      	b.n	8004c60 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bd6:	23a4      	movs	r3, #164	; 0xa4
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	035b      	lsls	r3, r3, #13
 8004be0:	4013      	ands	r3, r2
 8004be2:	d010      	beq.n	8004c06 <HAL_UART_IRQHandler+0x552>
 8004be4:	239c      	movs	r3, #156	; 0x9c
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	03db      	lsls	r3, r3, #15
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	0352      	lsls	r2, r2, #13
 8004bfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 fdc1 	bl	8005786 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c04:	e02f      	b.n	8004c66 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c06:	23a4      	movs	r3, #164	; 0xa4
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2280      	movs	r2, #128	; 0x80
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c12:	23a0      	movs	r3, #160	; 0xa0
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01e      	beq.n	8004c64 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	0010      	movs	r0, r2
 8004c2e:	4798      	blx	r3
    }
    return;
 8004c30:	e018      	b.n	8004c64 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c32:	23a4      	movs	r3, #164	; 0xa4
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2240      	movs	r2, #64	; 0x40
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <HAL_UART_IRQHandler+0x5b2>
 8004c3e:	23a0      	movs	r3, #160	; 0xa0
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2240      	movs	r2, #64	; 0x40
 8004c46:	4013      	ands	r3, r2
 8004c48:	d00d      	beq.n	8004c66 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fd6f 	bl	8005730 <UART_EndTransmit_IT>
    return;
 8004c52:	e008      	b.n	8004c66 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	e006      	b.n	8004c66 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	e004      	b.n	8004c66 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c5c:	46c0      	nop			; (mov r8, r8)
 8004c5e:	e002      	b.n	8004c66 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c60:	46c0      	nop			; (mov r8, r8)
 8004c62:	e000      	b.n	8004c66 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004c64:	46c0      	nop			; (mov r8, r8)
  }

}
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b02b      	add	sp, #172	; 0xac
 8004c6a:	bd90      	pop	{r4, r7, pc}
 8004c6c:	fffffeff 	.word	0xfffffeff
 8004c70:	fffffedf 	.word	0xfffffedf

08004c74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b002      	add	sp, #8
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b002      	add	sp, #8
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b002      	add	sp, #8
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cbc:	231e      	movs	r3, #30
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a8d      	ldr	r2, [pc, #564]	; (8004f18 <UART_SetConfig+0x264>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a88      	ldr	r2, [pc, #544]	; (8004f1c <UART_SetConfig+0x268>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4a7f      	ldr	r2, [pc, #508]	; (8004f20 <UART_SetConfig+0x26c>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	0019      	movs	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a7b      	ldr	r2, [pc, #492]	; (8004f24 <UART_SetConfig+0x270>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d127      	bne.n	8004d8a <UART_SetConfig+0xd6>
 8004d3a:	4b7b      	ldr	r3, [pc, #492]	; (8004f28 <UART_SetConfig+0x274>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	2203      	movs	r2, #3
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d00d      	beq.n	8004d62 <UART_SetConfig+0xae>
 8004d46:	d81b      	bhi.n	8004d80 <UART_SetConfig+0xcc>
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d014      	beq.n	8004d76 <UART_SetConfig+0xc2>
 8004d4c:	d818      	bhi.n	8004d80 <UART_SetConfig+0xcc>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <UART_SetConfig+0xa4>
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d00a      	beq.n	8004d6c <UART_SetConfig+0xb8>
 8004d56:	e013      	b.n	8004d80 <UART_SetConfig+0xcc>
 8004d58:	231f      	movs	r3, #31
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e021      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d62:	231f      	movs	r3, #31
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e01c      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d6c:	231f      	movs	r3, #31
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2204      	movs	r2, #4
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e017      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d76:	231f      	movs	r3, #31
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e012      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d80:	231f      	movs	r3, #31
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2210      	movs	r2, #16
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e00d      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a67      	ldr	r2, [pc, #412]	; (8004f2c <UART_SetConfig+0x278>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d104      	bne.n	8004d9e <UART_SetConfig+0xea>
 8004d94:	231f      	movs	r3, #31
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e003      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d9e:	231f      	movs	r3, #31
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	2210      	movs	r2, #16
 8004da4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d15c      	bne.n	8004e6c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004db2:	231f      	movs	r3, #31
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d015      	beq.n	8004de8 <UART_SetConfig+0x134>
 8004dbc:	dc18      	bgt.n	8004df0 <UART_SetConfig+0x13c>
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d00d      	beq.n	8004dde <UART_SetConfig+0x12a>
 8004dc2:	dc15      	bgt.n	8004df0 <UART_SetConfig+0x13c>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <UART_SetConfig+0x11a>
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d005      	beq.n	8004dd8 <UART_SetConfig+0x124>
 8004dcc:	e010      	b.n	8004df0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dce:	f7fe fe5b 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	61bb      	str	r3, [r7, #24]
        break;
 8004dd6:	e012      	b.n	8004dfe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd8:	4b55      	ldr	r3, [pc, #340]	; (8004f30 <UART_SetConfig+0x27c>)
 8004dda:	61bb      	str	r3, [r7, #24]
        break;
 8004ddc:	e00f      	b.n	8004dfe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dde:	f7fe fdd5 	bl	800398c <HAL_RCC_GetSysClockFreq>
 8004de2:	0003      	movs	r3, r0
 8004de4:	61bb      	str	r3, [r7, #24]
        break;
 8004de6:	e00a      	b.n	8004dfe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	61bb      	str	r3, [r7, #24]
        break;
 8004dee:	e006      	b.n	8004dfe <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004df4:	231e      	movs	r3, #30
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
        break;
 8004dfc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d100      	bne.n	8004e06 <UART_SetConfig+0x152>
 8004e04:	e07a      	b.n	8004efc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	005a      	lsls	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	085b      	lsrs	r3, r3, #1
 8004e10:	18d2      	adds	r2, r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	0019      	movs	r1, r3
 8004e18:	0010      	movs	r0, r2
 8004e1a:	f7fb f975 	bl	8000108 <__udivsi3>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b0f      	cmp	r3, #15
 8004e26:	d91c      	bls.n	8004e62 <UART_SetConfig+0x1ae>
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	2380      	movs	r3, #128	; 0x80
 8004e2c:	025b      	lsls	r3, r3, #9
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d217      	bcs.n	8004e62 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	200e      	movs	r0, #14
 8004e38:	183b      	adds	r3, r7, r0
 8004e3a:	210f      	movs	r1, #15
 8004e3c:	438a      	bics	r2, r1
 8004e3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2207      	movs	r2, #7
 8004e48:	4013      	ands	r3, r2
 8004e4a:	b299      	uxth	r1, r3
 8004e4c:	183b      	adds	r3, r7, r0
 8004e4e:	183a      	adds	r2, r7, r0
 8004e50:	8812      	ldrh	r2, [r2, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	183a      	adds	r2, r7, r0
 8004e5c:	8812      	ldrh	r2, [r2, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
 8004e60:	e04c      	b.n	8004efc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004e62:	231e      	movs	r3, #30
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e047      	b.n	8004efc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e6c:	231f      	movs	r3, #31
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d015      	beq.n	8004ea2 <UART_SetConfig+0x1ee>
 8004e76:	dc18      	bgt.n	8004eaa <UART_SetConfig+0x1f6>
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d00d      	beq.n	8004e98 <UART_SetConfig+0x1e4>
 8004e7c:	dc15      	bgt.n	8004eaa <UART_SetConfig+0x1f6>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <UART_SetConfig+0x1d4>
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d005      	beq.n	8004e92 <UART_SetConfig+0x1de>
 8004e86:	e010      	b.n	8004eaa <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e88:	f7fe fdfe 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	61bb      	str	r3, [r7, #24]
        break;
 8004e90:	e012      	b.n	8004eb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e92:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <UART_SetConfig+0x27c>)
 8004e94:	61bb      	str	r3, [r7, #24]
        break;
 8004e96:	e00f      	b.n	8004eb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e98:	f7fe fd78 	bl	800398c <HAL_RCC_GetSysClockFreq>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ea0:	e00a      	b.n	8004eb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	61bb      	str	r3, [r7, #24]
        break;
 8004ea8:	e006      	b.n	8004eb8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eae:	231e      	movs	r3, #30
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
        break;
 8004eb6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01e      	beq.n	8004efc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	085a      	lsrs	r2, r3, #1
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	18d2      	adds	r2, r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	0019      	movs	r1, r3
 8004ece:	0010      	movs	r0, r2
 8004ed0:	f7fb f91a 	bl	8000108 <__udivsi3>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b0f      	cmp	r3, #15
 8004edc:	d90a      	bls.n	8004ef4 <UART_SetConfig+0x240>
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	025b      	lsls	r3, r3, #9
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d205      	bcs.n	8004ef4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	e003      	b.n	8004efc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef4:	231e      	movs	r3, #30
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	2201      	movs	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f08:	231e      	movs	r3, #30
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	781b      	ldrb	r3, [r3, #0]
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b008      	add	sp, #32
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	efff69f3 	.word	0xefff69f3
 8004f1c:	ffffcfff 	.word	0xffffcfff
 8004f20:	fffff4ff 	.word	0xfffff4ff
 8004f24:	40013800 	.word	0x40013800
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40004400 	.word	0x40004400
 8004f30:	007a1200 	.word	0x007a1200

08004f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2201      	movs	r2, #1
 8004f42:	4013      	ands	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a4a      	ldr	r2, [pc, #296]	; (8005078 <UART_AdvFeatureConfig+0x144>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	0019      	movs	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2202      	movs	r2, #2
 8004f64:	4013      	ands	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4a43      	ldr	r2, [pc, #268]	; (800507c <UART_AdvFeatureConfig+0x148>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	0019      	movs	r1, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2204      	movs	r2, #4
 8004f86:	4013      	ands	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a3b      	ldr	r2, [pc, #236]	; (8005080 <UART_AdvFeatureConfig+0x14c>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4a34      	ldr	r2, [pc, #208]	; (8005084 <UART_AdvFeatureConfig+0x150>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2210      	movs	r2, #16
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a2c      	ldr	r2, [pc, #176]	; (8005088 <UART_AdvFeatureConfig+0x154>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2220      	movs	r2, #32
 8004fec:	4013      	ands	r3, r2
 8004fee:	d00b      	beq.n	8005008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	4a25      	ldr	r2, [pc, #148]	; (800508c <UART_AdvFeatureConfig+0x158>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2240      	movs	r2, #64	; 0x40
 800500e:	4013      	ands	r3, r2
 8005010:	d01d      	beq.n	800504e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <UART_AdvFeatureConfig+0x15c>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	035b      	lsls	r3, r3, #13
 8005032:	429a      	cmp	r2, r3
 8005034:	d10b      	bne.n	800504e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a15      	ldr	r2, [pc, #84]	; (8005094 <UART_AdvFeatureConfig+0x160>)
 800503e:	4013      	ands	r3, r2
 8005040:	0019      	movs	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	2280      	movs	r2, #128	; 0x80
 8005054:	4013      	ands	r3, r2
 8005056:	d00b      	beq.n	8005070 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4a0e      	ldr	r2, [pc, #56]	; (8005098 <UART_AdvFeatureConfig+0x164>)
 8005060:	4013      	ands	r3, r2
 8005062:	0019      	movs	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }
}
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	b002      	add	sp, #8
 8005076:	bd80      	pop	{r7, pc}
 8005078:	fffdffff 	.word	0xfffdffff
 800507c:	fffeffff 	.word	0xfffeffff
 8005080:	fffbffff 	.word	0xfffbffff
 8005084:	ffff7fff 	.word	0xffff7fff
 8005088:	ffffefff 	.word	0xffffefff
 800508c:	ffffdfff 	.word	0xffffdfff
 8005090:	ffefffff 	.word	0xffefffff
 8005094:	ff9fffff 	.word	0xff9fffff
 8005098:	fff7ffff 	.word	0xfff7ffff

0800509c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b092      	sub	sp, #72	; 0x48
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2284      	movs	r2, #132	; 0x84
 80050a8:	2100      	movs	r1, #0
 80050aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ac:	f7fc fd20 	bl	8001af0 <HAL_GetTick>
 80050b0:	0003      	movs	r3, r0
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2208      	movs	r2, #8
 80050bc:	4013      	ands	r3, r2
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d12c      	bne.n	800511c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c4:	2280      	movs	r2, #128	; 0x80
 80050c6:	0391      	lsls	r1, r2, #14
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4a46      	ldr	r2, [pc, #280]	; (80051e4 <UART_CheckIdleState+0x148>)
 80050cc:	9200      	str	r2, [sp, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f000 f88c 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 80050d4:	1e03      	subs	r3, r0, #0
 80050d6:	d021      	beq.n	800511c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d8:	f3ef 8310 	mrs	r3, PRIMASK
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050e2:	2301      	movs	r3, #1
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	438a      	bics	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2278      	movs	r2, #120	; 0x78
 8005114:	2100      	movs	r1, #0
 8005116:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e05f      	b.n	80051dc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2204      	movs	r2, #4
 8005124:	4013      	ands	r3, r2
 8005126:	2b04      	cmp	r3, #4
 8005128:	d146      	bne.n	80051b8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	03d1      	lsls	r1, r2, #15
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <UART_CheckIdleState+0x148>)
 8005134:	9200      	str	r2, [sp, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	f000 f858 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 800513c:	1e03      	subs	r3, r0, #0
 800513e:	d03b      	beq.n	80051b8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005140:	f3ef 8310 	mrs	r3, PRIMASK
 8005144:	60fb      	str	r3, [r7, #12]
  return(result);
 8005146:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005148:	637b      	str	r3, [r7, #52]	; 0x34
 800514a:	2301      	movs	r3, #1
 800514c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4921      	ldr	r1, [pc, #132]	; (80051e8 <UART_CheckIdleState+0x14c>)
 8005162:	400a      	ands	r2, r1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005168:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f383 8810 	msr	PRIMASK, r3
}
 8005170:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005172:	f3ef 8310 	mrs	r3, PRIMASK
 8005176:	61bb      	str	r3, [r7, #24]
  return(result);
 8005178:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	633b      	str	r3, [r7, #48]	; 0x30
 800517c:	2301      	movs	r3, #1
 800517e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f383 8810 	msr	PRIMASK, r3
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2101      	movs	r1, #1
 8005194:	438a      	bics	r2, r1
 8005196:	609a      	str	r2, [r3, #8]
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	f383 8810 	msr	PRIMASK, r3
}
 80051a2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2280      	movs	r2, #128	; 0x80
 80051a8:	2120      	movs	r1, #32
 80051aa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2278      	movs	r2, #120	; 0x78
 80051b0:	2100      	movs	r1, #0
 80051b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e011      	b.n	80051dc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2280      	movs	r2, #128	; 0x80
 80051c2:	2120      	movs	r1, #32
 80051c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2278      	movs	r2, #120	; 0x78
 80051d6:	2100      	movs	r1, #0
 80051d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b010      	add	sp, #64	; 0x40
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	01ffffff 	.word	0x01ffffff
 80051e8:	fffffedf 	.word	0xfffffedf

080051ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	1dfb      	adds	r3, r7, #7
 80051fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fc:	e04b      	b.n	8005296 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	3301      	adds	r3, #1
 8005202:	d048      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005204:	f7fc fc74 	bl	8001af0 <HAL_GetTick>
 8005208:	0002      	movs	r2, r0
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	429a      	cmp	r2, r3
 8005212:	d302      	bcc.n	800521a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e04b      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2204      	movs	r2, #4
 8005226:	4013      	ands	r3, r2
 8005228:	d035      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	2208      	movs	r2, #8
 8005232:	4013      	ands	r3, r2
 8005234:	2b08      	cmp	r3, #8
 8005236:	d111      	bne.n	800525c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2208      	movs	r2, #8
 800523e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	0018      	movs	r0, r3
 8005244:	f000 f900 	bl	8005448 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2284      	movs	r2, #132	; 0x84
 800524c:	2108      	movs	r1, #8
 800524e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2278      	movs	r2, #120	; 0x78
 8005254:	2100      	movs	r1, #0
 8005256:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e02c      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	401a      	ands	r2, r3
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	429a      	cmp	r2, r3
 800526e:	d112      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2280      	movs	r2, #128	; 0x80
 8005276:	0112      	lsls	r2, r2, #4
 8005278:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	0018      	movs	r0, r3
 800527e:	f000 f8e3 	bl	8005448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2284      	movs	r2, #132	; 0x84
 8005286:	2120      	movs	r1, #32
 8005288:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2278      	movs	r2, #120	; 0x78
 800528e:	2100      	movs	r1, #0
 8005290:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e00f      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	425a      	negs	r2, r3
 80052a6:	4153      	adcs	r3, r2
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	001a      	movs	r2, r3
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d0a4      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	0018      	movs	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b004      	add	sp, #16
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b090      	sub	sp, #64	; 0x40
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	1dbb      	adds	r3, r7, #6
 80052cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1dba      	adds	r2, r7, #6
 80052d8:	2158      	movs	r1, #88	; 0x58
 80052da:	8812      	ldrh	r2, [r2, #0]
 80052dc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2284      	movs	r2, #132	; 0x84
 80052e2:	2100      	movs	r1, #0
 80052e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2280      	movs	r2, #128	; 0x80
 80052ea:	2122      	movs	r1, #34	; 0x22
 80052ec:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d028      	beq.n	8005348 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fa:	4a3e      	ldr	r2, [pc, #248]	; (80053f4 <UART_Start_Receive_DMA+0x134>)
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005302:	4a3d      	ldr	r2, [pc, #244]	; (80053f8 <UART_Start_Receive_DMA+0x138>)
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530a:	4a3c      	ldr	r2, [pc, #240]	; (80053fc <UART_Start_Receive_DMA+0x13c>)
 800530c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005312:	2200      	movs	r2, #0
 8005314:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	0019      	movs	r1, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	001a      	movs	r2, r3
 8005328:	1dbb      	adds	r3, r7, #6
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	f7fd fb7a 	bl	8002a24 <HAL_DMA_Start_IT>
 8005330:	1e03      	subs	r3, r0, #0
 8005332:	d009      	beq.n	8005348 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2284      	movs	r2, #132	; 0x84
 8005338:	2110      	movs	r1, #16
 800533a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2280      	movs	r2, #128	; 0x80
 8005340:	2120      	movs	r1, #32
 8005342:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e050      	b.n	80053ea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d019      	beq.n	8005384 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005350:	f3ef 8310 	mrs	r3, PRIMASK
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800535a:	2301      	movs	r3, #1
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	f383 8810 	msr	PRIMASK, r3
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	0049      	lsls	r1, r1, #1
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005384:	f3ef 8310 	mrs	r3, PRIMASK
 8005388:	613b      	str	r3, [r7, #16]
  return(result);
 800538a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538c:	63bb      	str	r3, [r7, #56]	; 0x38
 800538e:	2301      	movs	r3, #1
 8005390:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f383 8810 	msr	PRIMASK, r3
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2101      	movs	r1, #1
 80053a6:	430a      	orrs	r2, r1
 80053a8:	609a      	str	r2, [r3, #8]
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	f383 8810 	msr	PRIMASK, r3
}
 80053b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b6:	f3ef 8310 	mrs	r3, PRIMASK
 80053ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80053bc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
 80053c0:	2301      	movs	r3, #1
 80053c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	f383 8810 	msr	PRIMASK, r3
}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2140      	movs	r1, #64	; 0x40
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	f383 8810 	msr	PRIMASK, r3
}
 80053e6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b010      	add	sp, #64	; 0x40
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	08005511 	.word	0x08005511
 80053f8:	0800563d 	.word	0x0800563d
 80053fc:	0800567f 	.word	0x0800567f

08005400 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005408:	f3ef 8310 	mrs	r3, PRIMASK
 800540c:	60bb      	str	r3, [r7, #8]
  return(result);
 800540e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	2301      	movs	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f383 8810 	msr	PRIMASK, r3
}
 800541c:	46c0      	nop			; (mov r8, r8)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	21c0      	movs	r1, #192	; 0xc0
 800542a:	438a      	bics	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f383 8810 	msr	PRIMASK, r3
}
 8005438:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005440:	46c0      	nop			; (mov r8, r8)
 8005442:	46bd      	mov	sp, r7
 8005444:	b006      	add	sp, #24
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08e      	sub	sp, #56	; 0x38
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005450:	f3ef 8310 	mrs	r3, PRIMASK
 8005454:	617b      	str	r3, [r7, #20]
  return(result);
 8005456:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
 800545a:	2301      	movs	r3, #1
 800545c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f383 8810 	msr	PRIMASK, r3
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4926      	ldr	r1, [pc, #152]	; (800550c <UART_EndRxTransfer+0xc4>)
 8005472:	400a      	ands	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005482:	f3ef 8310 	mrs	r3, PRIMASK
 8005486:	623b      	str	r3, [r7, #32]
  return(result);
 8005488:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
 800548c:	2301      	movs	r3, #1
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2101      	movs	r1, #1
 80054a4:	438a      	bics	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d118      	bne.n	80054ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054bc:	f3ef 8310 	mrs	r3, PRIMASK
 80054c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80054c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c6:	2301      	movs	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f383 8810 	msr	PRIMASK, r3
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2110      	movs	r1, #16
 80054de:	438a      	bics	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f383 8810 	msr	PRIMASK, r3
}
 80054ec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2280      	movs	r2, #128	; 0x80
 80054f2:	2120      	movs	r1, #32
 80054f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	46bd      	mov	sp, r7
 8005506:	b00e      	add	sp, #56	; 0x38
 8005508:	bd80      	pop	{r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	fffffedf 	.word	0xfffffedf

08005510 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b094      	sub	sp, #80	; 0x50
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	2b20      	cmp	r3, #32
 8005524:	d06f      	beq.n	8005606 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	225a      	movs	r2, #90	; 0x5a
 800552a:	2100      	movs	r1, #0
 800552c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800552e:	f3ef 8310 	mrs	r3, PRIMASK
 8005532:	61bb      	str	r3, [r7, #24]
  return(result);
 8005534:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005536:	64bb      	str	r3, [r7, #72]	; 0x48
 8005538:	2301      	movs	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f383 8810 	msr	PRIMASK, r3
}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	493a      	ldr	r1, [pc, #232]	; (8005638 <UART_DMAReceiveCplt+0x128>)
 8005550:	400a      	ands	r2, r1
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	f383 8810 	msr	PRIMASK, r3
}
 800555e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005560:	f3ef 8310 	mrs	r3, PRIMASK
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
 800556a:	2301      	movs	r3, #1
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	f383 8810 	msr	PRIMASK, r3
}
 8005574:	46c0      	nop			; (mov r8, r8)
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2101      	movs	r1, #1
 8005582:	438a      	bics	r2, r1
 8005584:	609a      	str	r2, [r3, #8]
 8005586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	f383 8810 	msr	PRIMASK, r3
}
 8005590:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005592:	f3ef 8310 	mrs	r3, PRIMASK
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800559a:	643b      	str	r3, [r7, #64]	; 0x40
 800559c:	2301      	movs	r3, #1
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	f383 8810 	msr	PRIMASK, r3
}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2140      	movs	r1, #64	; 0x40
 80055b4:	438a      	bics	r2, r1
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	f383 8810 	msr	PRIMASK, r3
}
 80055c2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c6:	2280      	movs	r2, #128	; 0x80
 80055c8:	2120      	movs	r1, #32
 80055ca:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d118      	bne.n	8005606 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d4:	f3ef 8310 	mrs	r3, PRIMASK
 80055d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80055da:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055de:	2301      	movs	r3, #1
 80055e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f383 8810 	msr	PRIMASK, r3
}
 80055e8:	46c0      	nop			; (mov r8, r8)
 80055ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2110      	movs	r1, #16
 80055f6:	438a      	bics	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f383 8810 	msr	PRIMASK, r3
}
 8005604:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005608:	2200      	movs	r2, #0
 800560a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005610:	2b01      	cmp	r3, #1
 8005612:	d108      	bne.n	8005626 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005616:	2258      	movs	r2, #88	; 0x58
 8005618:	5a9a      	ldrh	r2, [r3, r2]
 800561a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561c:	0011      	movs	r1, r2
 800561e:	0018      	movs	r0, r3
 8005620:	f7fc f98c 	bl	800193c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005624:	e003      	b.n	800562e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005628:	0018      	movs	r0, r3
 800562a:	f7ff fb2b 	bl	8004c84 <HAL_UART_RxCpltCallback>
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	46bd      	mov	sp, r7
 8005632:	b014      	add	sp, #80	; 0x50
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	fffffeff 	.word	0xfffffeff

0800563c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10a      	bne.n	800566e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2258      	movs	r2, #88	; 0x58
 800565c:	5a9b      	ldrh	r3, [r3, r2]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	0011      	movs	r1, r2
 8005666:	0018      	movs	r0, r3
 8005668:	f7fc f968 	bl	800193c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800566c:	e003      	b.n	8005676 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	0018      	movs	r0, r3
 8005672:	f7ff fb0f 	bl	8004c94 <HAL_UART_RxHalfCpltCallback>
}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	46bd      	mov	sp, r7
 800567a:	b004      	add	sp, #16
 800567c:	bd80      	pop	{r7, pc}

0800567e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005690:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	589b      	ldr	r3, [r3, r2]
 8005698:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2280      	movs	r2, #128	; 0x80
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	d10a      	bne.n	80056be <UART_DMAError+0x40>
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b21      	cmp	r3, #33	; 0x21
 80056ac:	d107      	bne.n	80056be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2252      	movs	r2, #82	; 0x52
 80056b2:	2100      	movs	r1, #0
 80056b4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f7ff fea1 	bl	8005400 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2240      	movs	r2, #64	; 0x40
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d10a      	bne.n	80056e2 <UART_DMAError+0x64>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b22      	cmp	r3, #34	; 0x22
 80056d0:	d107      	bne.n	80056e2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	225a      	movs	r2, #90	; 0x5a
 80056d6:	2100      	movs	r1, #0
 80056d8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	0018      	movs	r0, r3
 80056de:	f7ff feb3 	bl	8005448 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2284      	movs	r2, #132	; 0x84
 80056e6:	589b      	ldr	r3, [r3, r2]
 80056e8:	2210      	movs	r2, #16
 80056ea:	431a      	orrs	r2, r3
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2184      	movs	r1, #132	; 0x84
 80056f0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7ff fad5 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b006      	add	sp, #24
 8005700:	bd80      	pop	{r7, pc}

08005702 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	225a      	movs	r2, #90	; 0x5a
 8005714:	2100      	movs	r1, #0
 8005716:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2252      	movs	r2, #82	; 0x52
 800571c:	2100      	movs	r1, #0
 800571e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	0018      	movs	r0, r3
 8005724:	f7ff fabe 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005728:	46c0      	nop			; (mov r8, r8)
 800572a:	46bd      	mov	sp, r7
 800572c:	b004      	add	sp, #16
 800572e:	bd80      	pop	{r7, pc}

08005730 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005738:	f3ef 8310 	mrs	r3, PRIMASK
 800573c:	60bb      	str	r3, [r7, #8]
  return(result);
 800573e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	2301      	movs	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f383 8810 	msr	PRIMASK, r3
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2140      	movs	r1, #64	; 0x40
 800575a:	438a      	bics	r2, r1
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f383 8810 	msr	PRIMASK, r3
}
 8005768:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	0018      	movs	r0, r3
 800577a:	f7ff fa7b 	bl	8004c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	b006      	add	sp, #24
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b002      	add	sp, #8
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005796:	b5b0      	push	{r4, r5, r7, lr}
 8005798:	b08a      	sub	sp, #40	; 0x28
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	1dbb      	adds	r3, r7, #6
 80057a2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2280      	movs	r2, #128	; 0x80
 80057a8:	589b      	ldr	r3, [r3, r2]
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d156      	bne.n	800585c <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80057b4:	1dbb      	adds	r3, r7, #6
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e04e      	b.n	800585e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	015b      	lsls	r3, r3, #5
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d109      	bne.n	80057e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2201      	movs	r2, #1
 80057d8:	4013      	ands	r3, r2
 80057da:	d001      	beq.n	80057e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e03e      	b.n	800585e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80057ec:	2527      	movs	r5, #39	; 0x27
 80057ee:	197c      	adds	r4, r7, r5
 80057f0:	1dbb      	adds	r3, r7, #6
 80057f2:	881a      	ldrh	r2, [r3, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7ff fd61 	bl	80052c0 <UART_Start_Receive_DMA>
 80057fe:	0003      	movs	r3, r0
 8005800:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005802:	197b      	adds	r3, r7, r5
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d124      	bne.n	8005854 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580e:	2b01      	cmp	r3, #1
 8005810:	d11c      	bne.n	800584c <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2210      	movs	r2, #16
 8005818:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581a:	f3ef 8310 	mrs	r3, PRIMASK
 800581e:	617b      	str	r3, [r7, #20]
  return(result);
 8005820:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005822:	623b      	str	r3, [r7, #32]
 8005824:	2301      	movs	r3, #1
 8005826:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f383 8810 	msr	PRIMASK, r3
}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2110      	movs	r1, #16
 800583c:	430a      	orrs	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f383 8810 	msr	PRIMASK, r3
}
 800584a:	e003      	b.n	8005854 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800584c:	2327      	movs	r3, #39	; 0x27
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005854:	2327      	movs	r3, #39	; 0x27
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	e000      	b.n	800585e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	0018      	movs	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	b00a      	add	sp, #40	; 0x28
 8005864:	bdb0      	pop	{r4, r5, r7, pc}

08005866 <memset>:
 8005866:	0003      	movs	r3, r0
 8005868:	1882      	adds	r2, r0, r2
 800586a:	4293      	cmp	r3, r2
 800586c:	d100      	bne.n	8005870 <memset+0xa>
 800586e:	4770      	bx	lr
 8005870:	7019      	strb	r1, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	e7f9      	b.n	800586a <memset+0x4>
	...

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	2600      	movs	r6, #0
 800587c:	4c0c      	ldr	r4, [pc, #48]	; (80058b0 <__libc_init_array+0x38>)
 800587e:	4d0d      	ldr	r5, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 8005880:	1b64      	subs	r4, r4, r5
 8005882:	10a4      	asrs	r4, r4, #2
 8005884:	42a6      	cmp	r6, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	2600      	movs	r6, #0
 800588a:	f000 f823 	bl	80058d4 <_init>
 800588e:	4c0a      	ldr	r4, [pc, #40]	; (80058b8 <__libc_init_array+0x40>)
 8005890:	4d0a      	ldr	r5, [pc, #40]	; (80058bc <__libc_init_array+0x44>)
 8005892:	1b64      	subs	r4, r4, r5
 8005894:	10a4      	asrs	r4, r4, #2
 8005896:	42a6      	cmp	r6, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	00b3      	lsls	r3, r6, #2
 800589e:	58eb      	ldr	r3, [r5, r3]
 80058a0:	4798      	blx	r3
 80058a2:	3601      	adds	r6, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	00b3      	lsls	r3, r6, #2
 80058a8:	58eb      	ldr	r3, [r5, r3]
 80058aa:	4798      	blx	r3
 80058ac:	3601      	adds	r6, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	08005934 	.word	0x08005934
 80058b4:	08005934 	.word	0x08005934
 80058b8:	08005938 	.word	0x08005938
 80058bc:	08005934 	.word	0x08005934

080058c0 <memcpy>:
 80058c0:	2300      	movs	r3, #0
 80058c2:	b510      	push	{r4, lr}
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d100      	bne.n	80058ca <memcpy+0xa>
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	5ccc      	ldrb	r4, [r1, r3]
 80058cc:	54c4      	strb	r4, [r0, r3]
 80058ce:	3301      	adds	r3, #1
 80058d0:	e7f8      	b.n	80058c4 <memcpy+0x4>
	...

080058d4 <_init>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr

080058e0 <_fini>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr
