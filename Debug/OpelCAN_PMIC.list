
OpelCAN_PMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000258c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002684  08002684  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002684  08002684  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002684  08002684  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002684  08002684  00012684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800268c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002698  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002698  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000963d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001637  00000000  00000000  00029671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002aca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017834  00000000  00000000  0002bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009471  00000000  00000000  00043314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087dd3  00000000  00000000  0004c785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4558  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000192c  00000000  00000000  000d45a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002634 	.word	0x08002634

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002634 	.word	0x08002634

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa5a 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80f 	bl	800024a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ca 	bl	80003c4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000230:	f000 f862 	bl	80002f8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f896 	bl	8000364 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 8000238:	2380      	movs	r3, #128	; 0x80
 800023a:	0059      	lsls	r1, r3, #1
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2201      	movs	r2, #1
 8000242:	0018      	movs	r0, r3
 8000244:	f001 f80e 	bl	8001264 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	e7fe      	b.n	8000248 <main+0x28>

0800024a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024a:	b590      	push	{r4, r7, lr}
 800024c:	b099      	sub	sp, #100	; 0x64
 800024e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000250:	242c      	movs	r4, #44	; 0x2c
 8000252:	193b      	adds	r3, r7, r4
 8000254:	0018      	movs	r0, r3
 8000256:	2334      	movs	r3, #52	; 0x34
 8000258:	001a      	movs	r2, r3
 800025a:	2100      	movs	r1, #0
 800025c:	f002 f9e2 	bl	8002624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	231c      	movs	r3, #28
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	0018      	movs	r0, r3
 8000266:	2310      	movs	r3, #16
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f002 f9da 	bl	8002624 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	0018      	movs	r0, r3
 8000274:	2318      	movs	r3, #24
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f002 f9d3 	bl	8002624 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027e:	0021      	movs	r1, r4
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2202      	movs	r2, #2
 8000284:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2201      	movs	r2, #1
 800028a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2210      	movs	r2, #16
 8000290:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2200      	movs	r2, #0
 8000296:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	187b      	adds	r3, r7, r1
 800029a:	0018      	movs	r0, r3
 800029c:	f001 f800 	bl	80012a0 <HAL_RCC_OscConfig>
 80002a0:	1e03      	subs	r3, r0, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002a4:	f000 f8e0 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	211c      	movs	r1, #28
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2207      	movs	r2, #7
 80002ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2200      	movs	r2, #0
 80002b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2100      	movs	r1, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 fb70 	bl	80019ac <HAL_RCC_ClockConfig>
 80002cc:	1e03      	subs	r3, r0, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002d0:	f000 f8ca 	bl	8000468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2201      	movs	r2, #1
 80002d8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	0018      	movs	r0, r3
 80002e4:	f001 fcce 	bl	8001c84 <HAL_RCCEx_PeriphCLKConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002ec:	f000 f8bc 	bl	8000468 <Error_Handler>
  }
}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b019      	add	sp, #100	; 0x64
 80002f6:	bd90      	pop	{r4, r7, pc}

080002f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_CAN_Init+0x64>)
 80002fe:	4a18      	ldr	r2, [pc, #96]	; (8000360 <MX_CAN_Init+0x68>)
 8000300:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 7;
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <MX_CAN_Init+0x64>)
 8000304:	2207      	movs	r2, #7
 8000306:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000308:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_CAN_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800030e:	4b13      	ldr	r3, [pc, #76]	; (800035c <MX_CAN_Init+0x64>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_CAN_Init+0x64>)
 8000316:	2290      	movs	r2, #144	; 0x90
 8000318:	0312      	lsls	r2, r2, #12
 800031a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_CAN_Init+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_CAN_Init+0x64>)
 8000324:	2200      	movs	r2, #0
 8000326:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000328:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_CAN_Init+0x64>)
 800032a:	2200      	movs	r2, #0
 800032c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <MX_CAN_Init+0x64>)
 8000330:	2201      	movs	r2, #1
 8000332:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_CAN_Init+0x64>)
 8000336:	2200      	movs	r2, #0
 8000338:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <MX_CAN_Init+0x64>)
 800033c:	2200      	movs	r2, #0
 800033e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_CAN_Init+0x64>)
 8000342:	2200      	movs	r2, #0
 8000344:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <MX_CAN_Init+0x64>)
 8000348:	0018      	movs	r0, r3
 800034a:	f000 fa2b 	bl	80007a4 <HAL_CAN_Init>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000352:	f000 f889 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000028 	.word	0x20000028
 8000360:	40006400 	.word	0x40006400

08000364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800036a:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <MX_USART1_UART_Init+0x5c>)
 800036c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000370:	22e1      	movs	r2, #225	; 0xe1
 8000372:	0252      	lsls	r2, r2, #9
 8000374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_USART1_UART_Init+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_USART1_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <MX_USART1_UART_Init+0x58>)
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 fd59 	bl	8001e60 <HAL_UART_Init>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003b2:	f000 f859 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000050 	.word	0x20000050
 80003c0:	40013800 	.word	0x40013800

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b089      	sub	sp, #36	; 0x24
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	240c      	movs	r4, #12
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	0018      	movs	r0, r3
 80003d0:	2314      	movs	r3, #20
 80003d2:	001a      	movs	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	f002 f925 	bl	8002624 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003da:	4b22      	ldr	r3, [pc, #136]	; (8000464 <MX_GPIO_Init+0xa0>)
 80003dc:	695a      	ldr	r2, [r3, #20]
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <MX_GPIO_Init+0xa0>)
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	03c9      	lsls	r1, r1, #15
 80003e4:	430a      	orrs	r2, r1
 80003e6:	615a      	str	r2, [r3, #20]
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_GPIO_Init+0xa0>)
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	03db      	lsls	r3, r3, #15
 80003f0:	4013      	ands	r3, r2
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_GPIO_Init+0xa0>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_GPIO_Init+0xa0>)
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0289      	lsls	r1, r1, #10
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_GPIO_Init+0xa0>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	029b      	lsls	r3, r3, #10
 800040c:	4013      	ands	r3, r2
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 8000412:	2380      	movs	r3, #128	; 0x80
 8000414:	0059      	lsls	r1, r3, #1
 8000416:	2390      	movs	r3, #144	; 0x90
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	2201      	movs	r2, #1
 800041c:	0018      	movs	r0, r3
 800041e:	f000 ff21 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8000422:	2380      	movs	r3, #128	; 0x80
 8000424:	0219      	lsls	r1, r3, #8
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2200      	movs	r2, #0
 800042c:	0018      	movs	r0, r3
 800042e:	f000 ff19 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_LP_Pin BUCK_EN_Pin */
  GPIO_InitStruct.Pin = CAN_LP_Pin|BUCK_EN_Pin;
 8000432:	193b      	adds	r3, r7, r4
 8000434:	2281      	movs	r2, #129	; 0x81
 8000436:	0212      	lsls	r2, r2, #8
 8000438:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	193b      	adds	r3, r7, r4
 800043c:	2201      	movs	r2, #1
 800043e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	193a      	adds	r2, r7, r4
 800044e:	2390      	movs	r3, #144	; 0x90
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f000 fd9d 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b009      	add	sp, #36	; 0x24
 8000460:	bd90      	pop	{r4, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	40021000 	.word	0x40021000

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x44>)
 800047c:	699a      	ldr	r2, [r3, #24]
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <HAL_MspInit+0x44>)
 8000480:	2101      	movs	r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	619a      	str	r2, [r3, #24]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x44>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <HAL_MspInit+0x44>)
 8000494:	69da      	ldr	r2, [r3, #28]
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <HAL_MspInit+0x44>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0549      	lsls	r1, r1, #21
 800049c:	430a      	orrs	r2, r1
 800049e:	61da      	str	r2, [r3, #28]
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <HAL_MspInit+0x44>)
 80004a2:	69da      	ldr	r2, [r3, #28]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	055b      	lsls	r3, r3, #21
 80004a8:	4013      	ands	r3, r2
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b08b      	sub	sp, #44	; 0x2c
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	2414      	movs	r4, #20
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	0018      	movs	r0, r3
 80004ca:	2314      	movs	r3, #20
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f002 f8a8 	bl	8002624 <memset>
  if(hcan->Instance==CAN)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a21      	ldr	r2, [pc, #132]	; (8000560 <HAL_CAN_MspInit+0xa4>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d13b      	bne.n	8000556 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <HAL_CAN_MspInit+0xa8>)
 80004e0:	69da      	ldr	r2, [r3, #28]
 80004e2:	4b20      	ldr	r3, [pc, #128]	; (8000564 <HAL_CAN_MspInit+0xa8>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0489      	lsls	r1, r1, #18
 80004e8:	430a      	orrs	r2, r1
 80004ea:	61da      	str	r2, [r3, #28]
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <HAL_CAN_MspInit+0xa8>)
 80004ee:	69da      	ldr	r2, [r3, #28]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	049b      	lsls	r3, r3, #18
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <HAL_CAN_MspInit+0xa8>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <HAL_CAN_MspInit+0xa8>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0289      	lsls	r1, r1, #10
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_CAN_MspInit+0xa8>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	029b      	lsls	r3, r3, #10
 8000510:	4013      	ands	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	22c0      	movs	r2, #192	; 0xc0
 800051a:	0152      	lsls	r2, r2, #5
 800051c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051e:	0021      	movs	r1, r4
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2202      	movs	r2, #2
 8000524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2203      	movs	r2, #3
 8000530:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2204      	movs	r2, #4
 8000536:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	187a      	adds	r2, r7, r1
 800053a:	2390      	movs	r3, #144	; 0x90
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fd27 	bl	8000f94 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	201e      	movs	r0, #30
 800054c:	f000 fcf0 	bl	8000f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000550:	201e      	movs	r0, #30
 8000552:	f000 fd02 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b00b      	add	sp, #44	; 0x2c
 800055c:	bd90      	pop	{r4, r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40006400 	.word	0x40006400
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b08b      	sub	sp, #44	; 0x2c
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	2414      	movs	r4, #20
 8000572:	193b      	adds	r3, r7, r4
 8000574:	0018      	movs	r0, r3
 8000576:	2314      	movs	r3, #20
 8000578:	001a      	movs	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	f002 f852 	bl	8002624 <memset>
  if(huart->Instance==USART1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <HAL_UART_MspInit+0x94>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d133      	bne.n	80005f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <HAL_UART_MspInit+0x98>)
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <HAL_UART_MspInit+0x98>)
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	01c9      	lsls	r1, r1, #7
 8000594:	430a      	orrs	r2, r1
 8000596:	619a      	str	r2, [r3, #24]
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_UART_MspInit+0x98>)
 800059a:	699a      	ldr	r2, [r3, #24]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	01db      	lsls	r3, r3, #7
 80005a0:	4013      	ands	r3, r2
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_UART_MspInit+0x98>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <HAL_UART_MspInit+0x98>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	0289      	lsls	r1, r1, #10
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_UART_MspInit+0x98>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	029b      	lsls	r3, r3, #10
 80005bc:	4013      	ands	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	22c0      	movs	r2, #192	; 0xc0
 80005c6:	00d2      	lsls	r2, r2, #3
 80005c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2202      	movs	r2, #2
 80005d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2203      	movs	r2, #3
 80005dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2201      	movs	r2, #1
 80005e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	187a      	adds	r2, r7, r1
 80005e6:	2390      	movs	r3, #144	; 0x90
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fcd1 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b00b      	add	sp, #44	; 0x2c
 80005f8:	bd90      	pop	{r4, r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40013800 	.word	0x40013800
 8000600:	40021000 	.word	0x40021000

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler+0x4>

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000628:	f000 f8a0 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <CEC_CAN_IRQHandler+0x14>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f9b0 	bl	80009a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000028 	.word	0x20000028

0800064c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000658:	4813      	ldr	r0, [pc, #76]	; (80006a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800065c:	f7ff fff6 	bl	800064c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <LoopForever+0x6>)
    LDR R1, [R0]
 8000662:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000664:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <LoopForever+0xa>)
    CMP R1, R2
 8000668:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800066a:	d105      	bne.n	8000678 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800066e:	4912      	ldr	r1, [pc, #72]	; (80006b8 <LoopForever+0x12>)
    STR R1, [R0]
 8000670:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000672:	4812      	ldr	r0, [pc, #72]	; (80006bc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000674:	4912      	ldr	r1, [pc, #72]	; (80006c0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000676:	6001      	str	r1, [r0, #0]

08000678 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <LoopForever+0x1e>)
  ldr r1, =_edata
 800067a:	4913      	ldr	r1, [pc, #76]	; (80006c8 <LoopForever+0x22>)
  ldr r2, =_sidata
 800067c:	4a13      	ldr	r2, [pc, #76]	; (80006cc <LoopForever+0x26>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000690:	4c10      	ldr	r4, [pc, #64]	; (80006d4 <LoopForever+0x2e>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069e:	f001 ff9d 	bl	80025dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a2:	f7ff fdbd 	bl	8000220 <main>

080006a6 <LoopForever>:

LoopForever:
    b LoopForever
 80006a6:	e7fe      	b.n	80006a6 <LoopForever>
  ldr   r0, =_estack
 80006a8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80006ac:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80006b0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80006b4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80006b8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80006bc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80006c0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006cc:	0800268c 	.word	0x0800268c
  ldr r2, =_sbss
 80006d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d4:	200000dc 	.word	0x200000dc

080006d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_IRQHandler>
	...

080006dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <HAL_Init+0x24>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_Init+0x24>)
 80006e6:	2110      	movs	r1, #16
 80006e8:	430a      	orrs	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f809 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f2:	f7ff febf 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_InitTick+0x5c>)
 800070e:	681c      	ldr	r4, [r3, #0]
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_InitTick+0x60>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	0019      	movs	r1, r3
 8000716:	23fa      	movs	r3, #250	; 0xfa
 8000718:	0098      	lsls	r0, r3, #2
 800071a:	f7ff fcf5 	bl	8000108 <__udivsi3>
 800071e:	0003      	movs	r3, r0
 8000720:	0019      	movs	r1, r3
 8000722:	0020      	movs	r0, r4
 8000724:	f7ff fcf0 	bl	8000108 <__udivsi3>
 8000728:	0003      	movs	r3, r0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fc25 	bl	8000f7a <HAL_SYSTICK_Config>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	e00f      	b.n	8000758 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b03      	cmp	r3, #3
 800073c:	d80b      	bhi.n	8000756 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	2301      	movs	r3, #1
 8000742:	425b      	negs	r3, r3
 8000744:	2200      	movs	r2, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fbf2 	bl	8000f30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_InitTick+0x64>)
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b003      	add	sp, #12
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	18d2      	adds	r2, r2, r3
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_IncTick+0x20>)
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000008 	.word	0x20000008
 800078c:	200000d8 	.word	0x200000d8

08000790 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	200000d8 	.word	0x200000d8

080007a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d101      	bne.n	80007b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e0f0      	b.n	8000998 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2220      	movs	r2, #32
 80007ba:	5c9b      	ldrb	r3, [r3, r2]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d103      	bne.n	80007ca <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff fe79 	bl	80004bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	430a      	orrs	r2, r1
 80007d8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007da:	f7ff ffd9 	bl	8000790 <HAL_GetTick>
 80007de:	0003      	movs	r3, r0
 80007e0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007e2:	e013      	b.n	800080c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007e4:	f7ff ffd4 	bl	8000790 <HAL_GetTick>
 80007e8:	0002      	movs	r2, r0
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	2b0a      	cmp	r3, #10
 80007f0:	d90c      	bls.n	800080c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	0292      	lsls	r2, r2, #10
 80007fa:	431a      	orrs	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2220      	movs	r2, #32
 8000804:	2105      	movs	r1, #5
 8000806:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	e0c5      	b.n	8000998 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	d0e5      	beq.n	80007e4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2102      	movs	r1, #2
 8000824:	438a      	bics	r2, r1
 8000826:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000828:	f7ff ffb2 	bl	8000790 <HAL_GetTick>
 800082c:	0003      	movs	r3, r0
 800082e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000830:	e013      	b.n	800085a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000832:	f7ff ffad 	bl	8000790 <HAL_GetTick>
 8000836:	0002      	movs	r2, r0
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	2b0a      	cmp	r3, #10
 800083e:	d90c      	bls.n	800085a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	0292      	lsls	r2, r2, #10
 8000848:	431a      	orrs	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2220      	movs	r2, #32
 8000852:	2105      	movs	r1, #5
 8000854:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e09e      	b.n	8000998 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2202      	movs	r2, #2
 8000862:	4013      	ands	r3, r2
 8000864:	d1e5      	bne.n	8000832 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	7e1b      	ldrb	r3, [r3, #24]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d108      	bne.n	8000880 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	430a      	orrs	r2, r1
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e007      	b.n	8000890 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	438a      	bics	r2, r1
 800088e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7e5b      	ldrb	r3, [r3, #25]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d108      	bne.n	80008aa <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	430a      	orrs	r2, r1
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	e007      	b.n	80008ba <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	438a      	bics	r2, r1
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7e9b      	ldrb	r3, [r3, #26]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d108      	bne.n	80008d4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2120      	movs	r1, #32
 80008ce:	430a      	orrs	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	e007      	b.n	80008e4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2120      	movs	r1, #32
 80008e0:	438a      	bics	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7edb      	ldrb	r3, [r3, #27]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d108      	bne.n	80008fe <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2110      	movs	r1, #16
 80008f8:	438a      	bics	r2, r1
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	e007      	b.n	800090e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2110      	movs	r1, #16
 800090a:	430a      	orrs	r2, r1
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7f1b      	ldrb	r3, [r3, #28]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d108      	bne.n	8000928 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2108      	movs	r1, #8
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e007      	b.n	8000938 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2108      	movs	r1, #8
 8000934:	438a      	bics	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7f5b      	ldrb	r3, [r3, #29]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d108      	bne.n	8000952 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2104      	movs	r1, #4
 800094c:	430a      	orrs	r2, r1
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	e007      	b.n	8000962 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2104      	movs	r1, #4
 800095e:	438a      	bics	r2, r1
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	431a      	orrs	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	431a      	orrs	r2, r3
 8000978:	0011      	movs	r1, r2
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	1e5a      	subs	r2, r3, #1
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	430a      	orrs	r2, r1
 8000986:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2220      	movs	r2, #32
 8000992:	2101      	movs	r1, #1
 8000994:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	691b      	ldr	r3, [r3, #16]
 80009d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	2201      	movs	r2, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	d100      	bne.n	80009e6 <HAL_CAN_IRQHandler+0x46>
 80009e4:	e084      	b.n	8000af0 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	2201      	movs	r2, #1
 80009ea:	4013      	ands	r3, r2
 80009ec:	d024      	beq.n	8000a38 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2201      	movs	r2, #1
 80009f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	2202      	movs	r2, #2
 80009fa:	4013      	ands	r3, r2
 80009fc:	d004      	beq.n	8000a08 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 f981 	bl	8000d08 <HAL_CAN_TxMailbox0CompleteCallback>
 8000a06:	e017      	b.n	8000a38 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	d005      	beq.n	8000a1c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	4313      	orrs	r3, r2
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1a:	e00d      	b.n	8000a38 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2208      	movs	r2, #8
 8000a20:	4013      	ands	r3, r2
 8000a22:	d005      	beq.n	8000a30 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	0152      	lsls	r2, r2, #5
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a2e:	e003      	b.n	8000a38 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 f980 	bl	8000d38 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4013      	ands	r3, r2
 8000a40:	d028      	beq.n	8000a94 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0052      	lsls	r2, r2, #1
 8000a4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4013      	ands	r3, r2
 8000a54:	d004      	beq.n	8000a60 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 f95d 	bl	8000d18 <HAL_CAN_TxMailbox1CompleteCallback>
 8000a5e:	e019      	b.n	8000a94 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	4013      	ands	r3, r2
 8000a68:	d005      	beq.n	8000a76 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	0192      	lsls	r2, r2, #6
 8000a70:	4313      	orrs	r3, r2
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
 8000a74:	e00e      	b.n	8000a94 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d005      	beq.n	8000a8c <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	01d2      	lsls	r2, r2, #7
 8000a86:	4313      	orrs	r3, r2
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
 8000a8a:	e003      	b.n	8000a94 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f95a 	bl	8000d48 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	025b      	lsls	r3, r3, #9
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	d028      	beq.n	8000af0 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	0252      	lsls	r2, r2, #9
 8000aa6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	029b      	lsls	r3, r3, #10
 8000aae:	4013      	ands	r3, r2
 8000ab0:	d004      	beq.n	8000abc <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 f937 	bl	8000d28 <HAL_CAN_TxMailbox2CompleteCallback>
 8000aba:	e019      	b.n	8000af0 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	02db      	lsls	r3, r3, #11
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	d005      	beq.n	8000ad2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0212      	lsls	r2, r2, #8
 8000acc:	4313      	orrs	r3, r2
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad0:	e00e      	b.n	8000af0 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	031b      	lsls	r3, r3, #12
 8000ad8:	4013      	ands	r3, r2
 8000ada:	d005      	beq.n	8000ae8 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	0252      	lsls	r2, r2, #9
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae6:	e003      	b.n	8000af0 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f934 	bl	8000d58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	2208      	movs	r2, #8
 8000af4:	4013      	ands	r3, r2
 8000af6:	d00c      	beq.n	8000b12 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2210      	movs	r2, #16
 8000afc:	4013      	ands	r3, r2
 8000afe:	d008      	beq.n	8000b12 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	0092      	lsls	r2, r2, #2
 8000b06:	4313      	orrs	r3, r2
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2210      	movs	r2, #16
 8000b10:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	2204      	movs	r2, #4
 8000b16:	4013      	ands	r3, r2
 8000b18:	d00b      	beq.n	8000b32 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	4013      	ands	r3, r2
 8000b20:	d007      	beq.n	8000b32 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2208      	movs	r2, #8
 8000b28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 f923 	bl	8000d78 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	2202      	movs	r2, #2
 8000b36:	4013      	ands	r3, r2
 8000b38:	d009      	beq.n	8000b4e <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2203      	movs	r2, #3
 8000b42:	4013      	ands	r3, r2
 8000b44:	d003      	beq.n	8000b4e <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 f90d 	bl	8000d68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	4013      	ands	r3, r2
 8000b54:	d00c      	beq.n	8000b70 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	2210      	movs	r2, #16
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	d008      	beq.n	8000b70 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	00d2      	lsls	r2, r2, #3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	2220      	movs	r2, #32
 8000b74:	4013      	ands	r3, r2
 8000b76:	d00b      	beq.n	8000b90 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	d007      	beq.n	8000b90 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2208      	movs	r2, #8
 8000b86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f904 	bl	8000d98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	2210      	movs	r2, #16
 8000b94:	4013      	ands	r3, r2
 8000b96:	d009      	beq.n	8000bac <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d003      	beq.n	8000bac <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f8ee 	bl	8000d88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000bac:	6a3a      	ldr	r2, [r7, #32]
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	029b      	lsls	r3, r3, #10
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	d00b      	beq.n	8000bce <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	2210      	movs	r2, #16
 8000bba:	4013      	ands	r3, r2
 8000bbc:	d007      	beq.n	8000bce <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 f8ed 	bl	8000da8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000bce:	6a3a      	ldr	r2, [r7, #32]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	025b      	lsls	r3, r3, #9
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	d00b      	beq.n	8000bf0 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	2208      	movs	r2, #8
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2208      	movs	r2, #8
 8000be6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f8e4 	bl	8000db8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000bf0:	6a3a      	ldr	r2, [r7, #32]
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d100      	bne.n	8000bfc <HAL_CAN_IRQHandler+0x25c>
 8000bfa:	e074      	b.n	8000ce6 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4013      	ands	r3, r2
 8000c02:	d100      	bne.n	8000c06 <HAL_CAN_IRQHandler+0x266>
 8000c04:	e06b      	b.n	8000cde <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000c06:	6a3a      	ldr	r2, [r7, #32]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d007      	beq.n	8000c20 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2201      	movs	r2, #1
 8000c14:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000c16:	d003      	beq.n	8000c20 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000c20:	6a3a      	ldr	r2, [r7, #32]
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4013      	ands	r3, r2
 8000c28:	d007      	beq.n	8000c3a <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000c30:	d003      	beq.n	8000c3a <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	2202      	movs	r2, #2
 8000c36:	4313      	orrs	r3, r2
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000c3a:	6a3a      	ldr	r2, [r7, #32]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	4013      	ands	r3, r2
 8000c42:	d007      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2204      	movs	r2, #4
 8000c48:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000c4a:	d003      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4313      	orrs	r3, r2
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000c54:	6a3a      	ldr	r2, [r7, #32]
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d03f      	beq.n	8000cde <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2270      	movs	r2, #112	; 0x70
 8000c62:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000c64:	d03b      	beq.n	8000cde <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2270      	movs	r2, #112	; 0x70
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b60      	cmp	r3, #96	; 0x60
 8000c6e:	d027      	beq.n	8000cc0 <HAL_CAN_IRQHandler+0x320>
 8000c70:	d82c      	bhi.n	8000ccc <HAL_CAN_IRQHandler+0x32c>
 8000c72:	2b50      	cmp	r3, #80	; 0x50
 8000c74:	d01f      	beq.n	8000cb6 <HAL_CAN_IRQHandler+0x316>
 8000c76:	d829      	bhi.n	8000ccc <HAL_CAN_IRQHandler+0x32c>
 8000c78:	2b40      	cmp	r3, #64	; 0x40
 8000c7a:	d017      	beq.n	8000cac <HAL_CAN_IRQHandler+0x30c>
 8000c7c:	d826      	bhi.n	8000ccc <HAL_CAN_IRQHandler+0x32c>
 8000c7e:	2b30      	cmp	r3, #48	; 0x30
 8000c80:	d00f      	beq.n	8000ca2 <HAL_CAN_IRQHandler+0x302>
 8000c82:	d823      	bhi.n	8000ccc <HAL_CAN_IRQHandler+0x32c>
 8000c84:	2b10      	cmp	r3, #16
 8000c86:	d002      	beq.n	8000c8e <HAL_CAN_IRQHandler+0x2ee>
 8000c88:	2b20      	cmp	r3, #32
 8000c8a:	d005      	beq.n	8000c98 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000c8c:	e01e      	b.n	8000ccc <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	2208      	movs	r2, #8
 8000c92:	4313      	orrs	r3, r2
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c96:	e01a      	b.n	8000cce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ca0:	e015      	b.n	8000cce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000caa:	e010      	b.n	8000cce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	2240      	movs	r2, #64	; 0x40
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000cb4:	e00b      	b.n	8000cce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000cbe:	e006      	b.n	8000cce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	0052      	lsls	r2, r2, #1
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000cca:	e000      	b.n	8000cce <HAL_CAN_IRQHandler+0x32e>
            break;
 8000ccc:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	699a      	ldr	r2, [r3, #24]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2170      	movs	r1, #112	; 0x70
 8000cda:	438a      	bics	r2, r1
 8000cdc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d009      	beq.n	8000d00 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 f864 	bl	8000dc8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b00a      	add	sp, #40	; 0x28
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b002      	add	sp, #8
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	0002      	movs	r2, r0
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dea:	d809      	bhi.n	8000e00 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	001a      	movs	r2, r3
 8000df2:	231f      	movs	r3, #31
 8000df4:	401a      	ands	r2, r3
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_EnableIRQ+0x30>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	000a      	movs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
  }
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	0002      	movs	r2, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e20:	d828      	bhi.n	8000e74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e22:	4a2f      	ldr	r2, [pc, #188]	; (8000ee0 <__NVIC_SetPriority+0xd4>)
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	33c0      	adds	r3, #192	; 0xc0
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	589b      	ldr	r3, [r3, r2]
 8000e32:	1dfa      	adds	r2, r7, #7
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	0011      	movs	r1, r2
 8000e38:	2203      	movs	r2, #3
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	00d2      	lsls	r2, r2, #3
 8000e3e:	21ff      	movs	r1, #255	; 0xff
 8000e40:	4091      	lsls	r1, r2
 8000e42:	000a      	movs	r2, r1
 8000e44:	43d2      	mvns	r2, r2
 8000e46:	401a      	ands	r2, r3
 8000e48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	019b      	lsls	r3, r3, #6
 8000e4e:	22ff      	movs	r2, #255	; 0xff
 8000e50:	401a      	ands	r2, r3
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	0018      	movs	r0, r3
 8000e58:	2303      	movs	r3, #3
 8000e5a:	4003      	ands	r3, r0
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e60:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <__NVIC_SetPriority+0xd4>)
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	33c0      	adds	r3, #192	; 0xc0
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e72:	e031      	b.n	8000ed8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <__NVIC_SetPriority+0xd8>)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	400b      	ands	r3, r1
 8000e80:	3b08      	subs	r3, #8
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3306      	adds	r3, #6
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	18d3      	adds	r3, r2, r3
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1dfa      	adds	r2, r7, #7
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	0011      	movs	r1, r2
 8000e94:	2203      	movs	r2, #3
 8000e96:	400a      	ands	r2, r1
 8000e98:	00d2      	lsls	r2, r2, #3
 8000e9a:	21ff      	movs	r1, #255	; 0xff
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	019b      	lsls	r3, r3, #6
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	401a      	ands	r2, r3
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	4003      	ands	r3, r0
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <__NVIC_SetPriority+0xd8>)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	001c      	movs	r4, r3
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	4023      	ands	r3, r4
 8000ec8:	3b08      	subs	r3, #8
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	3306      	adds	r3, #6
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	18c3      	adds	r3, r0, r3
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	601a      	str	r2, [r3, #0]
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b003      	add	sp, #12
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	045b      	lsls	r3, r3, #17
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d301      	bcc.n	8000f00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efc:	2301      	movs	r3, #1
 8000efe:	e010      	b.n	8000f22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <SysTick_Config+0x44>)
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	3a01      	subs	r2, #1
 8000f06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f08:	2301      	movs	r3, #1
 8000f0a:	425b      	negs	r3, r3
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff ff7c 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <SysTick_Config+0x44>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <SysTick_Config+0x44>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	1c02      	adds	r2, r0, #0
 8000f40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	0002      	movs	r2, r0
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ff33 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ffaf 	bl	8000ee8 <SysTick_Config>
 8000f8a:	0003      	movs	r3, r0
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e149      	b.n	8001238 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4091      	lsls	r1, r2
 8000fae:	000a      	movs	r2, r1
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d100      	bne.n	8000fbc <HAL_GPIO_Init+0x28>
 8000fba:	e13a      	b.n	8001232 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d005      	beq.n	8000fd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d130      	bne.n	8001036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	0013      	movs	r3, r2
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100a:	2201      	movs	r2, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	2201      	movs	r2, #1
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2203      	movs	r2, #3
 800103c:	4013      	ands	r3, r2
 800103e:	2b03      	cmp	r3, #3
 8001040:	d017      	beq.n	8001072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2203      	movs	r2, #3
 8001078:	4013      	ands	r3, r2
 800107a:	2b02      	cmp	r3, #2
 800107c:	d123      	bne.n	80010c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	58d3      	ldr	r3, [r2, r3]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2207      	movs	r2, #7
 8001090:	4013      	ands	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	43da      	mvns	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2107      	movs	r1, #7
 80010aa:	400b      	ands	r3, r1
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	43da      	mvns	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	401a      	ands	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	23c0      	movs	r3, #192	; 0xc0
 8001100:	029b      	lsls	r3, r3, #10
 8001102:	4013      	ands	r3, r2
 8001104:	d100      	bne.n	8001108 <HAL_GPIO_Init+0x174>
 8001106:	e094      	b.n	8001232 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001108:	4b51      	ldr	r3, [pc, #324]	; (8001250 <HAL_GPIO_Init+0x2bc>)
 800110a:	699a      	ldr	r2, [r3, #24]
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_GPIO_Init+0x2bc>)
 800110e:	2101      	movs	r1, #1
 8001110:	430a      	orrs	r2, r1
 8001112:	619a      	str	r2, [r3, #24]
 8001114:	4b4e      	ldr	r3, [pc, #312]	; (8001250 <HAL_GPIO_Init+0x2bc>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	2201      	movs	r2, #1
 800111a:	4013      	ands	r3, r2
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001120:	4a4c      	ldr	r2, [pc, #304]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	589b      	ldr	r3, [r3, r2]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	43da      	mvns	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	2390      	movs	r3, #144	; 0x90
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	429a      	cmp	r2, r3
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x1d6>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a41      	ldr	r2, [pc, #260]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x1d2>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a40      	ldr	r2, [pc, #256]	; (800125c <HAL_GPIO_Init+0x2c8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x1ce>
 800115e:	2302      	movs	r3, #2
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x1d8>
 8001162:	2305      	movs	r3, #5
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x1d8>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x1d8>
 800116a:	2300      	movs	r3, #0
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	2103      	movs	r1, #3
 8001170:	400a      	ands	r2, r1
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800117c:	4935      	ldr	r1, [pc, #212]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	035b      	lsls	r3, r3, #13
 80011a2:	4013      	ands	r3, r2
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43da      	mvns	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	039b      	lsls	r3, r3, #14
 80011cc:	4013      	ands	r3, r2
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43da      	mvns	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	029b      	lsls	r3, r3, #10
 80011f6:	4013      	ands	r3, r2
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43da      	mvns	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	025b      	lsls	r3, r3, #9
 8001220:	4013      	ands	r3, r2
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	40da      	lsrs	r2, r3
 8001240:	1e13      	subs	r3, r2, #0
 8001242:	d000      	beq.n	8001246 <HAL_GPIO_Init+0x2b2>
 8001244:	e6ae      	b.n	8000fa4 <HAL_GPIO_Init+0x10>
  } 
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b006      	add	sp, #24
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	48000400 	.word	0x48000400
 800125c:	48000800 	.word	0x48000800
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	0008      	movs	r0, r1
 800126e:	0011      	movs	r1, r2
 8001270:	1cbb      	adds	r3, r7, #2
 8001272:	1c02      	adds	r2, r0, #0
 8001274:	801a      	strh	r2, [r3, #0]
 8001276:	1c7b      	adds	r3, r7, #1
 8001278:	1c0a      	adds	r2, r1, #0
 800127a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127c:	1c7b      	adds	r3, r7, #1
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128e:	1cbb      	adds	r3, r7, #2
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f000 fb76 	bl	80019a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2201      	movs	r2, #1
 80012ba:	4013      	ands	r3, r2
 80012bc:	d100      	bne.n	80012c0 <HAL_RCC_OscConfig+0x20>
 80012be:	e08e      	b.n	80013de <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012c0:	4bc5      	ldr	r3, [pc, #788]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	220c      	movs	r2, #12
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d00e      	beq.n	80012ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012cc:	4bc2      	ldr	r3, [pc, #776]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	220c      	movs	r2, #12
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d117      	bne.n	8001308 <HAL_RCC_OscConfig+0x68>
 80012d8:	4bbf      	ldr	r3, [pc, #764]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	23c0      	movs	r3, #192	; 0xc0
 80012de:	025b      	lsls	r3, r3, #9
 80012e0:	401a      	ands	r2, r3
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	025b      	lsls	r3, r3, #9
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d10e      	bne.n	8001308 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ea:	4bbb      	ldr	r3, [pc, #748]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	029b      	lsls	r3, r3, #10
 80012f2:	4013      	ands	r3, r2
 80012f4:	d100      	bne.n	80012f8 <HAL_RCC_OscConfig+0x58>
 80012f6:	e071      	b.n	80013dc <HAL_RCC_OscConfig+0x13c>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d000      	beq.n	8001302 <HAL_RCC_OscConfig+0x62>
 8001300:	e06c      	b.n	80013dc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	f000 fb4c 	bl	80019a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d107      	bne.n	8001320 <HAL_RCC_OscConfig+0x80>
 8001310:	4bb1      	ldr	r3, [pc, #708]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4bb0      	ldr	r3, [pc, #704]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	0249      	lsls	r1, r1, #9
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	e02f      	b.n	8001380 <HAL_RCC_OscConfig+0xe0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10c      	bne.n	8001342 <HAL_RCC_OscConfig+0xa2>
 8001328:	4bab      	ldr	r3, [pc, #684]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4baa      	ldr	r3, [pc, #680]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800132e:	49ab      	ldr	r1, [pc, #684]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001330:	400a      	ands	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	4ba8      	ldr	r3, [pc, #672]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4ba7      	ldr	r3, [pc, #668]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800133a:	49a9      	ldr	r1, [pc, #676]	; (80015e0 <HAL_RCC_OscConfig+0x340>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e01e      	b.n	8001380 <HAL_RCC_OscConfig+0xe0>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b05      	cmp	r3, #5
 8001348:	d10e      	bne.n	8001368 <HAL_RCC_OscConfig+0xc8>
 800134a:	4ba3      	ldr	r3, [pc, #652]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4ba2      	ldr	r3, [pc, #648]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	02c9      	lsls	r1, r1, #11
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	4b9f      	ldr	r3, [pc, #636]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b9e      	ldr	r3, [pc, #632]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	0249      	lsls	r1, r1, #9
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xe0>
 8001368:	4b9b      	ldr	r3, [pc, #620]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b9a      	ldr	r3, [pc, #616]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800136e:	499b      	ldr	r1, [pc, #620]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	4b98      	ldr	r3, [pc, #608]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b97      	ldr	r3, [pc, #604]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800137a:	4999      	ldr	r1, [pc, #612]	; (80015e0 <HAL_RCC_OscConfig+0x340>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d014      	beq.n	80013b2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fa02 	bl	8000790 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001392:	f7ff f9fd 	bl	8000790 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e2fd      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a4:	4b8c      	ldr	r3, [pc, #560]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	029b      	lsls	r3, r3, #10
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0xf2>
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff f9ed 	bl	8000790 <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff f9e8 	bl	8000790 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e2e8      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	4013      	ands	r3, r2
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x11c>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d100      	bne.n	80013ea <HAL_RCC_OscConfig+0x14a>
 80013e8:	e06c      	b.n	80014c4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013ea:	4b7b      	ldr	r3, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	220c      	movs	r2, #12
 80013f0:	4013      	ands	r3, r2
 80013f2:	d00e      	beq.n	8001412 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013f4:	4b78      	ldr	r3, [pc, #480]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	220c      	movs	r2, #12
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d11f      	bne.n	8001440 <HAL_RCC_OscConfig+0x1a0>
 8001400:	4b75      	ldr	r3, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	23c0      	movs	r3, #192	; 0xc0
 8001406:	025b      	lsls	r3, r3, #9
 8001408:	401a      	ands	r2, r3
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	429a      	cmp	r2, r3
 8001410:	d116      	bne.n	8001440 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	4b71      	ldr	r3, [pc, #452]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d005      	beq.n	8001428 <HAL_RCC_OscConfig+0x188>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d001      	beq.n	8001428 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e2bb      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	22f8      	movs	r2, #248	; 0xf8
 800142e:	4393      	bics	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	00da      	lsls	r2, r3, #3
 8001438:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	e041      	b.n	80014c4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d024      	beq.n	8001492 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001448:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff f99c 	bl	8000790 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff f997 	bl	8000790 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e297      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2202      	movs	r2, #2
 8001476:	4013      	ands	r3, r2
 8001478:	d0f1      	beq.n	800145e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	22f8      	movs	r2, #248	; 0xf8
 8001480:	4393      	bics	r3, r2
 8001482:	0019      	movs	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	00da      	lsls	r2, r3, #3
 800148a:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	e018      	b.n	80014c4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001498:	2101      	movs	r1, #1
 800149a:	438a      	bics	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff f977 	bl	8000790 <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff f972 	bl	8000790 <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e272      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	d1f1      	bne.n	80014a8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2208      	movs	r2, #8
 80014ca:	4013      	ands	r3, r2
 80014cc:	d036      	beq.n	800153c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d019      	beq.n	800150a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014dc:	2101      	movs	r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff f955 	bl	8000790 <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff f950 	bl	8000790 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e250      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	d0f1      	beq.n	80014ec <HAL_RCC_OscConfig+0x24c>
 8001508:	e018      	b.n	800153c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800150c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001510:	2101      	movs	r1, #1
 8001512:	438a      	bics	r2, r1
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff f93b 	bl	8000790 <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff f936 	bl	8000790 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e236      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d1f1      	bne.n	8001520 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2204      	movs	r2, #4
 8001542:	4013      	ands	r3, r2
 8001544:	d100      	bne.n	8001548 <HAL_RCC_OscConfig+0x2a8>
 8001546:	e0b5      	b.n	80016b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001548:	201f      	movs	r0, #31
 800154a:	183b      	adds	r3, r7, r0
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001552:	69da      	ldr	r2, [r3, #28]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	055b      	lsls	r3, r3, #21
 8001558:	4013      	ands	r3, r2
 800155a:	d110      	bne.n	800157e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0549      	lsls	r1, r1, #21
 8001566:	430a      	orrs	r2, r1
 8001568:	61da      	str	r2, [r3, #28]
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	055b      	lsls	r3, r3, #21
 8001572:	4013      	ands	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001578:	183b      	adds	r3, r7, r0
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4013      	ands	r3, r2
 8001588:	d11a      	bne.n	80015c0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0049      	lsls	r1, r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001598:	f7ff f8fa 	bl	8000790 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff f8f5 	bl	8000790 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b64      	cmp	r3, #100	; 0x64
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1f5      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4013      	ands	r3, r2
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10f      	bne.n	80015e8 <HAL_RCC_OscConfig+0x348>
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80015ce:	2101      	movs	r1, #1
 80015d0:	430a      	orrs	r2, r1
 80015d2:	621a      	str	r2, [r3, #32]
 80015d4:	e036      	b.n	8001644 <HAL_RCC_OscConfig+0x3a4>
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40021000 	.word	0x40021000
 80015dc:	fffeffff 	.word	0xfffeffff
 80015e0:	fffbffff 	.word	0xfffbffff
 80015e4:	40007000 	.word	0x40007000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x36a>
 80015f0:	4bca      	ldr	r3, [pc, #808]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	4bc9      	ldr	r3, [pc, #804]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	438a      	bics	r2, r1
 80015fa:	621a      	str	r2, [r3, #32]
 80015fc:	4bc7      	ldr	r3, [pc, #796]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	4bc6      	ldr	r3, [pc, #792]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001602:	2104      	movs	r1, #4
 8001604:	438a      	bics	r2, r1
 8001606:	621a      	str	r2, [r3, #32]
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x3a4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x38c>
 8001612:	4bc2      	ldr	r3, [pc, #776]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001614:	6a1a      	ldr	r2, [r3, #32]
 8001616:	4bc1      	ldr	r3, [pc, #772]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001618:	2104      	movs	r1, #4
 800161a:	430a      	orrs	r2, r1
 800161c:	621a      	str	r2, [r3, #32]
 800161e:	4bbf      	ldr	r3, [pc, #764]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4bbe      	ldr	r3, [pc, #760]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	621a      	str	r2, [r3, #32]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0x3a4>
 800162c:	4bbb      	ldr	r3, [pc, #748]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800162e:	6a1a      	ldr	r2, [r3, #32]
 8001630:	4bba      	ldr	r3, [pc, #744]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001632:	2101      	movs	r1, #1
 8001634:	438a      	bics	r2, r1
 8001636:	621a      	str	r2, [r3, #32]
 8001638:	4bb8      	ldr	r3, [pc, #736]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	4bb7      	ldr	r3, [pc, #732]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800163e:	2104      	movs	r1, #4
 8001640:	438a      	bics	r2, r1
 8001642:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d014      	beq.n	8001676 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff f8a0 	bl	8000790 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001654:	e009      	b.n	800166a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff f89b 	bl	8000790 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	4aaf      	ldr	r2, [pc, #700]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e19a      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	4bac      	ldr	r3, [pc, #688]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x3b6>
 8001674:	e013      	b.n	800169e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff f88b 	bl	8000790 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167e:	e009      	b.n	8001694 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff f886 	bl	8000790 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4aa5      	ldr	r2, [pc, #660]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e185      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	4ba1      	ldr	r3, [pc, #644]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800169e:	231f      	movs	r3, #31
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a8:	4b9c      	ldr	r3, [pc, #624]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	4b9b      	ldr	r3, [pc, #620]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016ae:	499d      	ldr	r1, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0x684>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2210      	movs	r2, #16
 80016ba:	4013      	ands	r3, r2
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d12a      	bne.n	800171c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016c6:	4b95      	ldr	r3, [pc, #596]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ca:	4b94      	ldr	r3, [pc, #592]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016cc:	2104      	movs	r1, #4
 80016ce:	430a      	orrs	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016d2:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d6:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016d8:	2101      	movs	r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff f857 	bl	8000790 <HAL_GetTick>
 80016e2:	0003      	movs	r3, r0
 80016e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016e8:	f7ff f852 	bl	8000790 <HAL_GetTick>
 80016ec:	0002      	movs	r2, r0
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e152      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d0f1      	beq.n	80016e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001704:	4b85      	ldr	r3, [pc, #532]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001708:	22f8      	movs	r2, #248	; 0xf8
 800170a:	4393      	bics	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	00da      	lsls	r2, r3, #3
 8001714:	4b81      	ldr	r3, [pc, #516]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001716:	430a      	orrs	r2, r1
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
 800171a:	e034      	b.n	8001786 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	3305      	adds	r3, #5
 8001722:	d111      	bne.n	8001748 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001724:	4b7d      	ldr	r3, [pc, #500]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001728:	4b7c      	ldr	r3, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800172a:	2104      	movs	r1, #4
 800172c:	438a      	bics	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001730:	4b7a      	ldr	r3, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001734:	22f8      	movs	r2, #248	; 0xf8
 8001736:	4393      	bics	r3, r2
 8001738:	0019      	movs	r1, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	00da      	lsls	r2, r3, #3
 8001740:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001742:	430a      	orrs	r2, r1
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
 8001746:	e01e      	b.n	8001786 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001748:	4b74      	ldr	r3, [pc, #464]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800174a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174c:	4b73      	ldr	r3, [pc, #460]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800174e:	2104      	movs	r1, #4
 8001750:	430a      	orrs	r2, r1
 8001752:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001754:	4b71      	ldr	r3, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001758:	4b70      	ldr	r3, [pc, #448]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800175a:	2101      	movs	r1, #1
 800175c:	438a      	bics	r2, r1
 800175e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff f816 	bl	8000790 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800176a:	f7ff f811 	bl	8000790 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e111      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800177c:	4b67      	ldr	r3, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d1f1      	bne.n	800176a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2220      	movs	r2, #32
 800178c:	4013      	ands	r3, r2
 800178e:	d05c      	beq.n	800184a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001790:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	220c      	movs	r2, #12
 8001796:	4013      	ands	r3, r2
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d00e      	beq.n	80017ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800179c:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	220c      	movs	r2, #12
 80017a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d114      	bne.n	80017d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017a8:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	23c0      	movs	r3, #192	; 0xc0
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	401a      	ands	r2, r3
 80017b2:	23c0      	movs	r3, #192	; 0xc0
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d10b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017ba:	4b58      	ldr	r3, [pc, #352]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80017bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	029b      	lsls	r3, r3, #10
 80017c2:	4013      	ands	r3, r2
 80017c4:	d040      	beq.n	8001848 <HAL_RCC_OscConfig+0x5a8>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d03c      	beq.n	8001848 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0e6      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01b      	beq.n	8001812 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017da:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80017dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017de:	4b4f      	ldr	r3, [pc, #316]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	0249      	lsls	r1, r1, #9
 80017e4:	430a      	orrs	r2, r1
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7fe ffd2 	bl	8000790 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f2:	f7fe ffcd 	bl	8000790 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0cd      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001804:	4b45      	ldr	r3, [pc, #276]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	029b      	lsls	r3, r3, #10
 800180c:	4013      	ands	r3, r2
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x552>
 8001810:	e01b      	b.n	800184a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001812:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001818:	4943      	ldr	r1, [pc, #268]	; (8001928 <HAL_RCC_OscConfig+0x688>)
 800181a:	400a      	ands	r2, r1
 800181c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7fe ffb7 	bl	8000790 <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001828:	f7fe ffb2 	bl	8000790 <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e0b2      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800183c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	029b      	lsls	r3, r3, #10
 8001842:	4013      	ands	r3, r2
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x588>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001848:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	2b00      	cmp	r3, #0
 8001850:	d100      	bne.n	8001854 <HAL_RCC_OscConfig+0x5b4>
 8001852:	e0a4      	b.n	800199e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	220c      	movs	r2, #12
 800185a:	4013      	ands	r3, r2
 800185c:	2b08      	cmp	r3, #8
 800185e:	d100      	bne.n	8001862 <HAL_RCC_OscConfig+0x5c2>
 8001860:	e078      	b.n	8001954 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	2b02      	cmp	r3, #2
 8001868:	d14c      	bne.n	8001904 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001870:	492e      	ldr	r1, [pc, #184]	; (800192c <HAL_RCC_OscConfig+0x68c>)
 8001872:	400a      	ands	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7fe ff8b 	bl	8000790 <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7fe ff86 	bl	8000790 <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e086      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	049b      	lsls	r3, r3, #18
 800189a:	4013      	ands	r3, r2
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	220f      	movs	r2, #15
 80018a4:	4393      	bics	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_RCC_OscConfig+0x690>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	431a      	orrs	r2, r3
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018c8:	430a      	orrs	r2, r1
 80018ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	0449      	lsls	r1, r1, #17
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7fe ff59 	bl	8000790 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7fe ff54 	bl	8000790 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e054      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	049b      	lsls	r3, r3, #18
 80018fe:	4013      	ands	r3, r2
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x644>
 8001902:	e04c      	b.n	800199e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <HAL_RCC_OscConfig+0x68c>)
 800190c:	400a      	ands	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7fe ff3e 	bl	8000790 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x6a6>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40021000 	.word	0x40021000
 8001920:	00001388 	.word	0x00001388
 8001924:	efffffff 	.word	0xefffffff
 8001928:	fffeffff 	.word	0xfffeffff
 800192c:	feffffff 	.word	0xfeffffff
 8001930:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7fe ff2c 	bl	8000790 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e02c      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_RCC_OscConfig+0x708>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	049b      	lsls	r3, r3, #18
 800194e:	4013      	ands	r3, r2
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x694>
 8001952:	e024      	b.n	800199e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e01f      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_OscConfig+0x708>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_RCC_OscConfig+0x708>)
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	401a      	ands	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	429a      	cmp	r2, r3
 800197a:	d10e      	bne.n	800199a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	220f      	movs	r2, #15
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d107      	bne.n	800199a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	23f0      	movs	r3, #240	; 0xf0
 800198e:	039b      	lsls	r3, r3, #14
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b008      	add	sp, #32
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0bf      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d911      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b5e      	ldr	r3, [pc, #376]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4393      	bics	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0a6      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d015      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2204      	movs	r2, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	d006      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a06:	4b51      	ldr	r3, [pc, #324]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a0c:	21e0      	movs	r1, #224	; 0xe0
 8001a0e:	00c9      	lsls	r1, r1, #3
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	22f0      	movs	r2, #240	; 0xf0
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d04c      	beq.n	8001acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d120      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07a      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	049b      	lsls	r3, r3, #18
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d114      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06e      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	4013      	ands	r3, r2
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e062      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e05b      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4393      	bics	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7fe fe78 	bl	8000790 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7fe fe73 	bl	8000790 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <HAL_RCC_ClockConfig+0x1a4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e042      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	220c      	movs	r2, #12
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1ec      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d211      	bcs.n	8001afe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e020      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2204      	movs	r2, #4
 8001b04:	4013      	ands	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_RCC_ClockConfig+0x1a8>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b1c:	f000 f820 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b20:	0001      	movs	r1, r0
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	220f      	movs	r2, #15
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x1ac>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	000a      	movs	r2, r1
 8001b32:	40da      	lsrs	r2, r3
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 8001b36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f7fe fde3 	bl	8000704 <HAL_InitTick>
  
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	00001388 	.word	0x00001388
 8001b54:	fffff8ff 	.word	0xfffff8ff
 8001b58:	0800264c 	.word	0x0800264c
 8001b5c:	20000000 	.word	0x20000000

08001b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	220c      	movs	r2, #12
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d046      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0xb8>
 8001b8a:	d848      	bhi.n	8001c1e <HAL_RCC_GetSysClockFreq+0xbe>
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d002      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x36>
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d003      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x3c>
 8001b94:	e043      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b96:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b98:	613b      	str	r3, [r7, #16]
      break;
 8001b9a:	e043      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	0c9b      	lsrs	r3, r3, #18
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	220f      	movs	r2, #15
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xdc>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	23c0      	movs	r3, #192	; 0xc0
 8001bbc:	025b      	lsls	r3, r3, #9
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d109      	bne.n	8001bdc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	481a      	ldr	r0, [pc, #104]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bcc:	f7fe fa9c 	bl	8000108 <__udivsi3>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4353      	muls	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e01a      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	23c0      	movs	r3, #192	; 0xc0
 8001be0:	025b      	lsls	r3, r3, #9
 8001be2:	401a      	ands	r2, r3
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d109      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	4814      	ldr	r0, [pc, #80]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001bf0:	f7fe fa8a 	bl	8000108 <__udivsi3>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4353      	muls	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c04:	f7fe fa80 	bl	8000108 <__udivsi3>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4353      	muls	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	613b      	str	r3, [r7, #16]
      break;
 8001c16:	e005      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001c1a:	613b      	str	r3, [r7, #16]
      break;
 8001c1c:	e002      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c20:	613b      	str	r3, [r7, #16]
      break;
 8001c22:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c24:	693b      	ldr	r3, [r7, #16]
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b006      	add	sp, #24
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	40021000 	.word	0x40021000
 8001c34:	007a1200 	.word	0x007a1200
 8001c38:	08002664 	.word	0x08002664
 8001c3c:	08002674 	.word	0x08002674
 8001c40:	02dc6c00 	.word	0x02dc6c00

08001c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	20000000 	.word	0x20000000

08001c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c5c:	f7ff fff2 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c60:	0001      	movs	r1, r0
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	2207      	movs	r2, #7
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	40d9      	lsrs	r1, r3
 8001c72:	000b      	movs	r3, r1
}    
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	0800265c 	.word	0x0800265c

08001c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	025b      	lsls	r3, r3, #9
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ca0:	e08e      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2017      	movs	r0, #23
 8001ca4:	183b      	adds	r3, r7, r0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	055b      	lsls	r3, r3, #21
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d110      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	0549      	lsls	r1, r1, #21
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	61da      	str	r2, [r3, #28]
 8001cc4:	4b60      	ldr	r3, [pc, #384]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	055b      	lsls	r3, r3, #21
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd2:	183b      	adds	r3, r7, r0
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d11a      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	0049      	lsls	r1, r1, #1
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf2:	f7fe fd4d 	bl	8000790 <HAL_GetTick>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	e008      	b.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfc:	f7fe fd48 	bl	8000790 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e097      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d1a:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d1c:	6a1a      	ldr	r2, [r3, #32]
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4013      	ands	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d034      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	23c0      	movs	r3, #192	; 0xc0
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4013      	ands	r3, r2
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d02c      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a43      	ldr	r2, [pc, #268]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0249      	lsls	r1, r1, #9
 8001d50:	430a      	orrs	r2, r1
 8001d52:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d54:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d5a:	493e      	ldr	r1, [pc, #248]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d60:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fd0f 	bl	8000790 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	e009      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7fe fd0a 	bl	8000790 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	4a35      	ldr	r2, [pc, #212]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e058      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	2202      	movs	r2, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d96:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001da6:	430a      	orrs	r2, r1
 8001da8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001daa:	2317      	movs	r3, #23
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dba:	4928      	ldr	r1, [pc, #160]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d009      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dca:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2220      	movs	r2, #32
 8001de4:	4013      	ands	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	2210      	movs	r2, #16
 8001dee:	4393      	bics	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	4013      	ands	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	4393      	bics	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4013      	ands	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	2240      	movs	r2, #64	; 0x40
 8001e2e:	4393      	bics	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b006      	add	sp, #24
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	fffffcff 	.word	0xfffffcff
 8001e54:	fffeffff 	.word	0xfffeffff
 8001e58:	00001388 	.word	0x00001388
 8001e5c:	efffffff 	.word	0xefffffff

08001e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e044      	b.n	8001efc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d107      	bne.n	8001e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2278      	movs	r2, #120	; 0x78
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe fb6f 	bl	8000568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2224      	movs	r2, #36	; 0x24
 8001e8e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f830 	bl	8001f08 <UART_SetConfig>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e024      	b.n	8001efc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f000 f963 	bl	8002188 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	490d      	ldr	r1, [pc, #52]	; (8001f04 <HAL_UART_Init+0xa4>)
 8001ece:	400a      	ands	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	212a      	movs	r1, #42	; 0x2a
 8001ede:	438a      	bics	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 f9fb 	bl	80022f0 <UART_CheckIdleState>
 8001efa:	0003      	movs	r3, r0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	ffffb7ff 	.word	0xffffb7ff

08001f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f10:	231e      	movs	r3, #30
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a8d      	ldr	r2, [pc, #564]	; (800216c <UART_SetConfig+0x264>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a88      	ldr	r2, [pc, #544]	; (8002170 <UART_SetConfig+0x268>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a7f      	ldr	r2, [pc, #508]	; (8002174 <UART_SetConfig+0x26c>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a7b      	ldr	r2, [pc, #492]	; (8002178 <UART_SetConfig+0x270>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d127      	bne.n	8001fde <UART_SetConfig+0xd6>
 8001f8e:	4b7b      	ldr	r3, [pc, #492]	; (800217c <UART_SetConfig+0x274>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	2203      	movs	r2, #3
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d00d      	beq.n	8001fb6 <UART_SetConfig+0xae>
 8001f9a:	d81b      	bhi.n	8001fd4 <UART_SetConfig+0xcc>
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d014      	beq.n	8001fca <UART_SetConfig+0xc2>
 8001fa0:	d818      	bhi.n	8001fd4 <UART_SetConfig+0xcc>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <UART_SetConfig+0xa4>
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d00a      	beq.n	8001fc0 <UART_SetConfig+0xb8>
 8001faa:	e013      	b.n	8001fd4 <UART_SetConfig+0xcc>
 8001fac:	231f      	movs	r3, #31
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e021      	b.n	8001ffa <UART_SetConfig+0xf2>
 8001fb6:	231f      	movs	r3, #31
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2202      	movs	r2, #2
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e01c      	b.n	8001ffa <UART_SetConfig+0xf2>
 8001fc0:	231f      	movs	r3, #31
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	e017      	b.n	8001ffa <UART_SetConfig+0xf2>
 8001fca:	231f      	movs	r3, #31
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2208      	movs	r2, #8
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e012      	b.n	8001ffa <UART_SetConfig+0xf2>
 8001fd4:	231f      	movs	r3, #31
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2210      	movs	r2, #16
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e00d      	b.n	8001ffa <UART_SetConfig+0xf2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a67      	ldr	r2, [pc, #412]	; (8002180 <UART_SetConfig+0x278>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d104      	bne.n	8001ff2 <UART_SetConfig+0xea>
 8001fe8:	231f      	movs	r3, #31
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e003      	b.n	8001ffa <UART_SetConfig+0xf2>
 8001ff2:	231f      	movs	r3, #31
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	429a      	cmp	r2, r3
 8002004:	d15c      	bne.n	80020c0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002006:	231f      	movs	r3, #31
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b08      	cmp	r3, #8
 800200e:	d015      	beq.n	800203c <UART_SetConfig+0x134>
 8002010:	dc18      	bgt.n	8002044 <UART_SetConfig+0x13c>
 8002012:	2b04      	cmp	r3, #4
 8002014:	d00d      	beq.n	8002032 <UART_SetConfig+0x12a>
 8002016:	dc15      	bgt.n	8002044 <UART_SetConfig+0x13c>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <UART_SetConfig+0x11a>
 800201c:	2b02      	cmp	r3, #2
 800201e:	d005      	beq.n	800202c <UART_SetConfig+0x124>
 8002020:	e010      	b.n	8002044 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002022:	f7ff fe19 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 8002026:	0003      	movs	r3, r0
 8002028:	61bb      	str	r3, [r7, #24]
        break;
 800202a:	e012      	b.n	8002052 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800202c:	4b55      	ldr	r3, [pc, #340]	; (8002184 <UART_SetConfig+0x27c>)
 800202e:	61bb      	str	r3, [r7, #24]
        break;
 8002030:	e00f      	b.n	8002052 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002032:	f7ff fd95 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002036:	0003      	movs	r3, r0
 8002038:	61bb      	str	r3, [r7, #24]
        break;
 800203a:	e00a      	b.n	8002052 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	61bb      	str	r3, [r7, #24]
        break;
 8002042:	e006      	b.n	8002052 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002048:	231e      	movs	r3, #30
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
        break;
 8002050:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d100      	bne.n	800205a <UART_SetConfig+0x152>
 8002058:	e07a      	b.n	8002150 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	005a      	lsls	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	18d2      	adds	r2, r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	0019      	movs	r1, r3
 800206c:	0010      	movs	r0, r2
 800206e:	f7fe f84b 	bl	8000108 <__udivsi3>
 8002072:	0003      	movs	r3, r0
 8002074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d91c      	bls.n	80020b6 <UART_SetConfig+0x1ae>
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	025b      	lsls	r3, r3, #9
 8002082:	429a      	cmp	r2, r3
 8002084:	d217      	bcs.n	80020b6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	b29a      	uxth	r2, r3
 800208a:	200e      	movs	r0, #14
 800208c:	183b      	adds	r3, r7, r0
 800208e:	210f      	movs	r1, #15
 8002090:	438a      	bics	r2, r1
 8002092:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	b29b      	uxth	r3, r3
 800209a:	2207      	movs	r2, #7
 800209c:	4013      	ands	r3, r2
 800209e:	b299      	uxth	r1, r3
 80020a0:	183b      	adds	r3, r7, r0
 80020a2:	183a      	adds	r2, r7, r0
 80020a4:	8812      	ldrh	r2, [r2, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	183a      	adds	r2, r7, r0
 80020b0:	8812      	ldrh	r2, [r2, #0]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	e04c      	b.n	8002150 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80020b6:	231e      	movs	r3, #30
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e047      	b.n	8002150 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80020c0:	231f      	movs	r3, #31
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d015      	beq.n	80020f6 <UART_SetConfig+0x1ee>
 80020ca:	dc18      	bgt.n	80020fe <UART_SetConfig+0x1f6>
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d00d      	beq.n	80020ec <UART_SetConfig+0x1e4>
 80020d0:	dc15      	bgt.n	80020fe <UART_SetConfig+0x1f6>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <UART_SetConfig+0x1d4>
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d005      	beq.n	80020e6 <UART_SetConfig+0x1de>
 80020da:	e010      	b.n	80020fe <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020dc:	f7ff fdbc 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80020e0:	0003      	movs	r3, r0
 80020e2:	61bb      	str	r3, [r7, #24]
        break;
 80020e4:	e012      	b.n	800210c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <UART_SetConfig+0x27c>)
 80020e8:	61bb      	str	r3, [r7, #24]
        break;
 80020ea:	e00f      	b.n	800210c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020ec:	f7ff fd38 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 80020f0:	0003      	movs	r3, r0
 80020f2:	61bb      	str	r3, [r7, #24]
        break;
 80020f4:	e00a      	b.n	800210c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	61bb      	str	r3, [r7, #24]
        break;
 80020fc:	e006      	b.n	800210c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002102:	231e      	movs	r3, #30
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
        break;
 800210a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01e      	beq.n	8002150 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	085a      	lsrs	r2, r3, #1
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	18d2      	adds	r2, r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	0019      	movs	r1, r3
 8002122:	0010      	movs	r0, r2
 8002124:	f7fd fff0 	bl	8000108 <__udivsi3>
 8002128:	0003      	movs	r3, r0
 800212a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	d90a      	bls.n	8002148 <UART_SetConfig+0x240>
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	429a      	cmp	r2, r3
 800213a:	d205      	bcs.n	8002148 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	e003      	b.n	8002150 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002148:	231e      	movs	r3, #30
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800215c:	231e      	movs	r3, #30
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	781b      	ldrb	r3, [r3, #0]
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b008      	add	sp, #32
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	efff69f3 	.word	0xefff69f3
 8002170:	ffffcfff 	.word	0xffffcfff
 8002174:	fffff4ff 	.word	0xfffff4ff
 8002178:	40013800 	.word	0x40013800
 800217c:	40021000 	.word	0x40021000
 8002180:	40004400 	.word	0x40004400
 8002184:	007a1200 	.word	0x007a1200

08002188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	d00b      	beq.n	80021b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <UART_AdvFeatureConfig+0x144>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2202      	movs	r2, #2
 80021b8:	4013      	ands	r3, r2
 80021ba:	d00b      	beq.n	80021d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <UART_AdvFeatureConfig+0x148>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2204      	movs	r2, #4
 80021da:	4013      	ands	r3, r2
 80021dc:	d00b      	beq.n	80021f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <UART_AdvFeatureConfig+0x14c>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2208      	movs	r2, #8
 80021fc:	4013      	ands	r3, r2
 80021fe:	d00b      	beq.n	8002218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <UART_AdvFeatureConfig+0x150>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	2210      	movs	r2, #16
 800221e:	4013      	ands	r3, r2
 8002220:	d00b      	beq.n	800223a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a2c      	ldr	r2, [pc, #176]	; (80022dc <UART_AdvFeatureConfig+0x154>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2220      	movs	r2, #32
 8002240:	4013      	ands	r3, r2
 8002242:	d00b      	beq.n	800225c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <UART_AdvFeatureConfig+0x158>)
 800224c:	4013      	ands	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	4013      	ands	r3, r2
 8002264:	d01d      	beq.n	80022a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <UART_AdvFeatureConfig+0x15c>)
 800226e:	4013      	ands	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	035b      	lsls	r3, r3, #13
 8002286:	429a      	cmp	r2, r3
 8002288:	d10b      	bne.n	80022a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <UART_AdvFeatureConfig+0x160>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	4013      	ands	r3, r2
 80022aa:	d00b      	beq.n	80022c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <UART_AdvFeatureConfig+0x164>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]
  }
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	fffdffff 	.word	0xfffdffff
 80022d0:	fffeffff 	.word	0xfffeffff
 80022d4:	fffbffff 	.word	0xfffbffff
 80022d8:	ffff7fff 	.word	0xffff7fff
 80022dc:	ffffefff 	.word	0xffffefff
 80022e0:	ffffdfff 	.word	0xffffdfff
 80022e4:	ffefffff 	.word	0xffefffff
 80022e8:	ff9fffff 	.word	0xff9fffff
 80022ec:	fff7ffff 	.word	0xfff7ffff

080022f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b092      	sub	sp, #72	; 0x48
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2284      	movs	r2, #132	; 0x84
 80022fc:	2100      	movs	r1, #0
 80022fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002300:	f7fe fa46 	bl	8000790 <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2208      	movs	r2, #8
 8002310:	4013      	ands	r3, r2
 8002312:	2b08      	cmp	r3, #8
 8002314:	d12c      	bne.n	8002370 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	0391      	lsls	r1, r2, #14
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4a46      	ldr	r2, [pc, #280]	; (8002438 <UART_CheckIdleState+0x148>)
 8002320:	9200      	str	r2, [sp, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	f000 f88c 	bl	8002440 <UART_WaitOnFlagUntilTimeout>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d021      	beq.n	8002370 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800232c:	f3ef 8310 	mrs	r3, PRIMASK
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002334:	63bb      	str	r3, [r7, #56]	; 0x38
 8002336:	2301      	movs	r3, #1
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	f383 8810 	msr	PRIMASK, r3
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2180      	movs	r1, #128	; 0x80
 800234e:	438a      	bics	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	f383 8810 	msr	PRIMASK, r3
}
 800235c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2278      	movs	r2, #120	; 0x78
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e05f      	b.n	8002430 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2204      	movs	r2, #4
 8002378:	4013      	ands	r3, r2
 800237a:	2b04      	cmp	r3, #4
 800237c:	d146      	bne.n	800240c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800237e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	03d1      	lsls	r1, r2, #15
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <UART_CheckIdleState+0x148>)
 8002388:	9200      	str	r2, [sp, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	f000 f858 	bl	8002440 <UART_WaitOnFlagUntilTimeout>
 8002390:	1e03      	subs	r3, r0, #0
 8002392:	d03b      	beq.n	800240c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002394:	f3ef 8310 	mrs	r3, PRIMASK
 8002398:	60fb      	str	r3, [r7, #12]
  return(result);
 800239a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
 800239e:	2301      	movs	r3, #1
 80023a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f383 8810 	msr	PRIMASK, r3
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4921      	ldr	r1, [pc, #132]	; (800243c <UART_CheckIdleState+0x14c>)
 80023b6:	400a      	ands	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f383 8810 	msr	PRIMASK, r3
}
 80023c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80023cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
 80023d0:	2301      	movs	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f383 8810 	msr	PRIMASK, r3
}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	438a      	bics	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f383 8810 	msr	PRIMASK, r3
}
 80023f6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	2120      	movs	r1, #32
 80023fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2278      	movs	r2, #120	; 0x78
 8002404:	2100      	movs	r1, #0
 8002406:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e011      	b.n	8002430 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2280      	movs	r2, #128	; 0x80
 8002416:	2120      	movs	r1, #32
 8002418:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2278      	movs	r2, #120	; 0x78
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b010      	add	sp, #64	; 0x40
 8002436:	bd80      	pop	{r7, pc}
 8002438:	01ffffff 	.word	0x01ffffff
 800243c:	fffffedf 	.word	0xfffffedf

08002440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	1dfb      	adds	r3, r7, #7
 800244e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002450:	e04b      	b.n	80024ea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3301      	adds	r3, #1
 8002456:	d048      	beq.n	80024ea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7fe f99a 	bl	8000790 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	429a      	cmp	r2, r3
 8002466:	d302      	bcc.n	800246e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04b      	b.n	800250a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2204      	movs	r2, #4
 800247a:	4013      	ands	r3, r2
 800247c:	d035      	beq.n	80024ea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2208      	movs	r2, #8
 8002486:	4013      	ands	r3, r2
 8002488:	2b08      	cmp	r3, #8
 800248a:	d111      	bne.n	80024b0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2208      	movs	r2, #8
 8002492:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	0018      	movs	r0, r3
 8002498:	f000 f83c 	bl	8002514 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2284      	movs	r2, #132	; 0x84
 80024a0:	2108      	movs	r1, #8
 80024a2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2278      	movs	r2, #120	; 0x78
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e02c      	b.n	800250a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	401a      	ands	r2, r3
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d112      	bne.n	80024ea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 f81f 	bl	8002514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2284      	movs	r2, #132	; 0x84
 80024da:	2120      	movs	r1, #32
 80024dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2278      	movs	r2, #120	; 0x78
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e00f      	b.n	800250a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	425a      	negs	r2, r3
 80024fa:	4153      	adcs	r3, r2
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	001a      	movs	r2, r3
 8002500:	1dfb      	adds	r3, r7, #7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d0a4      	beq.n	8002452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b004      	add	sp, #16
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08e      	sub	sp, #56	; 0x38
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251c:	f3ef 8310 	mrs	r3, PRIMASK
 8002520:	617b      	str	r3, [r7, #20]
  return(result);
 8002522:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4926      	ldr	r1, [pc, #152]	; (80025d8 <UART_EndRxTransfer+0xc4>)
 800253e:	400a      	ands	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002544:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f383 8810 	msr	PRIMASK, r3
}
 800254c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8310 	mrs	r3, PRIMASK
 8002552:	623b      	str	r3, [r7, #32]
  return(result);
 8002554:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
 8002558:	2301      	movs	r3, #1
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	f383 8810 	msr	PRIMASK, r3
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	438a      	bics	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	f383 8810 	msr	PRIMASK, r3
}
 800257e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	2b01      	cmp	r3, #1
 8002586:	d118      	bne.n	80025ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002588:	f3ef 8310 	mrs	r3, PRIMASK
 800258c:	60bb      	str	r3, [r7, #8]
  return(result);
 800258e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002592:	2301      	movs	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f383 8810 	msr	PRIMASK, r3
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2110      	movs	r1, #16
 80025aa:	438a      	bics	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f383 8810 	msr	PRIMASK, r3
}
 80025b8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	2120      	movs	r1, #32
 80025c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b00e      	add	sp, #56	; 0x38
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	fffffedf 	.word	0xfffffedf

080025dc <__libc_init_array>:
 80025dc:	b570      	push	{r4, r5, r6, lr}
 80025de:	2600      	movs	r6, #0
 80025e0:	4d0c      	ldr	r5, [pc, #48]	; (8002614 <__libc_init_array+0x38>)
 80025e2:	4c0d      	ldr	r4, [pc, #52]	; (8002618 <__libc_init_array+0x3c>)
 80025e4:	1b64      	subs	r4, r4, r5
 80025e6:	10a4      	asrs	r4, r4, #2
 80025e8:	42a6      	cmp	r6, r4
 80025ea:	d109      	bne.n	8002600 <__libc_init_array+0x24>
 80025ec:	2600      	movs	r6, #0
 80025ee:	f000 f821 	bl	8002634 <_init>
 80025f2:	4d0a      	ldr	r5, [pc, #40]	; (800261c <__libc_init_array+0x40>)
 80025f4:	4c0a      	ldr	r4, [pc, #40]	; (8002620 <__libc_init_array+0x44>)
 80025f6:	1b64      	subs	r4, r4, r5
 80025f8:	10a4      	asrs	r4, r4, #2
 80025fa:	42a6      	cmp	r6, r4
 80025fc:	d105      	bne.n	800260a <__libc_init_array+0x2e>
 80025fe:	bd70      	pop	{r4, r5, r6, pc}
 8002600:	00b3      	lsls	r3, r6, #2
 8002602:	58eb      	ldr	r3, [r5, r3]
 8002604:	4798      	blx	r3
 8002606:	3601      	adds	r6, #1
 8002608:	e7ee      	b.n	80025e8 <__libc_init_array+0xc>
 800260a:	00b3      	lsls	r3, r6, #2
 800260c:	58eb      	ldr	r3, [r5, r3]
 800260e:	4798      	blx	r3
 8002610:	3601      	adds	r6, #1
 8002612:	e7f2      	b.n	80025fa <__libc_init_array+0x1e>
 8002614:	08002684 	.word	0x08002684
 8002618:	08002684 	.word	0x08002684
 800261c:	08002684 	.word	0x08002684
 8002620:	08002688 	.word	0x08002688

08002624 <memset>:
 8002624:	0003      	movs	r3, r0
 8002626:	1882      	adds	r2, r0, r2
 8002628:	4293      	cmp	r3, r2
 800262a:	d100      	bne.n	800262e <memset+0xa>
 800262c:	4770      	bx	lr
 800262e:	7019      	strb	r1, [r3, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	e7f9      	b.n	8002628 <memset+0x4>

08002634 <_init>:
 8002634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263a:	bc08      	pop	{r3}
 800263c:	469e      	mov	lr, r3
 800263e:	4770      	bx	lr

08002640 <_fini>:
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002646:	bc08      	pop	{r3}
 8002648:	469e      	mov	lr, r3
 800264a:	4770      	bx	lr
