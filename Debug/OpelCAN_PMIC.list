
OpelCAN_PMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000421c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004318  08004318  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004318  08004318  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800431c  0800431c  0001431c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000020  08004340  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08004340  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c265  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e6  00000000  00000000  0002c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073d  00000000  00000000  0002ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e69  00000000  00000000  0002f69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb5b  00000000  00000000  00048506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b993  00000000  00000000  00055061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ffc  00000000  00000000  000e09f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e29f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042c4 	.word	0x080042c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	080042c4 	.word	0x080042c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <can_tx_set_hcan>:
uint8_t audio_album_len;

void _can_tx_send_msg(CAN_Tx_Msg_t *message);
void _can_tx_send_and_dequeue();

void can_tx_set_hcan(CAN_HandleTypeDef *hcan) {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	can_tx_hcan = *hcan;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <can_tx_set_hcan+0x3c>)
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800022e:	c313      	stmia	r3!, {r0, r1, r4}
 8000230:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000232:	c313      	stmia	r3!, {r0, r1, r4}
 8000234:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000236:	c313      	stmia	r3!, {r0, r1, r4}
 8000238:	6812      	ldr	r2, [r2, #0]
 800023a:	601a      	str	r2, [r3, #0]

	TxHeader.ExtId = 0x01;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <can_tx_set_hcan+0x40>)
 800023e:	2201      	movs	r2, #1
 8000240:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <can_tx_set_hcan+0x40>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <can_tx_set_hcan+0x40>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <can_tx_set_hcan+0x40>)
 8000250:	2200      	movs	r2, #0
 8000252:	751a      	strb	r2, [r3, #20]
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b003      	add	sp, #12
 800025a:	bd90      	pop	{r4, r7, pc}
 800025c:	2000003c 	.word	0x2000003c
 8000260:	20000064 	.word	0x20000064

08000264 <can_tx_send_packet>:
	memcpy(audio_album, buf, len);

	audio_album_len = len;
}

void can_tx_send_packet(uint32_t id, uint8_t *data, uint8_t len) {
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b08b      	sub	sp, #44	; 0x2c
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	1dfb      	adds	r3, r7, #7
 8000270:	701a      	strb	r2, [r3, #0]
	if (can_tx_head == can_tx_tail && can_tx_cts) {
 8000272:	4b33      	ldr	r3, [pc, #204]	; (8000340 <can_tx_send_packet+0xdc>)
 8000274:	781a      	ldrb	r2, [r3, #0]
 8000276:	4b33      	ldr	r3, [pc, #204]	; (8000344 <can_tx_send_packet+0xe0>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	429a      	cmp	r2, r3
 800027c:	d121      	bne.n	80002c2 <can_tx_send_packet+0x5e>
 800027e:	4b32      	ldr	r3, [pc, #200]	; (8000348 <can_tx_send_packet+0xe4>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d01d      	beq.n	80002c2 <can_tx_send_packet+0x5e>
		CAN_Tx_Msg_t msg = { .id = id, .len = len };
 8000286:	2414      	movs	r4, #20
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	2310      	movs	r3, #16
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f003 ffe0 	bl	8004256 <memset>
 8000296:	0020      	movs	r0, r4
 8000298:	183b      	adds	r3, r7, r0
 800029a:	68fa      	ldr	r2, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	183b      	adds	r3, r7, r0
 80002a0:	1dfa      	adds	r2, r7, #7
 80002a2:	7812      	ldrb	r2, [r2, #0]
 80002a4:	731a      	strb	r2, [r3, #12]

		memcpy(msg.data, data, len);
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781a      	ldrb	r2, [r3, #0]
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	0004      	movs	r4, r0
 80002ae:	183b      	adds	r3, r7, r0
 80002b0:	3304      	adds	r3, #4
 80002b2:	0018      	movs	r0, r3
 80002b4:	f003 fffc 	bl	80042b0 <memcpy>

		_can_tx_send_msg(&msg);
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 f872 	bl	80003a4 <_can_tx_send_msg>
 80002c0:	e03b      	b.n	800033a <can_tx_send_packet+0xd6>
		return;
	}

	uint8_t next;

	next = can_tx_head + 1; // next is where head will point to after this write.
 80002c2:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <can_tx_send_packet+0xdc>)
 80002c4:	781a      	ldrb	r2, [r3, #0]
 80002c6:	2127      	movs	r1, #39	; 0x27
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	3201      	adds	r2, #1
 80002cc:	701a      	strb	r2, [r3, #0]
	if (next >= CAN_MAILBOX_LENGTH)
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b17      	cmp	r3, #23
 80002d4:	d902      	bls.n	80002dc <can_tx_send_packet+0x78>
		next = 0;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]

	if (next == can_tx_tail) // if the head + 1 == tail, circular buffer is full
 80002dc:	4b19      	ldr	r3, [pc, #100]	; (8000344 <can_tx_send_packet+0xe0>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2427      	movs	r4, #39	; 0x27
 80002e2:	193a      	adds	r2, r7, r4
 80002e4:	7812      	ldrb	r2, [r2, #0]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d026      	beq.n	8000338 <can_tx_send_packet+0xd4>
		return;

	can_tx_mailbox[can_tx_head].id = id;
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <can_tx_send_packet+0xdc>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	001a      	movs	r2, r3
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <can_tx_send_packet+0xe8>)
 80002f2:	0112      	lsls	r2, r2, #4
 80002f4:	68f9      	ldr	r1, [r7, #12]
 80002f6:	50d1      	str	r1, [r2, r3]
	can_tx_mailbox[can_tx_head].len = len;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <can_tx_send_packet+0xdc>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4a13      	ldr	r2, [pc, #76]	; (800034c <can_tx_send_packet+0xe8>)
 80002fe:	011b      	lsls	r3, r3, #4
 8000300:	18d3      	adds	r3, r2, r3
 8000302:	330c      	adds	r3, #12
 8000304:	1dfa      	adds	r2, r7, #7
 8000306:	7812      	ldrb	r2, [r2, #0]
 8000308:	701a      	strb	r2, [r3, #0]
	memcpy(can_tx_mailbox[can_tx_head].data, data, len);
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <can_tx_send_packet+0xdc>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	011a      	lsls	r2, r3, #4
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <can_tx_send_packet+0xe8>)
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	1d18      	adds	r0, r3, #4
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781a      	ldrb	r2, [r3, #0]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	0019      	movs	r1, r3
 800031e:	f003 ffc7 	bl	80042b0 <memcpy>

	can_tx_head = next;
 8000322:	4b07      	ldr	r3, [pc, #28]	; (8000340 <can_tx_send_packet+0xdc>)
 8000324:	193a      	adds	r2, r7, r4
 8000326:	7812      	ldrb	r2, [r2, #0]
 8000328:	701a      	strb	r2, [r3, #0]

	if (can_tx_cts) {
 800032a:	4b07      	ldr	r3, [pc, #28]	; (8000348 <can_tx_send_packet+0xe4>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d003      	beq.n	800033a <can_tx_send_packet+0xd6>
		_can_tx_send_and_dequeue();
 8000332:	f000 f80d 	bl	8000350 <_can_tx_send_and_dequeue>
 8000336:	e000      	b.n	800033a <can_tx_send_packet+0xd6>
		return;
 8000338:	46c0      	nop			; (mov r8, r8)
	}
}
 800033a:	46bd      	mov	sp, r7
 800033c:	b00b      	add	sp, #44	; 0x2c
 800033e:	bd90      	pop	{r4, r7, pc}
 8000340:	20000208 	.word	0x20000208
 8000344:	20000209 	.word	0x20000209
 8000348:	20000000 	.word	0x20000000
 800034c:	20000088 	.word	0x20000088

08000350 <_can_tx_send_and_dequeue>:

void _can_tx_send_and_dequeue() {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
	int next;

	if (can_tx_head == can_tx_tail)  // if the head == tail, we don't have any data
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <_can_tx_send_and_dequeue+0x48>)
 8000358:	781a      	ldrb	r2, [r3, #0]
 800035a:	4b10      	ldr	r3, [pc, #64]	; (800039c <_can_tx_send_and_dequeue+0x4c>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	d015      	beq.n	800038e <_can_tx_send_and_dequeue+0x3e>
		return;

	next = can_tx_tail + 1;  // next is where tail will point to after this read.
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <_can_tx_send_and_dequeue+0x4c>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	3301      	adds	r3, #1
 8000368:	607b      	str	r3, [r7, #4]
	if (next >= CAN_MAILBOX_LENGTH)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2b17      	cmp	r3, #23
 800036e:	dd01      	ble.n	8000374 <_can_tx_send_and_dequeue+0x24>
		next = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	607b      	str	r3, [r7, #4]

	_can_tx_send_msg(&can_tx_mailbox[can_tx_tail]);  // Read data and then move
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <_can_tx_send_and_dequeue+0x4c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	011a      	lsls	r2, r3, #4
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <_can_tx_send_and_dequeue+0x50>)
 800037c:	18d3      	adds	r3, r2, r3
 800037e:	0018      	movs	r0, r3
 8000380:	f000 f810 	bl	80003a4 <_can_tx_send_msg>
	can_tx_tail = next;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	b2da      	uxtb	r2, r3
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <_can_tx_send_and_dequeue+0x4c>)
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e000      	b.n	8000390 <_can_tx_send_and_dequeue+0x40>
		return;
 800038e:	46c0      	nop			; (mov r8, r8)
}
 8000390:	46bd      	mov	sp, r7
 8000392:	b002      	add	sp, #8
 8000394:	bd80      	pop	{r7, pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	20000208 	.word	0x20000208
 800039c:	20000209 	.word	0x20000209
 80003a0:	20000088 	.word	0x20000088

080003a4 <_can_tx_send_msg>:

void _can_tx_send_msg(CAN_Tx_Msg_t *message) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	can_tx_cts = false;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <_can_tx_send_msg+0x50>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
	TxHeader.StdId = message->id;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <_can_tx_send_msg+0x54>)
 80003b8:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = message->len;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	7b1b      	ldrb	r3, [r3, #12]
 80003be:	001a      	movs	r2, r3
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <_can_tx_send_msg+0x54>)
 80003c2:	611a      	str	r2, [r3, #16]

	memcpy(TxData, message->data, message->len);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	1d19      	adds	r1, r3, #4
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	7b1b      	ldrb	r3, [r3, #12]
 80003cc:	001a      	movs	r2, r3
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <_can_tx_send_msg+0x58>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f003 ff6d 	bl	80042b0 <memcpy>

	if (HAL_CAN_AddTxMessage(&can_tx_hcan, &TxHeader, TxData, &TxMailbox)
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <_can_tx_send_msg+0x5c>)
 80003d8:	4a08      	ldr	r2, [pc, #32]	; (80003fc <_can_tx_send_msg+0x58>)
 80003da:	4907      	ldr	r1, [pc, #28]	; (80003f8 <_can_tx_send_msg+0x54>)
 80003dc:	4809      	ldr	r0, [pc, #36]	; (8000404 <_can_tx_send_msg+0x60>)
 80003de:	f000 ff7f 	bl	80012e0 <HAL_CAN_AddTxMessage>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <_can_tx_send_msg+0x46>
			!= HAL_OK) {
		Error_Handler();
 80003e6:	f000 faff 	bl	80009e8 <Error_Handler>
	}
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b002      	add	sp, #8
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	20000000 	.word	0x20000000
 80003f8:	20000064 	.word	0x20000064
 80003fc:	2000007c 	.word	0x2000007c
 8000400:	20000084 	.word	0x20000084
 8000404:	2000003c 	.word	0x2000003c

08000408 <HAL_CAN_TxMailbox0CompleteCallback>:



void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	can_tx_cts = true;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
	_can_tx_send_and_dequeue();
 8000416:	f7ff ff9b 	bl	8000350 <_can_tx_send_and_dequeue>
}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	20000000 	.word	0x20000000

08000428 <circ_buf_push_bytes>:
	c->buffer[c->head] = data;  // Load data and then move
	c->head = next;             // head to next data offset.
	return 0;  // return success to indicate successful push.
}

int circ_buf_push_bytes(circ_buf_t *c, uint8_t *data, int size) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b08a      	sub	sp, #40	; 0x28
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
	if (size > c->maxlen) {
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	429a      	cmp	r2, r3
 800043c:	dd02      	ble.n	8000444 <circ_buf_push_bytes+0x1c>
		return -1;
 800043e:	2301      	movs	r3, #1
 8000440:	425b      	negs	r3, r3
 8000442:	e06c      	b.n	800051e <circ_buf_push_bytes+0xf6>
	}

	int sizeToWrite = size;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	627b      	str	r3, [r7, #36]	; 0x24

	int maxSize = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
	if (c->tail > c-> head) {
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	689a      	ldr	r2, [r3, #8]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	429a      	cmp	r2, r3
 8000456:	dd07      	ble.n	8000468 <circ_buf_push_bytes+0x40>
		maxSize = c->tail - c->head - 1;
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	689a      	ldr	r2, [r3, #8]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	3b01      	subs	r3, #1
 8000464:	623b      	str	r3, [r7, #32]
 8000466:	e009      	b.n	800047c <circ_buf_push_bytes+0x54>
	}
	else {
		maxSize = c->maxlen - c->head + c->tail - 1;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	68da      	ldr	r2, [r3, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	1ad2      	subs	r2, r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	18d3      	adds	r3, r2, r3
 8000478:	3b01      	subs	r3, #1
 800047a:	623b      	str	r3, [r7, #32]
	}

	if (maxSize < sizeToWrite)
 800047c:	6a3a      	ldr	r2, [r7, #32]
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	429a      	cmp	r2, r3
 8000482:	da01      	bge.n	8000488 <circ_buf_push_bytes+0x60>
		sizeToWrite = maxSize;
 8000484:	6a3b      	ldr	r3, [r7, #32]
 8000486:	627b      	str	r3, [r7, #36]	; 0x24

	int firstBatch = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
	int secondBatch = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]

	if (c->head + sizeToWrite > c->maxlen) {
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000496:	18d2      	adds	r2, r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	429a      	cmp	r2, r3
 800049e:	dd0a      	ble.n	80004b6 <circ_buf_push_bytes+0x8e>
		firstBatch = c->maxlen - c->head;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	68da      	ldr	r2, [r3, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	61fb      	str	r3, [r7, #28]
		secondBatch = sizeToWrite - firstBatch;
 80004ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	61bb      	str	r3, [r7, #24]
 80004b4:	e001      	b.n	80004ba <circ_buf_push_bytes+0x92>
	} else {
		firstBatch = sizeToWrite;
 80004b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b8:	61fb      	str	r3, [r7, #28]
	}

	int data_ix = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
	memcpy(c->buffer + c->head, data, firstBatch);
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	18d3      	adds	r3, r2, r3
 80004c8:	69fa      	ldr	r2, [r7, #28]
 80004ca:	68b9      	ldr	r1, [r7, #8]
 80004cc:	0018      	movs	r0, r3
 80004ce:	f003 feef 	bl	80042b0 <memcpy>
	c->head += firstBatch;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	18d2      	adds	r2, r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	605a      	str	r2, [r3, #4]
	data_ix += firstBatch;
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	18d3      	adds	r3, r2, r3
 80004e4:	617b      	str	r3, [r7, #20]

	if (c->head >= c->maxlen)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	685a      	ldr	r2, [r3, #4]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	db02      	blt.n	80004f8 <circ_buf_push_bytes+0xd0>
		c->head = 0;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]

	if (secondBatch > 0) {
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	dd0e      	ble.n	800051c <circ_buf_push_bytes+0xf4>
		memcpy(c->buffer, data + data_ix, secondBatch);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6818      	ldr	r0, [r3, #0]
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	68ba      	ldr	r2, [r7, #8]
 8000506:	18d3      	adds	r3, r2, r3
 8000508:	69ba      	ldr	r2, [r7, #24]
 800050a:	0019      	movs	r1, r3
 800050c:	f003 fed0 	bl	80042b0 <memcpy>
		c->head += secondBatch;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	685a      	ldr	r2, [r3, #4]
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	18d2      	adds	r2, r2, r3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	605a      	str	r2, [r3, #4]
	}

	return sizeToWrite;
 800051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	b00a      	add	sp, #40	; 0x28
 8000524:	bd80      	pop	{r7, pc}

08000526 <circ_buf_pop>:

int circ_buf_pop(circ_buf_t *c) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
	int next;

	if (c->head == c->tail)  // if the head == tail, we don't have any data
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685a      	ldr	r2, [r3, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	429a      	cmp	r2, r3
 8000538:	d102      	bne.n	8000540 <circ_buf_pop+0x1a>
		return -1;
 800053a:	2301      	movs	r3, #1
 800053c:	425b      	negs	r3, r3
 800053e:	e018      	b.n	8000572 <circ_buf_pop+0x4c>

	next = c->tail + 1;  // next is where tail will point to after this read.
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	3301      	adds	r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
	if (next >= c->maxlen)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	429a      	cmp	r2, r3
 8000550:	db01      	blt.n	8000556 <circ_buf_pop+0x30>
		next = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]

	uint8_t val = c->buffer[c->tail];  // Read data and then move
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	18d2      	adds	r2, r2, r3
 8000560:	210b      	movs	r1, #11
 8000562:	187b      	adds	r3, r7, r1
 8000564:	7812      	ldrb	r2, [r2, #0]
 8000566:	701a      	strb	r2, [r3, #0]
	c->tail = next;              // tail to next offset.
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	609a      	str	r2, [r3, #8]
	return val;  // return success to indicate successful push.
 800056e:	187b      	adds	r3, r7, r1
 8000570:	781b      	ldrb	r3, [r3, #0]
}
 8000572:	0018      	movs	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	b004      	add	sp, #16
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <esp_reset>:

uint8_t msgCnt = 0;

void _esp_parse_command();

void esp_reset() {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	mode = UART_MODE_RESET;
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <esp_reset+0x10>)
 8000582:	22fe      	movs	r2, #254	; 0xfe
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000001 	.word	0x20000001

08000590 <esp_receive_uart>:

void esp_receive_uart() {
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
	int available = uart_data_available();
 8000596:	f000 fb83 	bl	8000ca0 <uart_data_available>
 800059a:	0003      	movs	r3, r0
 800059c:	60bb      	str	r3, [r7, #8]
	if (available) {
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d029      	beq.n	80005f8 <esp_receive_uart+0x68>
		uint8_t txdata[2] = { available & 0xFF, msgCnt };
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <esp_receive_uart+0x70>)
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	705a      	strb	r2, [r3, #1]
		can_tx_send_packet(0x001, txdata, 2);
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2202      	movs	r2, #2
 80005b8:	0019      	movs	r1, r3
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff fe52 	bl	8000264 <can_tx_send_packet>

		msgCnt++;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <esp_receive_uart+0x70>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <esp_receive_uart+0x70>)
 80005ca:	701a      	strb	r2, [r3, #0]

		uint8_t txdata2[1] = { 0x69 };
 80005cc:	003b      	movs	r3, r7
 80005ce:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <esp_receive_uart+0x74>)
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	701a      	strb	r2, [r3, #0]
		can_tx_send_packet(0x002, txdata2, 1);
 80005d4:	003b      	movs	r3, r7
 80005d6:	2201      	movs	r2, #1
 80005d8:	0019      	movs	r1, r3
 80005da:	2002      	movs	r0, #2
 80005dc:	f7ff fe42 	bl	8000264 <can_tx_send_packet>

		for (int i = 0; i < available; i++) {
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e004      	b.n	80005f0 <esp_receive_uart+0x60>
			uart_get_byte();
 80005e6:	f000 fb77 	bl	8000cd8 <uart_get_byte>
		for (int i = 0; i < available; i++) {
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3301      	adds	r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dbf6      	blt.n	80005e6 <esp_receive_uart+0x56>
		}
	}
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b004      	add	sp, #16
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000020a 	.word	0x2000020a
 8000604:	080042dc 	.word	0x080042dc

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fbce 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f812 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f93a 	bl	800088c <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 f91a 	bl	8000850 <MX_DMA_Init>
  MX_CAN_Init();
 800061c:	f000 f872 	bl	8000704 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f8e6 	bl	80007f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	uart_start(&huart1);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <main+0x2c>)
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fb20 	bl	8000c6c <uart_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		esp_receive_uart();
 800062c:	f7ff ffb0 	bl	8000590 <esp_receive_uart>
 8000630:	e7fc      	b.n	800062c <main+0x24>
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	20000234 	.word	0x20000234

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b099      	sub	sp, #100	; 0x64
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	242c      	movs	r4, #44	; 0x2c
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2334      	movs	r3, #52	; 0x34
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f003 fe04 	bl	8004256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064e:	231c      	movs	r3, #28
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2310      	movs	r3, #16
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f003 fdfc 	bl	8004256 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	2318      	movs	r3, #24
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f003 fdf5 	bl	8004256 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800066c:	0021      	movs	r1, r4
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2203      	movs	r2, #3
 8000672:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2201      	movs	r2, #1
 8000678:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2210      	movs	r2, #16
 8000684:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2202      	movs	r2, #2
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	0252      	lsls	r2, r2, #9
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	22e0      	movs	r2, #224	; 0xe0
 8000698:	0392      	lsls	r2, r2, #14
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV3;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2202      	movs	r2, #2
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fec9 	bl	800243c <HAL_RCC_OscConfig>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006ae:	f000 f99b 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	211c      	movs	r1, #28
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2207      	movs	r2, #7
 80006b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2202      	movs	r2, #2
 80006be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	00d2      	lsls	r2, r2, #3
 80006cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2101      	movs	r1, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 fa38 	bl	8002b48 <HAL_RCC_ClockConfig>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006dc:	f000 f984 	bl	80009e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2203      	movs	r2, #3
 80006ea:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	0018      	movs	r0, r3
 80006f0:	f002 fb96 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f8:	f000 f976 	bl	80009e8 <Error_Handler>
  }
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b019      	add	sp, #100	; 0x64
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800070a:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <MX_CAN_Init+0xe4>)
 800070c:	4a37      	ldr	r2, [pc, #220]	; (80007ec <MX_CAN_Init+0xe8>)
 800070e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 14;
 8000710:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_CAN_Init+0xe4>)
 8000712:	220e      	movs	r2, #14
 8000714:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <MX_CAN_Init+0xe4>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071c:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <MX_CAN_Init+0xe4>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <MX_CAN_Init+0xe4>)
 8000724:	22c0      	movs	r2, #192	; 0xc0
 8000726:	0312      	lsls	r2, r2, #12
 8000728:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <MX_CAN_Init+0xe4>)
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0352      	lsls	r2, r2, #13
 8000730:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_CAN_Init+0xe4>)
 8000734:	2200      	movs	r2, #0
 8000736:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_CAN_Init+0xe4>)
 800073a:	2201      	movs	r2, #1
 800073c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_CAN_Init+0xe4>)
 8000740:	2201      	movs	r2, #1
 8000742:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_CAN_Init+0xe4>)
 8000746:	2201      	movs	r2, #1
 8000748:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_CAN_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <MX_CAN_Init+0xe4>)
 8000752:	2200      	movs	r2, #0
 8000754:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_CAN_Init+0xe4>)
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fb8b 	bl	8000e74 <HAL_CAN_Init>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000762:	f000 f941 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

	can_tx_set_hcan(&hcan);
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_CAN_Init+0xe4>)
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fd59 	bl	8000220 <can_tx_set_hcan>

	sFilterConfig.FilterBank = 0;
 800076e:	003b      	movs	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800077a:	003b      	movs	r3, r7
 800077c:	2201      	movs	r2, #1
 800077e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000780:	003b      	movs	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000786:	003b      	movs	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800078c:	003b      	movs	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000792:	003b      	movs	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000798:	003b      	movs	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800079e:	003b      	movs	r3, r7
 80007a0:	2201      	movs	r2, #1
 80007a2:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80007a4:	003b      	movs	r3, r7
 80007a6:	220e      	movs	r2, #14
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80007aa:	003a      	movs	r2, r7
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_CAN_Init+0xe4>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fc5d 	bl	8001070 <HAL_CAN_ConfigFilter>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_CAN_Init+0xba>
		/* Filter configuration Error */
		Error_Handler();
 80007ba:	f000 f915 	bl	80009e8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_CAN_Init+0xe4>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fd47 	bl	8001254 <HAL_CAN_Start>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_CAN_Init+0xca>
		/* Start Error */
		Error_Handler();
 80007ca:	f000 f90d 	bl	80009e8 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_CAN_Init+0xe4>)
 80007d0:	2103      	movs	r1, #3
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 ff81 	bl	80016da <HAL_CAN_ActivateNotification>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_CAN_Init+0xdc>
		/* Notification Error */
		Error_Handler();
 80007dc:	f000 f904 	bl	80009e8 <Error_Handler>
	}
  /* USER CODE END CAN_Init 2 */

}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b00a      	add	sp, #40	; 0x28
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000020c 	.word	0x2000020c
 80007ec:	40006400 	.word	0x40006400

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART1_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <MX_USART1_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART1_UART_Init+0x58>)
 80007fc:	22e1      	movs	r2, #225	; 0xe1
 80007fe:	0252      	lsls	r2, r2, #9
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USART1_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000834:	0018      	movs	r0, r3
 8000836:	f002 fbe1 	bl	8002ffc <HAL_UART_Init>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f8d3 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000234 	.word	0x20000234
 800084c:	40013800 	.word	0x40013800

08000850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_DMA_Init+0x38>)
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_DMA_Init+0x38>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_DMA_Init+0x38>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	200a      	movs	r0, #10
 8000874:	f001 fa14 	bl	8001ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000878:	200a      	movs	r0, #10
 800087a:	f001 fa26 	bl	8001cca <HAL_NVIC_EnableIRQ>

}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40021000 	.word	0x40021000

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	240c      	movs	r4, #12
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0018      	movs	r0, r3
 8000898:	2314      	movs	r3, #20
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f003 fcda 	bl	8004256 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_GPIO_Init+0xa0>)
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_GPIO_Init+0xa0>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	03c9      	lsls	r1, r1, #15
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_GPIO_Init+0xa0>)
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	03db      	lsls	r3, r3, #15
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_GPIO_Init+0xa0>)
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_GPIO_Init+0xa0>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	0289      	lsls	r1, r1, #10
 80008c8:	430a      	orrs	r2, r1
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_GPIO_Init+0xa0>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	029b      	lsls	r3, r3, #10
 80008d4:	4013      	ands	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	0059      	lsls	r1, r3, #1
 80008de:	2390      	movs	r3, #144	; 0x90
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	2201      	movs	r2, #1
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 fd8b 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	0219      	lsls	r1, r3, #8
 80008ee:	2390      	movs	r3, #144	; 0x90
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2200      	movs	r2, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fd83 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_LP_Pin BUCK_EN_Pin */
  GPIO_InitStruct.Pin = CAN_LP_Pin|BUCK_EN_Pin;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2281      	movs	r2, #129	; 0x81
 80008fe:	0212      	lsls	r2, r2, #8
 8000900:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2201      	movs	r2, #1
 8000906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	193a      	adds	r2, r7, r4
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fc07 	bl	8002130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b009      	add	sp, #36	; 0x24
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hCan) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hCan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800093a:	4a13      	ldr	r2, [pc, #76]	; (8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	2100      	movs	r1, #0
 8000940:	f000 fda0 	bl	8001484 <HAL_CAN_GetRxMessage>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
		/* Reception Error */
		Error_Handler();
 8000948:	f000 f84e 	bl	80009e8 <Error_Handler>
	}

	if ((RxHeader.StdId == OPEL_POWER_ID) && (RxHeader.IDE == CAN_ID_STD)
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d112      	bne.n	800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10e      	bne.n	800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			&& (RxHeader.DLC == 8)) {
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	2b08      	cmp	r3, #8
 8000964:	d10a      	bne.n	800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		if (RxData[6] & 0x40) {
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000968:	799b      	ldrb	r3, [r3, #6]
 800096a:	001a      	movs	r2, r3
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	4013      	ands	r3, r2
 8000970:	d002      	beq.n	8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			Audio_Start();
 8000972:	f000 f80d 	bl	8000990 <Audio_Start>
		} else {
			Audio_Kill();
		}
	}
}
 8000976:	e001      	b.n	800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			Audio_Kill();
 8000978:	f000 f81f 	bl	80009ba <Audio_Kill>
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000031c 	.word	0x2000031c
 8000988:	20000300 	.word	0x20000300
 800098c:	00000501 	.word	0x00000501

08000990 <Audio_Start>:

void Audio_Start() {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	0219      	lsls	r1, r3, #8
 8000998:	2390      	movs	r3, #144	; 0x90
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	2201      	movs	r2, #1
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fd2e 	bl	8002400 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_RESET);
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	0059      	lsls	r1, r3, #1
 80009a8:	2390      	movs	r3, #144	; 0x90
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	2200      	movs	r2, #0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 fd26 	bl	8002400 <HAL_GPIO_WritePin>
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <Audio_Kill>:

void Audio_Kill() {
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	0059      	lsls	r1, r3, #1
 80009c2:	2390      	movs	r3, #144	; 0x90
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2201      	movs	r2, #1
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 fd19 	bl	8002400 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	0219      	lsls	r1, r3, #8
 80009d2:	2390      	movs	r3, #144	; 0x90
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	2200      	movs	r2, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 fd11 	bl	8002400 <HAL_GPIO_WritePin>

	esp_reset();
 80009de:	f7ff fdcd 	bl	800057c <esp_reset>
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	619a      	str	r2, [r3, #24]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	69da      	ldr	r2, [r3, #28]
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0549      	lsls	r1, r1, #21
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	61da      	str	r2, [r3, #28]
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_MspInit+0x44>)
 8000a22:	69da      	ldr	r2, [r3, #28]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	055b      	lsls	r3, r3, #21
 8000a28:	4013      	ands	r3, r2
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b08b      	sub	sp, #44	; 0x2c
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	2414      	movs	r4, #20
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f003 fc01 	bl	8004256 <memset>
  if(hcan->Instance==CAN)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <HAL_CAN_MspInit+0xa4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d13b      	bne.n	8000ad6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <HAL_CAN_MspInit+0xa8>)
 8000a60:	69da      	ldr	r2, [r3, #28]
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_CAN_MspInit+0xa8>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0489      	lsls	r1, r1, #18
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	61da      	str	r2, [r3, #28]
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_CAN_MspInit+0xa8>)
 8000a6e:	69da      	ldr	r2, [r3, #28]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	049b      	lsls	r3, r3, #18
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <HAL_CAN_MspInit+0xa8>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_CAN_MspInit+0xa8>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0289      	lsls	r1, r1, #10
 8000a84:	430a      	orrs	r2, r1
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_CAN_MspInit+0xa8>)
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	029b      	lsls	r3, r3, #10
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	22c0      	movs	r2, #192	; 0xc0
 8000a9a:	0152      	lsls	r2, r2, #5
 8000a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	0021      	movs	r1, r4
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2203      	movs	r2, #3
 8000ab0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	187a      	adds	r2, r7, r1
 8000aba:	2390      	movs	r3, #144	; 0x90
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	0011      	movs	r1, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f001 fb35 	bl	8002130 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	201e      	movs	r0, #30
 8000acc:	f001 f8e8 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000ad0:	201e      	movs	r0, #30
 8000ad2:	f001 f8fa 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b00b      	add	sp, #44	; 0x2c
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40006400 	.word	0x40006400
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b08b      	sub	sp, #44	; 0x2c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	2414      	movs	r4, #20
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	0018      	movs	r0, r3
 8000af6:	2314      	movs	r3, #20
 8000af8:	001a      	movs	r2, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	f003 fbab 	bl	8004256 <memset>
  if(huart->Instance==USART1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a34      	ldr	r2, [pc, #208]	; (8000bd8 <HAL_UART_MspInit+0xf0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d161      	bne.n	8000bce <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <HAL_UART_MspInit+0xf4>)
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <HAL_UART_MspInit+0xf4>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	01c9      	lsls	r1, r1, #7
 8000b14:	430a      	orrs	r2, r1
 8000b16:	619a      	str	r2, [r3, #24]
 8000b18:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <HAL_UART_MspInit+0xf4>)
 8000b1a:	699a      	ldr	r2, [r3, #24]
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	01db      	lsls	r3, r3, #7
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <HAL_UART_MspInit+0xf4>)
 8000b28:	695a      	ldr	r2, [r3, #20]
 8000b2a:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <HAL_UART_MspInit+0xf4>)
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	0289      	lsls	r1, r1, #10
 8000b30:	430a      	orrs	r2, r1
 8000b32:	615a      	str	r2, [r3, #20]
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <HAL_UART_MspInit+0xf4>)
 8000b36:	695a      	ldr	r2, [r3, #20]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	029b      	lsls	r3, r3, #10
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	22c0      	movs	r2, #192	; 0xc0
 8000b46:	00d2      	lsls	r2, r2, #3
 8000b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	0021      	movs	r1, r4
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2202      	movs	r2, #2
 8000b50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2201      	movs	r2, #1
 8000b62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	187a      	adds	r2, r7, r1
 8000b66:	2390      	movs	r3, #144	; 0x90
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f001 fadf 	bl	8002130 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000b74:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <HAL_UART_MspInit+0xfc>)
 8000b76:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 f8ad 	bl	8001d04 <HAL_DMA_Init>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000bae:	f7ff ff1b 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000bb6:	675a      	str	r2, [r3, #116]	; 0x74
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_UART_MspInit+0xf8>)
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	201b      	movs	r0, #27
 8000bc4:	f001 f86c 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bc8:	201b      	movs	r0, #27
 8000bca:	f001 f87e 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b00b      	add	sp, #44	; 0x2c
 8000bd4:	bd90      	pop	{r4, r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	200002bc 	.word	0x200002bc
 8000be4:	40020030 	.word	0x40020030

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f916 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <DMA1_Channel2_3_IRQHandler+0x14>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f001 f99b 	bl	8001f5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	200002bc 	.word	0x200002bc

08000c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <USART1_IRQHandler+0x14>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 fa34 	bl	80030a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	20000234 	.word	0x20000234

08000c48 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <CEC_CAN_IRQHandler+0x14>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 fd6d 	bl	800172e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	2000020c 	.word	0x2000020c

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <uart_start>:
uint8_t uart_byte_buf[UART_BUFFER_SIZE];
UART_HandleTypeDef uart_huart;

CIRC_BUF_DEF(uart_ring_buf, UART_RING_BUFFER_SIZE);

void uart_start(UART_HandleTypeDef *uart) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	uart_huart = *uart;
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <uart_start+0x2c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	0010      	movs	r0, r2
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	2388      	movs	r3, #136	; 0x88
 8000c7e:	001a      	movs	r2, r3
 8000c80:	f003 fb16 	bl	80042b0 <memcpy>
	HAL_UARTEx_ReceiveToIdle_DMA(uart, uart_byte_buf, UART_BUFFER_SIZE);
 8000c84:	4905      	ldr	r1, [pc, #20]	; (8000c9c <uart_start+0x30>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2220      	movs	r2, #32
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f003 fa7b 	bl	8004186 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000344 	.word	0x20000344
 8000c9c:	20000324 	.word	0x20000324

08000ca0 <uart_data_available>:
void uart_interrupt(UART_HandleTypeDef *uart, uint16_t Size) {


}

int uart_data_available() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	if (uart_ring_buf.head >= uart_ring_buf.tail)
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <uart_data_available+0x34>)
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <uart_data_available+0x34>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	db05      	blt.n	8000cbc <uart_data_available+0x1c>
		return uart_ring_buf.head - uart_ring_buf.tail;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <uart_data_available+0x34>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <uart_data_available+0x34>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	e007      	b.n	8000ccc <uart_data_available+0x2c>

	return uart_ring_buf.maxlen - (uart_ring_buf.tail - uart_ring_buf.head);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <uart_data_available+0x34>)
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <uart_data_available+0x34>)
 8000cc2:	6899      	ldr	r1, [r3, #8]
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <uart_data_available+0x34>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	1ad3      	subs	r3, r2, r3
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <uart_get_byte>:

int uart_get_byte() {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	return circ_buf_pop(&uart_ring_buf);
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <uart_get_byte+0x14>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff fc21 	bl	8000526 <circ_buf_pop>
 8000ce4:	0003      	movs	r3, r0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	000a      	movs	r2, r1
 8000cfa:	1cbb      	adds	r3, r7, #2
 8000cfc:	801a      	strh	r2, [r3, #0]
	circ_buf_push_bytes(&uart_ring_buf, uart_byte_buf, Size);
 8000cfe:	1cbb      	adds	r3, r7, #2
 8000d00:	881a      	ldrh	r2, [r3, #0]
 8000d02:	4907      	ldr	r1, [pc, #28]	; (8000d20 <HAL_UARTEx_RxEventCallback+0x30>)
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_UARTEx_RxEventCallback+0x34>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff fb8e 	bl	8000428 <circ_buf_push_bytes>
	HAL_UARTEx_ReceiveToIdle_DMA(huart, uart_byte_buf, UART_BUFFER_SIZE);
 8000d0c:	4904      	ldr	r1, [pc, #16]	; (8000d20 <HAL_UARTEx_RxEventCallback+0x30>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2220      	movs	r2, #32
 8000d12:	0018      	movs	r0, r3
 8000d14:	f003 fa37 	bl	8004186 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000324 	.word	0x20000324
 8000d24:	20000008 	.word	0x20000008

08000d28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d2c:	f7ff ff98 	bl	8000c60 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000d30:	4812      	ldr	r0, [pc, #72]	; (8000d7c <LoopForever+0x6>)
    LDR R1, [R0]
 8000d32:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d34:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <LoopForever+0xa>)
    CMP R1, R2
 8000d38:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d3a:	d105      	bne.n	8000d48 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d3e:	4912      	ldr	r1, [pc, #72]	; (8000d88 <LoopForever+0x12>)
    STR R1, [R0]
 8000d40:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d44:	4912      	ldr	r1, [pc, #72]	; (8000d90 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d46:	6001      	str	r1, [r0, #0]

08000d48 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	4812      	ldr	r0, [pc, #72]	; (8000d94 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d4a:	4913      	ldr	r1, [pc, #76]	; (8000d98 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <LoopForever+0x26>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d60:	4c10      	ldr	r4, [pc, #64]	; (8000da4 <LoopForever+0x2e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d6e:	f003 fa7b 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d72:	f7ff fc49 	bl	8000608 <main>

08000d76 <LoopForever>:

LoopForever:
    b LoopForever
 8000d76:	e7fe      	b.n	8000d76 <LoopForever>
  ldr   r0, =_estack
 8000d78:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000d7c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000d80:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000d84:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000d88:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000d8c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000d90:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000d9c:	08004320 	.word	0x08004320
  ldr r2, =_sbss
 8000da0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000da4:	200004d0 	.word	0x200004d0

08000da8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_IRQHandler>
	...

08000dac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_Init+0x24>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_Init+0x24>)
 8000db6:	2110      	movs	r1, #16
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f809 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc2:	f7ff fe17 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_InitTick+0x5c>)
 8000dde:	681c      	ldr	r4, [r3, #0]
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_InitTick+0x60>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	0019      	movs	r1, r3
 8000de6:	23fa      	movs	r3, #250	; 0xfa
 8000de8:	0098      	lsls	r0, r3, #2
 8000dea:	f7ff f98d 	bl	8000108 <__udivsi3>
 8000dee:	0003      	movs	r3, r0
 8000df0:	0019      	movs	r1, r3
 8000df2:	0020      	movs	r0, r4
 8000df4:	f7ff f988 	bl	8000108 <__udivsi3>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 ff75 	bl	8001cea <HAL_SYSTICK_Config>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e00f      	b.n	8000e28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d80b      	bhi.n	8000e26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	2301      	movs	r3, #1
 8000e12:	425b      	negs	r3, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 ff42 	bl	8001ca0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_InitTick+0x64>)
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b003      	add	sp, #12
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	20000004 	.word	0x20000004
 8000e34:	2000001c 	.word	0x2000001c
 8000e38:	20000018 	.word	0x20000018

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	18d2      	adds	r2, r2, r3
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	2000001c 	.word	0x2000001c
 8000e5c:	200004cc 	.word	0x200004cc

08000e60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	200004cc 	.word	0x200004cc

08000e74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e0f0      	b.n	8001068 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2220      	movs	r2, #32
 8000e8a:	5c9b      	ldrb	r3, [r3, r2]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d103      	bne.n	8000e9a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff fdd1 	bl	8000a3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eaa:	f7ff ffd9 	bl	8000e60 <HAL_GetTick>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eb2:	e013      	b.n	8000edc <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eb4:	f7ff ffd4 	bl	8000e60 <HAL_GetTick>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b0a      	cmp	r3, #10
 8000ec0:	d90c      	bls.n	8000edc <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	0292      	lsls	r2, r2, #10
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0c5      	b.n	8001068 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d0e5      	beq.n	8000eb4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	438a      	bics	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ef8:	f7ff ffb2 	bl	8000e60 <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f00:	e013      	b.n	8000f2a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f02:	f7ff ffad 	bl	8000e60 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b0a      	cmp	r3, #10
 8000f0e:	d90c      	bls.n	8000f2a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	0292      	lsls	r2, r2, #10
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2220      	movs	r2, #32
 8000f22:	2105      	movs	r1, #5
 8000f24:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e09e      	b.n	8001068 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2202      	movs	r2, #2
 8000f32:	4013      	ands	r3, r2
 8000f34:	d1e5      	bne.n	8000f02 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7e1b      	ldrb	r3, [r3, #24]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d108      	bne.n	8000f50 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e007      	b.n	8000f60 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7e5b      	ldrb	r3, [r3, #25]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d108      	bne.n	8000f7a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e007      	b.n	8000f8a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	438a      	bics	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7e9b      	ldrb	r3, [r3, #26]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d108      	bne.n	8000fa4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e007      	b.n	8000fb4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2120      	movs	r1, #32
 8000fb0:	438a      	bics	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7edb      	ldrb	r3, [r3, #27]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d108      	bne.n	8000fce <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	438a      	bics	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e007      	b.n	8000fde <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2110      	movs	r1, #16
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7f1b      	ldrb	r3, [r3, #28]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d108      	bne.n	8000ff8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e007      	b.n	8001008 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2108      	movs	r1, #8
 8001004:	438a      	bics	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f5b      	ldrb	r3, [r3, #29]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d108      	bne.n	8001022 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2104      	movs	r1, #4
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e007      	b.n	8001032 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2104      	movs	r1, #4
 800102e:	438a      	bics	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	431a      	orrs	r2, r3
 8001048:	0011      	movs	r1, r2
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	1e5a      	subs	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2220      	movs	r2, #32
 8001062:	2101      	movs	r1, #1
 8001064:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b004      	add	sp, #16
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001080:	2013      	movs	r0, #19
 8001082:	183b      	adds	r3, r7, r0
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	2120      	movs	r1, #32
 8001088:	5c52      	ldrb	r2, [r2, r1]
 800108a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800108c:	0002      	movs	r2, r0
 800108e:	18bb      	adds	r3, r7, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d004      	beq.n	80010a0 <HAL_CAN_ConfigFilter+0x30>
 8001096:	18bb      	adds	r3, r7, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d000      	beq.n	80010a0 <HAL_CAN_ConfigFilter+0x30>
 800109e:	e0cd      	b.n	800123c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	58d3      	ldr	r3, [r2, r3]
 80010a8:	2201      	movs	r2, #1
 80010aa:	431a      	orrs	r2, r3
 80010ac:	0011      	movs	r1, r2
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	221f      	movs	r2, #31
 80010bc:	4013      	ands	r3, r2
 80010be:	2201      	movs	r2, #1
 80010c0:	409a      	lsls	r2, r3
 80010c2:	0013      	movs	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	2387      	movs	r3, #135	; 0x87
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	58d3      	ldr	r3, [r2, r3]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	43d2      	mvns	r2, r2
 80010d2:	401a      	ands	r2, r3
 80010d4:	0011      	movs	r1, r2
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	2387      	movs	r3, #135	; 0x87
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d129      	bne.n	800113a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	2383      	movs	r3, #131	; 0x83
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	58d3      	ldr	r3, [r2, r3]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	43d2      	mvns	r2, r2
 80010f2:	401a      	ands	r2, r3
 80010f4:	0011      	movs	r1, r2
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	2383      	movs	r3, #131	; 0x83
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	041b      	lsls	r3, r3, #16
 800110a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001110:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3248      	adds	r2, #72	; 0x48
 8001116:	00d2      	lsls	r2, r2, #3
 8001118:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800112c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	3348      	adds	r3, #72	; 0x48
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	18cb      	adds	r3, r1, r3
 8001136:	3304      	adds	r3, #4
 8001138:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d128      	bne.n	8001194 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	2383      	movs	r3, #131	; 0x83
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	58d2      	ldr	r2, [r2, r3]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	431a      	orrs	r2, r3
 800114e:	0011      	movs	r1, r2
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	2383      	movs	r3, #131	; 0x83
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	041b      	lsls	r3, r3, #16
 8001164:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800116a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3248      	adds	r2, #72	; 0x48
 8001170:	00d2      	lsls	r2, r2, #3
 8001172:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	041b      	lsls	r3, r3, #16
 8001180:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001186:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001188:	6979      	ldr	r1, [r7, #20]
 800118a:	3348      	adds	r3, #72	; 0x48
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	18cb      	adds	r3, r1, r3
 8001190:	3304      	adds	r3, #4
 8001192:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10c      	bne.n	80011b6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	2381      	movs	r3, #129	; 0x81
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	58d3      	ldr	r3, [r2, r3]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	43d2      	mvns	r2, r2
 80011a8:	401a      	ands	r2, r3
 80011aa:	0011      	movs	r1, r2
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	2381      	movs	r3, #129	; 0x81
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	50d1      	str	r1, [r2, r3]
 80011b4:	e00a      	b.n	80011cc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	2381      	movs	r3, #129	; 0x81
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	58d2      	ldr	r2, [r2, r3]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	0011      	movs	r1, r2
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	2381      	movs	r3, #129	; 0x81
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10c      	bne.n	80011ee <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	2385      	movs	r3, #133	; 0x85
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	58d3      	ldr	r3, [r2, r3]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	43d2      	mvns	r2, r2
 80011e0:	401a      	ands	r2, r3
 80011e2:	0011      	movs	r1, r2
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	2385      	movs	r3, #133	; 0x85
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	50d1      	str	r1, [r2, r3]
 80011ec:	e00a      	b.n	8001204 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	2385      	movs	r3, #133	; 0x85
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	58d2      	ldr	r2, [r2, r3]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	0011      	movs	r1, r2
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	2385      	movs	r3, #133	; 0x85
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d10a      	bne.n	8001222 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	2387      	movs	r3, #135	; 0x87
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	58d2      	ldr	r2, [r2, r3]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	431a      	orrs	r2, r3
 8001218:	0011      	movs	r1, r2
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	2387      	movs	r3, #135	; 0x87
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	58d3      	ldr	r3, [r2, r3]
 800122a:	2201      	movs	r2, #1
 800122c:	4393      	bics	r3, r2
 800122e:	0019      	movs	r1, r3
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	e007      	b.n	800124c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	02d2      	lsls	r2, r2, #11
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
  }
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b006      	add	sp, #24
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2220      	movs	r2, #32
 8001260:	5c9b      	ldrb	r3, [r3, r2]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d12f      	bne.n	80012c8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2220      	movs	r2, #32
 800126c:	2102      	movs	r1, #2
 800126e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2101      	movs	r1, #1
 800127c:	438a      	bics	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001280:	f7ff fdee 	bl	8000e60 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001288:	e013      	b.n	80012b2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800128a:	f7ff fde9 	bl	8000e60 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b0a      	cmp	r3, #10
 8001296:	d90c      	bls.n	80012b2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	0292      	lsls	r2, r2, #10
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2220      	movs	r2, #32
 80012aa:	2105      	movs	r1, #5
 80012ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e012      	b.n	80012d8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	4013      	ands	r3, r2
 80012bc:	d1e5      	bne.n	800128a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e007      	b.n	80012d8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	0312      	lsls	r2, r2, #12
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
  }
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b004      	add	sp, #16
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ee:	201f      	movs	r0, #31
 80012f0:	183b      	adds	r3, r7, r0
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	2120      	movs	r1, #32
 80012f6:	5c52      	ldrb	r2, [r2, r1]
 80012f8:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001302:	183b      	adds	r3, r7, r0
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d004      	beq.n	8001314 <HAL_CAN_AddTxMessage+0x34>
 800130a:	183b      	adds	r3, r7, r0
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d000      	beq.n	8001314 <HAL_CAN_AddTxMessage+0x34>
 8001312:	e0ab      	b.n	800146c <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	04db      	lsls	r3, r3, #19
 800131a:	4013      	ands	r3, r2
 800131c:	d10a      	bne.n	8001334 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	051b      	lsls	r3, r3, #20
 8001324:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001326:	d105      	bne.n	8001334 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	055b      	lsls	r3, r3, #21
 800132e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001330:	d100      	bne.n	8001334 <HAL_CAN_AddTxMessage+0x54>
 8001332:	e092      	b.n	800145a <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	0e1b      	lsrs	r3, r3, #24
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800133e:	2201      	movs	r2, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10c      	bne.n	800136a <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4311      	orrs	r1, r2
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	3218      	adds	r2, #24
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	50d1      	str	r1, [r2, r3]
 8001368:	e00f      	b.n	800138a <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001374:	431a      	orrs	r2, r3
 8001376:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001380:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	3218      	adds	r2, #24
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6819      	ldr	r1, [r3, #0]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3318      	adds	r3, #24
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	18cb      	adds	r3, r1, r3
 800139a:	3304      	adds	r3, #4
 800139c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	7d1b      	ldrb	r3, [r3, #20]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d112      	bne.n	80013cc <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3318      	adds	r3, #24
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	18d3      	adds	r3, r2, r3
 80013b2:	3304      	adds	r3, #4
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	431a      	orrs	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3318      	adds	r3, #24
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	18cb      	adds	r3, r1, r3
 80013c8:	3304      	adds	r3, #4
 80013ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3307      	adds	r3, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	061a      	lsls	r2, r3, #24
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3306      	adds	r3, #6
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	041b      	lsls	r3, r3, #16
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3305      	adds	r3, #5
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3304      	adds	r3, #4
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0019      	movs	r1, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	23c6      	movs	r3, #198	; 0xc6
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	0109      	lsls	r1, r1, #4
 80013fe:	1841      	adds	r1, r0, r1
 8001400:	18cb      	adds	r3, r1, r3
 8001402:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3303      	adds	r3, #3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	061a      	lsls	r2, r3, #24
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3302      	adds	r3, #2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3301      	adds	r3, #1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	0019      	movs	r1, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	6979      	ldr	r1, [r7, #20]
 800142e:	23c4      	movs	r3, #196	; 0xc4
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	0109      	lsls	r1, r1, #4
 8001434:	1841      	adds	r1, r0, r1
 8001436:	18cb      	adds	r3, r1, r3
 8001438:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	3218      	adds	r2, #24
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	58d2      	ldr	r2, [r2, r3]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2101      	movs	r1, #1
 800144c:	4311      	orrs	r1, r2
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	3218      	adds	r2, #24
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e010      	b.n	800147c <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	0392      	lsls	r2, r2, #14
 8001462:	431a      	orrs	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e007      	b.n	800147c <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	02d2      	lsls	r2, r2, #11
 8001474:	431a      	orrs	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
  }
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	b008      	add	sp, #32
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001492:	2017      	movs	r0, #23
 8001494:	183b      	adds	r3, r7, r0
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	2120      	movs	r1, #32
 800149a:	5c52      	ldrb	r2, [r2, r1]
 800149c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800149e:	0002      	movs	r2, r0
 80014a0:	18bb      	adds	r3, r7, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d004      	beq.n	80014b2 <HAL_CAN_GetRxMessage+0x2e>
 80014a8:	18bb      	adds	r3, r7, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d000      	beq.n	80014b2 <HAL_CAN_GetRxMessage+0x2e>
 80014b0:	e107      	b.n	80016c2 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10e      	bne.n	80014d6 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2203      	movs	r2, #3
 80014c0:	4013      	ands	r3, r2
 80014c2:	d117      	bne.n	80014f4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	0392      	lsls	r2, r2, #14
 80014cc:	431a      	orrs	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0fd      	b.n	80016d2 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2203      	movs	r2, #3
 80014de:	4013      	ands	r3, r2
 80014e0:	d108      	bne.n	80014f4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	0392      	lsls	r2, r2, #14
 80014ea:	431a      	orrs	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0ee      	b.n	80016d2 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	321b      	adds	r2, #27
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	58d3      	ldr	r3, [r2, r3]
 8001500:	2204      	movs	r2, #4
 8001502:	401a      	ands	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10b      	bne.n	8001528 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	321b      	adds	r2, #27
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	58d3      	ldr	r3, [r2, r3]
 800151c:	0d5b      	lsrs	r3, r3, #21
 800151e:	055b      	lsls	r3, r3, #21
 8001520:	0d5a      	lsrs	r2, r3, #21
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e00a      	b.n	800153e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	321b      	adds	r2, #27
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	58d3      	ldr	r3, [r2, r3]
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	321b      	adds	r2, #27
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	58d3      	ldr	r3, [r2, r3]
 800154a:	2202      	movs	r2, #2
 800154c:	401a      	ands	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	331b      	adds	r3, #27
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	18d3      	adds	r3, r2, r3
 800155e:	3304      	adds	r3, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2208      	movs	r2, #8
 8001564:	4013      	ands	r3, r2
 8001566:	d003      	beq.n	8001570 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2208      	movs	r2, #8
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	e00b      	b.n	8001588 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	331b      	adds	r3, #27
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	18d3      	adds	r3, r2, r3
 800157c:	3304      	adds	r3, #4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	220f      	movs	r2, #15
 8001582:	401a      	ands	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	331b      	adds	r3, #27
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	18d3      	adds	r3, r2, r3
 8001594:	3304      	adds	r3, #4
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	22ff      	movs	r2, #255	; 0xff
 800159c:	401a      	ands	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	331b      	adds	r3, #27
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	18d3      	adds	r3, r2, r3
 80015ae:	3304      	adds	r3, #4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	0c1b      	lsrs	r3, r3, #16
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	0c1a      	lsrs	r2, r3, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	23dc      	movs	r3, #220	; 0xdc
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	188a      	adds	r2, r1, r2
 80015ca:	18d3      	adds	r3, r2, r3
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	23dc      	movs	r3, #220	; 0xdc
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	188a      	adds	r2, r1, r2
 80015e2:	18d3      	adds	r3, r2, r3
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0a1a      	lsrs	r2, r3, #8
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6819      	ldr	r1, [r3, #0]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	23dc      	movs	r3, #220	; 0xdc
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	188a      	adds	r2, r1, r2
 80015fe:	18d3      	adds	r3, r2, r3
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0c1a      	lsrs	r2, r3, #16
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3302      	adds	r3, #2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	23dc      	movs	r3, #220	; 0xdc
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	188a      	adds	r2, r1, r2
 800161a:	18d3      	adds	r3, r2, r3
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0e1a      	lsrs	r2, r3, #24
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3303      	adds	r3, #3
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	23de      	movs	r3, #222	; 0xde
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	188a      	adds	r2, r1, r2
 8001636:	18d3      	adds	r3, r2, r3
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	3304      	adds	r3, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	23de      	movs	r3, #222	; 0xde
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	188a      	adds	r2, r1, r2
 8001650:	18d3      	adds	r3, r2, r3
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0a1a      	lsrs	r2, r3, #8
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3305      	adds	r3, #5
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	23de      	movs	r3, #222	; 0xde
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	188a      	adds	r2, r1, r2
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0c1a      	lsrs	r2, r3, #16
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3306      	adds	r3, #6
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	23de      	movs	r3, #222	; 0xde
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	188a      	adds	r2, r1, r2
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0e1a      	lsrs	r2, r3, #24
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3307      	adds	r3, #7
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d108      	bne.n	80016ae <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2120      	movs	r1, #32
 80016a8:	430a      	orrs	r2, r1
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	e007      	b.n	80016be <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2120      	movs	r1, #32
 80016ba:	430a      	orrs	r2, r1
 80016bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e007      	b.n	80016d2 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	02d2      	lsls	r2, r2, #11
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
  }
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b006      	add	sp, #24
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016e4:	200f      	movs	r0, #15
 80016e6:	183b      	adds	r3, r7, r0
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	2120      	movs	r1, #32
 80016ec:	5c52      	ldrb	r2, [r2, r1]
 80016ee:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016f0:	0002      	movs	r2, r0
 80016f2:	18bb      	adds	r3, r7, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d003      	beq.n	8001702 <HAL_CAN_ActivateNotification+0x28>
 80016fa:	18bb      	adds	r3, r7, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d109      	bne.n	8001716 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6959      	ldr	r1, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e007      	b.n	8001726 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	02d2      	lsls	r2, r2, #11
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
  }
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b08a      	sub	sp, #40	; 0x28
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	2201      	movs	r2, #1
 800176e:	4013      	ands	r3, r2
 8001770:	d100      	bne.n	8001774 <HAL_CAN_IRQHandler+0x46>
 8001772:	e084      	b.n	800187e <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2201      	movs	r2, #1
 8001778:	4013      	ands	r3, r2
 800177a:	d024      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	d004      	beq.n	8001796 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	0018      	movs	r0, r3
 8001790:	f7fe fe3a 	bl	8000408 <HAL_CAN_TxMailbox0CompleteCallback>
 8001794:	e017      	b.n	80017c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2204      	movs	r2, #4
 800179a:	4013      	ands	r3, r2
 800179c:	d005      	beq.n	80017aa <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	4313      	orrs	r3, r2
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
 80017a8:	e00d      	b.n	80017c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2208      	movs	r2, #8
 80017ae:	4013      	ands	r3, r2
 80017b0:	d005      	beq.n	80017be <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0152      	lsls	r2, r2, #5
 80017b8:	4313      	orrs	r3, r2
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	e003      	b.n	80017c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 f978 	bl	8001ab6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	d028      	beq.n	8001822 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	0052      	lsls	r2, r2, #1
 80017d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d004      	beq.n	80017ee <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 f955 	bl	8001a96 <HAL_CAN_TxMailbox1CompleteCallback>
 80017ec:	e019      	b.n	8001822 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4013      	ands	r3, r2
 80017f6:	d005      	beq.n	8001804 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	0192      	lsls	r2, r2, #6
 80017fe:	4313      	orrs	r3, r2
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
 8001802:	e00e      	b.n	8001822 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4013      	ands	r3, r2
 800180c:	d005      	beq.n	800181a <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	01d2      	lsls	r2, r2, #7
 8001814:	4313      	orrs	r3, r2
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	e003      	b.n	8001822 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	0018      	movs	r0, r3
 800181e:	f000 f952 	bl	8001ac6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	4013      	ands	r3, r2
 800182a:	d028      	beq.n	800187e <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	0252      	lsls	r2, r2, #9
 8001834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	029b      	lsls	r3, r3, #10
 800183c:	4013      	ands	r3, r2
 800183e:	d004      	beq.n	800184a <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	0018      	movs	r0, r3
 8001844:	f000 f92f 	bl	8001aa6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001848:	e019      	b.n	800187e <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	02db      	lsls	r3, r3, #11
 8001850:	4013      	ands	r3, r2
 8001852:	d005      	beq.n	8001860 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	2280      	movs	r2, #128	; 0x80
 8001858:	0212      	lsls	r2, r2, #8
 800185a:	4313      	orrs	r3, r2
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
 800185e:	e00e      	b.n	800187e <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	031b      	lsls	r3, r3, #12
 8001866:	4013      	ands	r3, r2
 8001868:	d005      	beq.n	8001876 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	0252      	lsls	r2, r2, #9
 8001870:	4313      	orrs	r3, r2
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	e003      	b.n	800187e <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	0018      	movs	r0, r3
 800187a:	f000 f92c 	bl	8001ad6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	2208      	movs	r2, #8
 8001882:	4013      	ands	r3, r2
 8001884:	d00c      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2210      	movs	r2, #16
 800188a:	4013      	ands	r3, r2
 800188c:	d008      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4313      	orrs	r3, r2
 8001896:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d00b      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2208      	movs	r2, #8
 80018ac:	4013      	ands	r3, r2
 80018ae:	d007      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2208      	movs	r2, #8
 80018b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 f913 	bl	8001ae6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	2202      	movs	r2, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	d009      	beq.n	80018dc <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2203      	movs	r2, #3
 80018d0:	4013      	ands	r3, r2
 80018d2:	d003      	beq.n	80018dc <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff f82a 	bl	8000930 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	2240      	movs	r2, #64	; 0x40
 80018e0:	4013      	ands	r3, r2
 80018e2:	d00c      	beq.n	80018fe <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2210      	movs	r2, #16
 80018e8:	4013      	ands	r3, r2
 80018ea:	d008      	beq.n	80018fe <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2210      	movs	r2, #16
 80018fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	2220      	movs	r2, #32
 8001902:	4013      	ands	r3, r2
 8001904:	d00b      	beq.n	800191e <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2208      	movs	r2, #8
 800190a:	4013      	ands	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2208      	movs	r2, #8
 8001914:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f000 f8f4 	bl	8001b06 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	2210      	movs	r2, #16
 8001922:	4013      	ands	r3, r2
 8001924:	d009      	beq.n	800193a <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2203      	movs	r2, #3
 800192e:	4013      	ands	r3, r2
 8001930:	d003      	beq.n	800193a <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f000 f8de 	bl	8001af6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800193a:	6a3a      	ldr	r2, [r7, #32]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	4013      	ands	r3, r2
 8001942:	d00b      	beq.n	800195c <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	2210      	movs	r2, #16
 8001948:	4013      	ands	r3, r2
 800194a:	d007      	beq.n	800195c <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2210      	movs	r2, #16
 8001952:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0018      	movs	r0, r3
 8001958:	f000 f8dd 	bl	8001b16 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	4013      	ands	r3, r2
 8001964:	d00b      	beq.n	800197e <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	2208      	movs	r2, #8
 800196a:	4013      	ands	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2208      	movs	r2, #8
 8001974:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f000 f8d4 	bl	8001b26 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800197e:	6a3a      	ldr	r2, [r7, #32]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	4013      	ands	r3, r2
 8001986:	d100      	bne.n	800198a <HAL_CAN_IRQHandler+0x25c>
 8001988:	e074      	b.n	8001a74 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	2204      	movs	r2, #4
 800198e:	4013      	ands	r3, r2
 8001990:	d100      	bne.n	8001994 <HAL_CAN_IRQHandler+0x266>
 8001992:	e06b      	b.n	8001a6c <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4013      	ands	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019a4:	d003      	beq.n	80019ae <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	2201      	movs	r2, #1
 80019aa:	4313      	orrs	r3, r2
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019ae:	6a3a      	ldr	r2, [r7, #32]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d007      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019be:	d003      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	2202      	movs	r2, #2
 80019c4:	4313      	orrs	r3, r2
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019c8:	6a3a      	ldr	r2, [r7, #32]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4013      	ands	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2204      	movs	r2, #4
 80019d6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019d8:	d003      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	2204      	movs	r2, #4
 80019de:	4313      	orrs	r3, r2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019e2:	6a3a      	ldr	r2, [r7, #32]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4013      	ands	r3, r2
 80019ea:	d03f      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2270      	movs	r2, #112	; 0x70
 80019f0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019f2:	d03b      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2270      	movs	r2, #112	; 0x70
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b60      	cmp	r3, #96	; 0x60
 80019fc:	d027      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x320>
 80019fe:	d82c      	bhi.n	8001a5a <HAL_CAN_IRQHandler+0x32c>
 8001a00:	2b50      	cmp	r3, #80	; 0x50
 8001a02:	d01f      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x316>
 8001a04:	d829      	bhi.n	8001a5a <HAL_CAN_IRQHandler+0x32c>
 8001a06:	2b40      	cmp	r3, #64	; 0x40
 8001a08:	d017      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x30c>
 8001a0a:	d826      	bhi.n	8001a5a <HAL_CAN_IRQHandler+0x32c>
 8001a0c:	2b30      	cmp	r3, #48	; 0x30
 8001a0e:	d00f      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x302>
 8001a10:	d823      	bhi.n	8001a5a <HAL_CAN_IRQHandler+0x32c>
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d002      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x2ee>
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d005      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a1a:	e01e      	b.n	8001a5a <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	2208      	movs	r2, #8
 8001a20:	4313      	orrs	r3, r2
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a24:	e01a      	b.n	8001a5c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	2210      	movs	r2, #16
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a2e:	e015      	b.n	8001a5c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	2220      	movs	r2, #32
 8001a34:	4313      	orrs	r3, r2
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a38:	e010      	b.n	8001a5c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	2240      	movs	r2, #64	; 0x40
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a42:	e00b      	b.n	8001a5c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a4c:	e006      	b.n	8001a5c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	0052      	lsls	r2, r2, #1
 8001a54:	4313      	orrs	r3, r2
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a58:	e000      	b.n	8001a5c <HAL_CAN_IRQHandler+0x32e>
            break;
 8001a5a:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2170      	movs	r1, #112	; 0x70
 8001a68:	438a      	bics	r2, r1
 8001a6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2204      	movs	r2, #4
 8001a72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 f854 	bl	8001b36 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b00a      	add	sp, #40	; 0x28
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b002      	add	sp, #8
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b002      	add	sp, #8
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b002      	add	sp, #8
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	0002      	movs	r2, r0
 8001b50:	1dfb      	adds	r3, r7, #7
 8001b52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b7f      	cmp	r3, #127	; 0x7f
 8001b5a:	d809      	bhi.n	8001b70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	001a      	movs	r2, r3
 8001b62:	231f      	movs	r3, #31
 8001b64:	401a      	ands	r2, r3
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_EnableIRQ+0x30>)
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4091      	lsls	r1, r2
 8001b6c:	000a      	movs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
  }
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	0002      	movs	r2, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b90:	d828      	bhi.n	8001be4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b92:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <__NVIC_SetPriority+0xd4>)
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	33c0      	adds	r3, #192	; 0xc0
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	589b      	ldr	r3, [r3, r2]
 8001ba2:	1dfa      	adds	r2, r7, #7
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	2203      	movs	r2, #3
 8001baa:	400a      	ands	r2, r1
 8001bac:	00d2      	lsls	r2, r2, #3
 8001bae:	21ff      	movs	r1, #255	; 0xff
 8001bb0:	4091      	lsls	r1, r2
 8001bb2:	000a      	movs	r2, r1
 8001bb4:	43d2      	mvns	r2, r2
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	019b      	lsls	r3, r3, #6
 8001bbe:	22ff      	movs	r2, #255	; 0xff
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	2303      	movs	r3, #3
 8001bca:	4003      	ands	r3, r0
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd0:	481f      	ldr	r0, [pc, #124]	; (8001c50 <__NVIC_SetPriority+0xd4>)
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	33c0      	adds	r3, #192	; 0xc0
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001be2:	e031      	b.n	8001c48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <__NVIC_SetPriority+0xd8>)
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	0019      	movs	r1, r3
 8001bec:	230f      	movs	r3, #15
 8001bee:	400b      	ands	r3, r1
 8001bf0:	3b08      	subs	r3, #8
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3306      	adds	r3, #6
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	18d3      	adds	r3, r2, r3
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1dfa      	adds	r2, r7, #7
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	0011      	movs	r1, r2
 8001c04:	2203      	movs	r2, #3
 8001c06:	400a      	ands	r2, r1
 8001c08:	00d2      	lsls	r2, r2, #3
 8001c0a:	21ff      	movs	r1, #255	; 0xff
 8001c0c:	4091      	lsls	r1, r2
 8001c0e:	000a      	movs	r2, r1
 8001c10:	43d2      	mvns	r2, r2
 8001c12:	401a      	ands	r2, r3
 8001c14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	019b      	lsls	r3, r3, #6
 8001c1a:	22ff      	movs	r2, #255	; 0xff
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	0018      	movs	r0, r3
 8001c24:	2303      	movs	r3, #3
 8001c26:	4003      	ands	r3, r0
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c2c:	4809      	ldr	r0, [pc, #36]	; (8001c54 <__NVIC_SetPriority+0xd8>)
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	001c      	movs	r4, r3
 8001c34:	230f      	movs	r3, #15
 8001c36:	4023      	ands	r3, r4
 8001c38:	3b08      	subs	r3, #8
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	3306      	adds	r3, #6
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	18c3      	adds	r3, r0, r3
 8001c44:	3304      	adds	r3, #4
 8001c46:	601a      	str	r2, [r3, #0]
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b003      	add	sp, #12
 8001c4e:	bd90      	pop	{r4, r7, pc}
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1e5a      	subs	r2, r3, #1
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	045b      	lsls	r3, r3, #17
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d301      	bcc.n	8001c70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e010      	b.n	8001c92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <SysTick_Config+0x44>)
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	3a01      	subs	r2, #1
 8001c76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c78:	2301      	movs	r3, #1
 8001c7a:	425b      	negs	r3, r3
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff ff7c 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <SysTick_Config+0x44>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <SysTick_Config+0x44>)
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	e000e010 	.word	0xe000e010

08001ca0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	210f      	movs	r1, #15
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	1c02      	adds	r2, r0, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	0011      	movs	r1, r2
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff ff33 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b002      	add	sp, #8
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff ffaf 	bl	8001c58 <SysTick_Config>
 8001cfa:	0003      	movs	r3, r0
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b002      	add	sp, #8
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e036      	b.n	8001d88 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2221      	movs	r2, #33	; 0x21
 8001d1e:	2102      	movs	r1, #2
 8001d20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_DMA_Init+0x8c>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 f9c4 	bl	80020f8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2221      	movs	r2, #33	; 0x21
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	2100      	movs	r1, #0
 8001d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b004      	add	sp, #16
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	ffffc00f 	.word	0xffffc00f

08001d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da2:	2317      	movs	r3, #23
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2220      	movs	r2, #32
 8001dae:	5c9b      	ldrb	r3, [r3, r2]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_DMA_Start_IT+0x24>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e04f      	b.n	8001e58 <HAL_DMA_Start_IT+0xc4>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2221      	movs	r2, #33	; 0x21
 8001dc4:	5c9b      	ldrb	r3, [r3, r2]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d13a      	bne.n	8001e42 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2221      	movs	r2, #33	; 0x21
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	438a      	bics	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f954 	bl	800209e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	210e      	movs	r1, #14
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e00f      	b.n	8001e30 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	210a      	movs	r1, #10
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	438a      	bics	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2220      	movs	r2, #32
 8001e46:	2100      	movs	r1, #0
 8001e48:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e4a:	2317      	movs	r3, #23
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2202      	movs	r2, #2
 8001e50:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001e52:	2317      	movs	r3, #23
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781b      	ldrb	r3, [r3, #0]
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2221      	movs	r2, #33	; 0x21
 8001e6c:	5c9b      	ldrb	r3, [r3, r2]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d008      	beq.n	8001e86 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2204      	movs	r2, #4
 8001e78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e020      	b.n	8001ec8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	210e      	movs	r1, #14
 8001e92:	438a      	bics	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	438a      	bics	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4091      	lsls	r1, r2
 8001eb2:	000a      	movs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2221      	movs	r2, #33	; 0x21
 8001eba:	2101      	movs	r1, #1
 8001ebc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	210f      	movs	r1, #15
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2221      	movs	r2, #33	; 0x21
 8001ee4:	5c9b      	ldrb	r3, [r3, r2]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d006      	beq.n	8001efa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	e028      	b.n	8001f4c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	210e      	movs	r1, #14
 8001f06:	438a      	bics	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2101      	movs	r1, #1
 8001f16:	438a      	bics	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2101      	movs	r1, #1
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2221      	movs	r2, #33	; 0x21
 8001f2e:	2101      	movs	r1, #1
 8001f30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	2100      	movs	r1, #0
 8001f38:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d004      	beq.n	8001f4c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	0010      	movs	r0, r2
 8001f4a:	4798      	blx	r3
    }
  }
  return status;
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2204      	movs	r2, #4
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d024      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x72>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2204      	movs	r2, #4
 8001f86:	4013      	ands	r3, r2
 8001f88:	d020      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2220      	movs	r2, #32
 8001f92:	4013      	ands	r3, r2
 8001f94:	d107      	bne.n	8001fa6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	438a      	bics	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	2104      	movs	r1, #4
 8001fb0:	4091      	lsls	r1, r2
 8001fb2:	000a      	movs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x66>
 8001fbe:	e06a      	b.n	8002096 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	0010      	movs	r0, r2
 8001fc8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001fca:	e064      	b.n	8002096 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	0013      	movs	r3, r2
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d02b      	beq.n	8002034 <HAL_DMA_IRQHandler+0xda>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d027      	beq.n	8002034 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2220      	movs	r2, #32
 8001fec:	4013      	ands	r3, r2
 8001fee:	d10b      	bne.n	8002008 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	210a      	movs	r1, #10
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2221      	movs	r2, #33	; 0x21
 8002004:	2101      	movs	r1, #1
 8002006:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	2102      	movs	r1, #2
 8002012:	4091      	lsls	r1, r2
 8002014:	000a      	movs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	2100      	movs	r1, #0
 800201e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	2b00      	cmp	r3, #0
 8002026:	d036      	beq.n	8002096 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	0010      	movs	r0, r2
 8002030:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002032:	e030      	b.n	8002096 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	2208      	movs	r2, #8
 800203a:	409a      	lsls	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	d028      	beq.n	8002096 <HAL_DMA_IRQHandler+0x13c>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2208      	movs	r2, #8
 8002048:	4013      	ands	r3, r2
 800204a:	d024      	beq.n	8002096 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	210e      	movs	r1, #14
 8002058:	438a      	bics	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	2101      	movs	r1, #1
 8002066:	4091      	lsls	r1, r2
 8002068:	000a      	movs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2221      	movs	r2, #33	; 0x21
 8002076:	2101      	movs	r1, #1
 8002078:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	2100      	movs	r1, #0
 8002080:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	0010      	movs	r0, r2
 8002092:	4798      	blx	r3
    }
  }
}
 8002094:	e7ff      	b.n	8002096 <HAL_DMA_IRQHandler+0x13c>
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}

0800209e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	2101      	movs	r1, #1
 80020b6:	4091      	lsls	r1, r2
 80020b8:	000a      	movs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d108      	bne.n	80020de <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020dc:	e007      	b.n	80020ee <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	60da      	str	r2, [r3, #12]
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a08      	ldr	r2, [pc, #32]	; (8002128 <DMA_CalcBaseAndBitshift+0x30>)
 8002106:	4694      	mov	ip, r2
 8002108:	4463      	add	r3, ip
 800210a:	2114      	movs	r1, #20
 800210c:	0018      	movs	r0, r3
 800210e:	f7fd fffb 	bl	8000108 <__udivsi3>
 8002112:	0003      	movs	r3, r0
 8002114:	009a      	lsls	r2, r3, #2
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a03      	ldr	r2, [pc, #12]	; (800212c <DMA_CalcBaseAndBitshift+0x34>)
 800211e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}
 8002128:	bffdfff8 	.word	0xbffdfff8
 800212c:	40020000 	.word	0x40020000

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	e149      	b.n	80023d4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4091      	lsls	r1, r2
 800214a:	000a      	movs	r2, r1
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d100      	bne.n	8002158 <HAL_GPIO_Init+0x28>
 8002156:	e13a      	b.n	80023ce <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2203      	movs	r2, #3
 800215e:	4013      	ands	r3, r2
 8002160:	2b01      	cmp	r3, #1
 8002162:	d005      	beq.n	8002170 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2203      	movs	r2, #3
 800216a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800216c:	2b02      	cmp	r3, #2
 800216e:	d130      	bne.n	80021d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	409a      	lsls	r2, r3
 800217e:	0013      	movs	r3, r2
 8002180:	43da      	mvns	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	409a      	lsls	r2, r3
 8002192:	0013      	movs	r3, r2
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a6:	2201      	movs	r2, #1
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
 80021ac:	0013      	movs	r3, r2
 80021ae:	43da      	mvns	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	2201      	movs	r2, #1
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
 80021c4:	0013      	movs	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2203      	movs	r2, #3
 80021d8:	4013      	ands	r3, r2
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d017      	beq.n	800220e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	43da      	mvns	r2, r3
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	409a      	lsls	r2, r3
 8002200:	0013      	movs	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2203      	movs	r2, #3
 8002214:	4013      	ands	r3, r2
 8002216:	2b02      	cmp	r3, #2
 8002218:	d123      	bne.n	8002262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	58d3      	ldr	r3, [r2, r3]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2207      	movs	r2, #7
 800222c:	4013      	ands	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	409a      	lsls	r2, r3
 8002234:	0013      	movs	r3, r2
 8002236:	43da      	mvns	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2107      	movs	r1, #7
 8002246:	400b      	ands	r3, r1
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	409a      	lsls	r2, r3
 800224c:	0013      	movs	r3, r2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	6939      	ldr	r1, [r7, #16]
 8002260:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	409a      	lsls	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	43da      	mvns	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2203      	movs	r2, #3
 8002280:	401a      	ands	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	409a      	lsls	r2, r3
 8002288:	0013      	movs	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	23c0      	movs	r3, #192	; 0xc0
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	4013      	ands	r3, r2
 80022a0:	d100      	bne.n	80022a4 <HAL_GPIO_Init+0x174>
 80022a2:	e094      	b.n	80023ce <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a4:	4b51      	ldr	r3, [pc, #324]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 80022aa:	2101      	movs	r1, #1
 80022ac:	430a      	orrs	r2, r1
 80022ae:	619a      	str	r2, [r3, #24]
 80022b0:	4b4e      	ldr	r3, [pc, #312]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022bc:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <HAL_GPIO_Init+0x2c0>)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	589b      	ldr	r3, [r3, r2]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2203      	movs	r2, #3
 80022ce:	4013      	ands	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0013      	movs	r3, r2
 80022d8:	43da      	mvns	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	2390      	movs	r3, #144	; 0x90
 80022e4:	05db      	lsls	r3, r3, #23
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x1d6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a41      	ldr	r2, [pc, #260]	; (80023f4 <HAL_GPIO_Init+0x2c4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x1d2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a40      	ldr	r2, [pc, #256]	; (80023f8 <HAL_GPIO_Init+0x2c8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x1ce>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_Init+0x1d8>
 80022fe:	2305      	movs	r3, #5
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x1d8>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x1d8>
 8002306:	2300      	movs	r3, #0
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	2103      	movs	r1, #3
 800230c:	400a      	ands	r2, r1
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002318:	4935      	ldr	r1, [pc, #212]	; (80023f0 <HAL_GPIO_Init+0x2c0>)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43da      	mvns	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	035b      	lsls	r3, r3, #13
 800233e:	4013      	ands	r3, r2
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43da      	mvns	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	039b      	lsls	r3, r3, #14
 8002368:	4013      	ands	r3, r2
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	43da      	mvns	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	029b      	lsls	r3, r3, #10
 8002392:	4013      	ands	r3, r2
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	43da      	mvns	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	025b      	lsls	r3, r3, #9
 80023bc:	4013      	ands	r3, r2
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	40da      	lsrs	r2, r3
 80023dc:	1e13      	subs	r3, r2, #0
 80023de:	d000      	beq.n	80023e2 <HAL_GPIO_Init+0x2b2>
 80023e0:	e6ae      	b.n	8002140 <HAL_GPIO_Init+0x10>
  } 
}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b006      	add	sp, #24
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010000 	.word	0x40010000
 80023f4:	48000400 	.word	0x48000400
 80023f8:	48000800 	.word	0x48000800
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	0008      	movs	r0, r1
 800240a:	0011      	movs	r1, r2
 800240c:	1cbb      	adds	r3, r7, #2
 800240e:	1c02      	adds	r2, r0, #0
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	1c7b      	adds	r3, r7, #1
 8002414:	1c0a      	adds	r2, r1, #0
 8002416:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	1c7b      	adds	r3, r7, #1
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002420:	1cbb      	adds	r3, r7, #2
 8002422:	881a      	ldrh	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002428:	e003      	b.n	8002432 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800242a:	1cbb      	adds	r3, r7, #2
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b002      	add	sp, #8
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f000 fb76 	bl	8002b3c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2201      	movs	r2, #1
 8002456:	4013      	ands	r3, r2
 8002458:	d100      	bne.n	800245c <HAL_RCC_OscConfig+0x20>
 800245a:	e08e      	b.n	800257a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800245c:	4bc5      	ldr	r3, [pc, #788]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	220c      	movs	r2, #12
 8002462:	4013      	ands	r3, r2
 8002464:	2b04      	cmp	r3, #4
 8002466:	d00e      	beq.n	8002486 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002468:	4bc2      	ldr	r3, [pc, #776]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	220c      	movs	r2, #12
 800246e:	4013      	ands	r3, r2
 8002470:	2b08      	cmp	r3, #8
 8002472:	d117      	bne.n	80024a4 <HAL_RCC_OscConfig+0x68>
 8002474:	4bbf      	ldr	r3, [pc, #764]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	23c0      	movs	r3, #192	; 0xc0
 800247a:	025b      	lsls	r3, r3, #9
 800247c:	401a      	ands	r2, r3
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	025b      	lsls	r3, r3, #9
 8002482:	429a      	cmp	r2, r3
 8002484:	d10e      	bne.n	80024a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002486:	4bbb      	ldr	r3, [pc, #748]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	4013      	ands	r3, r2
 8002490:	d100      	bne.n	8002494 <HAL_RCC_OscConfig+0x58>
 8002492:	e071      	b.n	8002578 <HAL_RCC_OscConfig+0x13c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d000      	beq.n	800249e <HAL_RCC_OscConfig+0x62>
 800249c:	e06c      	b.n	8002578 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f000 fb4c 	bl	8002b3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_OscConfig+0x80>
 80024ac:	4bb1      	ldr	r3, [pc, #708]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4bb0      	ldr	r3, [pc, #704]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	0249      	lsls	r1, r1, #9
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e02f      	b.n	800251c <HAL_RCC_OscConfig+0xe0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10c      	bne.n	80024de <HAL_RCC_OscConfig+0xa2>
 80024c4:	4bab      	ldr	r3, [pc, #684]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4baa      	ldr	r3, [pc, #680]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024ca:	49ab      	ldr	r1, [pc, #684]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	4ba8      	ldr	r3, [pc, #672]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4ba7      	ldr	r3, [pc, #668]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024d6:	49a9      	ldr	r1, [pc, #676]	; (800277c <HAL_RCC_OscConfig+0x340>)
 80024d8:	400a      	ands	r2, r1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e01e      	b.n	800251c <HAL_RCC_OscConfig+0xe0>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d10e      	bne.n	8002504 <HAL_RCC_OscConfig+0xc8>
 80024e6:	4ba3      	ldr	r3, [pc, #652]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4ba2      	ldr	r3, [pc, #648]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	02c9      	lsls	r1, r1, #11
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	4b9f      	ldr	r3, [pc, #636]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b9e      	ldr	r3, [pc, #632]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	0249      	lsls	r1, r1, #9
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0xe0>
 8002504:	4b9b      	ldr	r3, [pc, #620]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b9a      	ldr	r3, [pc, #616]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 800250a:	499b      	ldr	r1, [pc, #620]	; (8002778 <HAL_RCC_OscConfig+0x33c>)
 800250c:	400a      	ands	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	4b98      	ldr	r3, [pc, #608]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b97      	ldr	r3, [pc, #604]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002516:	4999      	ldr	r1, [pc, #612]	; (800277c <HAL_RCC_OscConfig+0x340>)
 8002518:	400a      	ands	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d014      	beq.n	800254e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fc9c 	bl	8000e60 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252e:	f7fe fc97 	bl	8000e60 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e2fd      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002540:	4b8c      	ldr	r3, [pc, #560]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	029b      	lsls	r3, r3, #10
 8002548:	4013      	ands	r3, r2
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0xf2>
 800254c:	e015      	b.n	800257a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fc87 	bl	8000e60 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fc82 	bl	8000e60 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e2e8      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b82      	ldr	r3, [pc, #520]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	029b      	lsls	r3, r3, #10
 8002572:	4013      	ands	r3, r2
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x11c>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d100      	bne.n	8002586 <HAL_RCC_OscConfig+0x14a>
 8002584:	e06c      	b.n	8002660 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002586:	4b7b      	ldr	r3, [pc, #492]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	220c      	movs	r2, #12
 800258c:	4013      	ands	r3, r2
 800258e:	d00e      	beq.n	80025ae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002590:	4b78      	ldr	r3, [pc, #480]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	220c      	movs	r2, #12
 8002596:	4013      	ands	r3, r2
 8002598:	2b08      	cmp	r3, #8
 800259a:	d11f      	bne.n	80025dc <HAL_RCC_OscConfig+0x1a0>
 800259c:	4b75      	ldr	r3, [pc, #468]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	23c0      	movs	r3, #192	; 0xc0
 80025a2:	025b      	lsls	r3, r3, #9
 80025a4:	401a      	ands	r2, r3
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	4b71      	ldr	r3, [pc, #452]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_OscConfig+0x188>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e2bb      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	22f8      	movs	r2, #248	; 0xf8
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00da      	lsls	r2, r3, #3
 80025d4:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	e041      	b.n	8002660 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d024      	beq.n	800262e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b62      	ldr	r3, [pc, #392]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fc36 	bl	8000e60 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe fc31 	bl	8000e60 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e297      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2202      	movs	r2, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d0f1      	beq.n	80025fa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b57      	ldr	r3, [pc, #348]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	22f8      	movs	r2, #248	; 0xf8
 800261c:	4393      	bics	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	00da      	lsls	r2, r3, #3
 8002626:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e018      	b.n	8002660 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262e:	4b51      	ldr	r3, [pc, #324]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002634:	2101      	movs	r1, #1
 8002636:	438a      	bics	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fc11 	bl	8000e60 <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fc0c 	bl	8000e60 <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e272      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d1f1      	bne.n	8002644 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2208      	movs	r2, #8
 8002666:	4013      	ands	r3, r2
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d019      	beq.n	80026a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b40      	ldr	r3, [pc, #256]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002676:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002678:	2101      	movs	r1, #1
 800267a:	430a      	orrs	r2, r1
 800267c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe fbef 	bl	8000e60 <HAL_GetTick>
 8002682:	0003      	movs	r3, r0
 8002684:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe fbea 	bl	8000e60 <HAL_GetTick>
 800268c:	0002      	movs	r2, r0
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e250      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	4b36      	ldr	r3, [pc, #216]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d0f1      	beq.n	8002688 <HAL_RCC_OscConfig+0x24c>
 80026a4:	e018      	b.n	80026d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a6:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80026a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80026ac:	2101      	movs	r1, #1
 80026ae:	438a      	bics	r2, r1
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fbd5 	bl	8000e60 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe fbd0 	bl	8000e60 <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e236      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	2202      	movs	r2, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	d1f1      	bne.n	80026bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	d100      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2a8>
 80026e2:	e0b5      	b.n	8002850 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e4:	201f      	movs	r0, #31
 80026e6:	183b      	adds	r3, r7, r0
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	055b      	lsls	r3, r3, #21
 80026f4:	4013      	ands	r3, r2
 80026f6:	d110      	bne.n	800271a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	0549      	lsls	r1, r1, #21
 8002702:	430a      	orrs	r2, r1
 8002704:	61da      	str	r2, [r3, #28]
 8002706:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	055b      	lsls	r3, r3, #21
 800270e:	4013      	ands	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002714:	183b      	adds	r3, r7, r0
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_OscConfig+0x344>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d11a      	bne.n	800275c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_RCC_OscConfig+0x344>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_RCC_OscConfig+0x344>)
 800272c:	2180      	movs	r1, #128	; 0x80
 800272e:	0049      	lsls	r1, r1, #1
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002734:	f7fe fb94 	bl	8000e60 <HAL_GetTick>
 8002738:	0003      	movs	r3, r0
 800273a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273e:	f7fe fb8f 	bl	8000e60 <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b64      	cmp	r3, #100	; 0x64
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1f5      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x344>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4013      	ands	r3, r2
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10f      	bne.n	8002784 <HAL_RCC_OscConfig+0x348>
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	4b02      	ldr	r3, [pc, #8]	; (8002774 <HAL_RCC_OscConfig+0x338>)
 800276a:	2101      	movs	r1, #1
 800276c:	430a      	orrs	r2, r1
 800276e:	621a      	str	r2, [r3, #32]
 8002770:	e036      	b.n	80027e0 <HAL_RCC_OscConfig+0x3a4>
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	40021000 	.word	0x40021000
 8002778:	fffeffff 	.word	0xfffeffff
 800277c:	fffbffff 	.word	0xfffbffff
 8002780:	40007000 	.word	0x40007000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10c      	bne.n	80027a6 <HAL_RCC_OscConfig+0x36a>
 800278c:	4bca      	ldr	r3, [pc, #808]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800278e:	6a1a      	ldr	r2, [r3, #32]
 8002790:	4bc9      	ldr	r3, [pc, #804]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002792:	2101      	movs	r1, #1
 8002794:	438a      	bics	r2, r1
 8002796:	621a      	str	r2, [r3, #32]
 8002798:	4bc7      	ldr	r3, [pc, #796]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	4bc6      	ldr	r3, [pc, #792]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800279e:	2104      	movs	r1, #4
 80027a0:	438a      	bics	r2, r1
 80027a2:	621a      	str	r2, [r3, #32]
 80027a4:	e01c      	b.n	80027e0 <HAL_RCC_OscConfig+0x3a4>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x38c>
 80027ae:	4bc2      	ldr	r3, [pc, #776]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	4bc1      	ldr	r3, [pc, #772]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027b4:	2104      	movs	r1, #4
 80027b6:	430a      	orrs	r2, r1
 80027b8:	621a      	str	r2, [r3, #32]
 80027ba:	4bbf      	ldr	r3, [pc, #764]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027bc:	6a1a      	ldr	r2, [r3, #32]
 80027be:	4bbe      	ldr	r3, [pc, #760]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027c0:	2101      	movs	r1, #1
 80027c2:	430a      	orrs	r2, r1
 80027c4:	621a      	str	r2, [r3, #32]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0x3a4>
 80027c8:	4bbb      	ldr	r3, [pc, #748]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027ca:	6a1a      	ldr	r2, [r3, #32]
 80027cc:	4bba      	ldr	r3, [pc, #744]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027ce:	2101      	movs	r1, #1
 80027d0:	438a      	bics	r2, r1
 80027d2:	621a      	str	r2, [r3, #32]
 80027d4:	4bb8      	ldr	r3, [pc, #736]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027d6:	6a1a      	ldr	r2, [r3, #32]
 80027d8:	4bb7      	ldr	r3, [pc, #732]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027da:	2104      	movs	r1, #4
 80027dc:	438a      	bics	r2, r1
 80027de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d014      	beq.n	8002812 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7fe fb3a 	bl	8000e60 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e009      	b.n	8002806 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fb35 	bl	8000e60 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4aaf      	ldr	r2, [pc, #700]	; (8002abc <HAL_RCC_OscConfig+0x680>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e19a      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	4bac      	ldr	r3, [pc, #688]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3b6>
 8002810:	e013      	b.n	800283a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7fe fb25 	bl	8000e60 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281a:	e009      	b.n	8002830 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe fb20 	bl	8000e60 <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	4aa5      	ldr	r2, [pc, #660]	; (8002abc <HAL_RCC_OscConfig+0x680>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e185      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	4ba1      	ldr	r3, [pc, #644]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	2202      	movs	r2, #2
 8002836:	4013      	ands	r3, r2
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800283a:	231f      	movs	r3, #31
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d105      	bne.n	8002850 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002844:	4b9c      	ldr	r3, [pc, #624]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	4b9b      	ldr	r3, [pc, #620]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800284a:	499d      	ldr	r1, [pc, #628]	; (8002ac0 <HAL_RCC_OscConfig+0x684>)
 800284c:	400a      	ands	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2210      	movs	r2, #16
 8002856:	4013      	ands	r3, r2
 8002858:	d063      	beq.n	8002922 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d12a      	bne.n	80028b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002862:	4b95      	ldr	r3, [pc, #596]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002866:	4b94      	ldr	r3, [pc, #592]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002868:	2104      	movs	r1, #4
 800286a:	430a      	orrs	r2, r1
 800286c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800286e:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002872:	4b91      	ldr	r3, [pc, #580]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002874:	2101      	movs	r1, #1
 8002876:	430a      	orrs	r2, r1
 8002878:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe faf1 	bl	8000e60 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002884:	f7fe faec 	bl	8000e60 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e152      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	2202      	movs	r2, #2
 800289c:	4013      	ands	r3, r2
 800289e:	d0f1      	beq.n	8002884 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028a0:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	22f8      	movs	r2, #248	; 0xf8
 80028a6:	4393      	bics	r3, r2
 80028a8:	0019      	movs	r1, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	00da      	lsls	r2, r3, #3
 80028b0:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34
 80028b6:	e034      	b.n	8002922 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	3305      	adds	r3, #5
 80028be:	d111      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80028c0:	4b7d      	ldr	r3, [pc, #500]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c4:	4b7c      	ldr	r3, [pc, #496]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028c6:	2104      	movs	r1, #4
 80028c8:	438a      	bics	r2, r1
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028cc:	4b7a      	ldr	r3, [pc, #488]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	22f8      	movs	r2, #248	; 0xf8
 80028d2:	4393      	bics	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	00da      	lsls	r2, r3, #3
 80028dc:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34
 80028e2:	e01e      	b.n	8002922 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028e4:	4b74      	ldr	r3, [pc, #464]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e8:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028ea:	2104      	movs	r1, #4
 80028ec:	430a      	orrs	r2, r1
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80028f0:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f4:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	438a      	bics	r2, r1
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fab0 	bl	8000e60 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002906:	f7fe faab 	bl	8000e60 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e111      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002918:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d1f1      	bne.n	8002906 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	4013      	ands	r3, r2
 800292a:	d05c      	beq.n	80029e6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800292c:	4b62      	ldr	r3, [pc, #392]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	220c      	movs	r2, #12
 8002932:	4013      	ands	r3, r2
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d00e      	beq.n	8002956 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002938:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	220c      	movs	r2, #12
 800293e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002940:	2b08      	cmp	r3, #8
 8002942:	d114      	bne.n	800296e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002944:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	23c0      	movs	r3, #192	; 0xc0
 800294a:	025b      	lsls	r3, r3, #9
 800294c:	401a      	ands	r2, r3
 800294e:	23c0      	movs	r3, #192	; 0xc0
 8002950:	025b      	lsls	r3, r3, #9
 8002952:	429a      	cmp	r2, r3
 8002954:	d10b      	bne.n	800296e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	029b      	lsls	r3, r3, #10
 800295e:	4013      	ands	r3, r2
 8002960:	d040      	beq.n	80029e4 <HAL_RCC_OscConfig+0x5a8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d03c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0e6      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01b      	beq.n	80029ae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002976:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297a:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	0249      	lsls	r1, r1, #9
 8002980:	430a      	orrs	r2, r1
 8002982:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe fa6c 	bl	8000e60 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800298e:	f7fe fa67 	bl	8000e60 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0cd      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029a0:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	4013      	ands	r3, r2
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x552>
 80029ac:	e01b      	b.n	80029e6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80029ae:	4b42      	ldr	r3, [pc, #264]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029b4:	4943      	ldr	r1, [pc, #268]	; (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80029b6:	400a      	ands	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fa51 	bl	8000e60 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c4:	f7fe fa4c 	bl	8000e60 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0b2      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80029d6:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	4013      	ands	r3, r2
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x588>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d100      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5b4>
 80029ee:	e0a4      	b.n	8002b3a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f0:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	220c      	movs	r2, #12
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d100      	bne.n	80029fe <HAL_RCC_OscConfig+0x5c2>
 80029fc:	e078      	b.n	8002af0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d14c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a0c:	492e      	ldr	r1, [pc, #184]	; (8002ac8 <HAL_RCC_OscConfig+0x68c>)
 8002a0e:	400a      	ands	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fa25 	bl	8000e60 <HAL_GetTick>
 8002a16:	0003      	movs	r3, r0
 8002a18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fa20 	bl	8000e60 <HAL_GetTick>
 8002a20:	0002      	movs	r2, r0
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e086      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2e:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	049b      	lsls	r3, r3, #18
 8002a36:	4013      	ands	r3, r2
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	220f      	movs	r2, #15
 8002a40:	4393      	bics	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_RCC_OscConfig+0x690>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	431a      	orrs	r2, r3
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a6e:	2180      	movs	r1, #128	; 0x80
 8002a70:	0449      	lsls	r1, r1, #17
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe f9f3 	bl	8000e60 <HAL_GetTick>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe f9ee 	bl	8000e60 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e054      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	049b      	lsls	r3, r3, #18
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x644>
 8002a9e:	e04c      	b.n	8002b3a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002aa6:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <HAL_RCC_OscConfig+0x68c>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe f9d8 	bl	8000e60 <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x6a6>
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	00001388 	.word	0x00001388
 8002ac0:	efffffff 	.word	0xefffffff
 8002ac4:	fffeffff 	.word	0xfffeffff
 8002ac8:	feffffff 	.word	0xfeffffff
 8002acc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe f9c6 	bl	8000e60 <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e02c      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_RCC_OscConfig+0x708>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	049b      	lsls	r3, r3, #18
 8002aea:	4013      	ands	r3, r2
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x694>
 8002aee:	e024      	b.n	8002b3a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e01f      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_RCC_OscConfig+0x708>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_RCC_OscConfig+0x708>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	23c0      	movs	r3, #192	; 0xc0
 8002b0c:	025b      	lsls	r3, r3, #9
 8002b0e:	401a      	ands	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d10e      	bne.n	8002b36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	23f0      	movs	r3, #240	; 0xf0
 8002b2a:	039b      	lsls	r3, r3, #14
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b008      	add	sp, #32
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0bf      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d911      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4393      	bics	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	4b5b      	ldr	r3, [pc, #364]	; (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7c:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0a6      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2202      	movs	r2, #2
 8002b94:	4013      	ands	r3, r2
 8002b96:	d015      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d006      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ba2:	4b51      	ldr	r3, [pc, #324]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba8:	21e0      	movs	r1, #224	; 0xe0
 8002baa:	00c9      	lsls	r1, r1, #3
 8002bac:	430a      	orrs	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	22f0      	movs	r2, #240	; 0xf0
 8002bb6:	4393      	bics	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d04c      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b44      	ldr	r3, [pc, #272]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	4013      	ands	r3, r2
 8002be0:	d120      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07a      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	049b      	lsls	r3, r3, #18
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d114      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06e      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c06:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	029b      	lsls	r3, r3, #10
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d108      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e062      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e05b      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c24:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7fe f912 	bl	8000e60 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c40:	e009      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c42:	f7fe f90d 	bl	8000e60 <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <HAL_RCC_ClockConfig+0x1a4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e042      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1ec      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d211      	bcs.n	8002c9a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4013      	ands	r3, r2
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e020      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_RCC_ClockConfig+0x1a8>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cb8:	f000 f820 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002cbc:	0001      	movs	r1, r0
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_RCC_ClockConfig+0x1ac>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	000a      	movs	r2, r1
 8002cce:	40da      	lsrs	r2, r3
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cd4:	2003      	movs	r0, #3
 8002cd6:	f7fe f87d 	bl	8000dd4 <HAL_InitTick>
  
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b004      	add	sp, #16
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	00001388 	.word	0x00001388
 8002cf0:	fffff8ff 	.word	0xfffff8ff
 8002cf4:	080042e0 	.word	0x080042e0
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	220c      	movs	r2, #12
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d046      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002d26:	d848      	bhi.n	8002dba <HAL_RCC_GetSysClockFreq+0xbe>
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d002      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x36>
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d003      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x3c>
 8002d30:	e043      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d32:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d34:	613b      	str	r3, [r7, #16]
      break;
 8002d36:	e043      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	0c9b      	lsrs	r3, r3, #18
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	4013      	ands	r3, r2
 8002d40:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002d42:	5cd3      	ldrb	r3, [r2, r3]
 8002d44:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d46:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	23c0      	movs	r3, #192	; 0xc0
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d109      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	481a      	ldr	r0, [pc, #104]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d68:	f7fd f9ce 	bl	8000108 <__udivsi3>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	001a      	movs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4353      	muls	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e01a      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	23c0      	movs	r3, #192	; 0xc0
 8002d7c:	025b      	lsls	r3, r3, #9
 8002d7e:	401a      	ands	r2, r3
 8002d80:	23c0      	movs	r3, #192	; 0xc0
 8002d82:	025b      	lsls	r3, r3, #9
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d109      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	4814      	ldr	r0, [pc, #80]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d8c:	f7fd f9bc 	bl	8000108 <__udivsi3>
 8002d90:	0003      	movs	r3, r0
 8002d92:	001a      	movs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4353      	muls	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002da0:	f7fd f9b2 	bl	8000108 <__udivsi3>
 8002da4:	0003      	movs	r3, r0
 8002da6:	001a      	movs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4353      	muls	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	613b      	str	r3, [r7, #16]
      break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002db6:	613b      	str	r3, [r7, #16]
      break;
 8002db8:	e002      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002dbc:	613b      	str	r3, [r7, #16]
      break;
 8002dbe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002dc0:	693b      	ldr	r3, [r7, #16]
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b006      	add	sp, #24
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	080042f8 	.word	0x080042f8
 8002dd8:	08004308 	.word	0x08004308
 8002ddc:	02dc6c00 	.word	0x02dc6c00

08002de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de4:	4b02      	ldr	r3, [pc, #8]	; (8002df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002df8:	f7ff fff2 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8002dfc:	0001      	movs	r1, r0
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	2207      	movs	r2, #7
 8002e06:	4013      	ands	r3, r2
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	40d9      	lsrs	r1, r3
 8002e0e:	000b      	movs	r3, r1
}    
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	080042f0 	.word	0x080042f0

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	025b      	lsls	r3, r3, #9
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e3c:	e08e      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2017      	movs	r0, #23
 8002e40:	183b      	adds	r3, r7, r0
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e46:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	055b      	lsls	r3, r3, #21
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d110      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	0549      	lsls	r1, r1, #21
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]
 8002e60:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	055b      	lsls	r3, r3, #21
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d11a      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b58      	ldr	r3, [pc, #352]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	0049      	lsls	r1, r1, #1
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fd ffe7 	bl	8000e60 <HAL_GetTick>
 8002e92:	0003      	movs	r3, r0
 8002e94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	e008      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e98:	f7fd ffe2 	bl	8000e60 <HAL_GetTick>
 8002e9c:	0002      	movs	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e097      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	23c0      	movs	r3, #192	; 0xc0
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d034      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	23c0      	movs	r3, #192	; 0xc0
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d02c      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed8:	4b42      	ldr	r3, [pc, #264]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a43      	ldr	r2, [pc, #268]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee2:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee4:	6a1a      	ldr	r2, [r3, #32]
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	0249      	lsls	r1, r1, #9
 8002eec:	430a      	orrs	r2, r1
 8002eee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef0:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ef6:	493e      	ldr	r1, [pc, #248]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	4013      	ands	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fd ffa9 	bl	8000e60 <HAL_GetTick>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e009      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fd ffa4 	bl	8000e60 <HAL_GetTick>
 8002f18:	0002      	movs	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	4a35      	ldr	r2, [pc, #212]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e058      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f32:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a2d      	ldr	r2, [pc, #180]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f42:	430a      	orrs	r2, r1
 8002f44:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f46:	2317      	movs	r3, #23
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f56:	4928      	ldr	r1, [pc, #160]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f58:	400a      	ands	r2, r1
 8002f5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	4393      	bics	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f76:	430a      	orrs	r2, r1
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	4013      	ands	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	2210      	movs	r2, #16
 8002f8a:	4393      	bics	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	029b      	lsls	r3, r3, #10
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	4393      	bics	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2240      	movs	r2, #64	; 0x40
 8002fca:	4393      	bics	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b006      	add	sp, #24
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	fffffcff 	.word	0xfffffcff
 8002ff0:	fffeffff 	.word	0xfffeffff
 8002ff4:	00001388 	.word	0x00001388
 8002ff8:	efffffff 	.word	0xefffffff

08002ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e044      	b.n	8003098 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d107      	bne.n	8003026 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2278      	movs	r2, #120	; 0x78
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f7fd fd61 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2224      	movs	r2, #36	; 0x24
 800302a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2101      	movs	r1, #1
 8003038:	438a      	bics	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0018      	movs	r0, r3
 8003040:	f000 fb30 	bl	80036a4 <UART_SetConfig>
 8003044:	0003      	movs	r3, r0
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e024      	b.n	8003098 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fc63 	bl	8003924 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	490d      	ldr	r1, [pc, #52]	; (80030a0 <HAL_UART_Init+0xa4>)
 800306a:	400a      	ands	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	212a      	movs	r1, #42	; 0x2a
 800307a:	438a      	bics	r2, r1
 800307c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f000 fcfb 	bl	8003a8c <UART_CheckIdleState>
 8003096:	0003      	movs	r3, r0
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	ffffb7ff 	.word	0xffffb7ff

080030a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b0ab      	sub	sp, #172	; 0xac
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	22a4      	movs	r2, #164	; 0xa4
 80030b4:	18b9      	adds	r1, r7, r2
 80030b6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	20a0      	movs	r0, #160	; 0xa0
 80030c0:	1839      	adds	r1, r7, r0
 80030c2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	219c      	movs	r1, #156	; 0x9c
 80030cc:	1879      	adds	r1, r7, r1
 80030ce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030d0:	0011      	movs	r1, r2
 80030d2:	18bb      	adds	r3, r7, r2
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a99      	ldr	r2, [pc, #612]	; (800333c <HAL_UART_IRQHandler+0x298>)
 80030d8:	4013      	ands	r3, r2
 80030da:	2298      	movs	r2, #152	; 0x98
 80030dc:	18bc      	adds	r4, r7, r2
 80030de:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80030e0:	18bb      	adds	r3, r7, r2
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d114      	bne.n	8003112 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2220      	movs	r2, #32
 80030ee:	4013      	ands	r3, r2
 80030f0:	d00f      	beq.n	8003112 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030f2:	183b      	adds	r3, r7, r0
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2220      	movs	r2, #32
 80030f8:	4013      	ands	r3, r2
 80030fa:	d00a      	beq.n	8003112 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003100:	2b00      	cmp	r3, #0
 8003102:	d100      	bne.n	8003106 <HAL_UART_IRQHandler+0x62>
 8003104:	e29e      	b.n	8003644 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	0010      	movs	r0, r2
 800310e:	4798      	blx	r3
      }
      return;
 8003110:	e298      	b.n	8003644 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003112:	2398      	movs	r3, #152	; 0x98
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d100      	bne.n	800311e <HAL_UART_IRQHandler+0x7a>
 800311c:	e114      	b.n	8003348 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800311e:	239c      	movs	r3, #156	; 0x9c
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	4013      	ands	r3, r2
 8003128:	d106      	bne.n	8003138 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800312a:	23a0      	movs	r3, #160	; 0xa0
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a83      	ldr	r2, [pc, #524]	; (8003340 <HAL_UART_IRQHandler+0x29c>)
 8003132:	4013      	ands	r3, r2
 8003134:	d100      	bne.n	8003138 <HAL_UART_IRQHandler+0x94>
 8003136:	e107      	b.n	8003348 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003138:	23a4      	movs	r3, #164	; 0xa4
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2201      	movs	r2, #1
 8003140:	4013      	ands	r3, r2
 8003142:	d012      	beq.n	800316a <HAL_UART_IRQHandler+0xc6>
 8003144:	23a0      	movs	r3, #160	; 0xa0
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4013      	ands	r3, r2
 8003150:	d00b      	beq.n	800316a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2284      	movs	r2, #132	; 0x84
 800315e:	589b      	ldr	r3, [r3, r2]
 8003160:	2201      	movs	r2, #1
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2184      	movs	r1, #132	; 0x84
 8003168:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800316a:	23a4      	movs	r3, #164	; 0xa4
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2202      	movs	r2, #2
 8003172:	4013      	ands	r3, r2
 8003174:	d011      	beq.n	800319a <HAL_UART_IRQHandler+0xf6>
 8003176:	239c      	movs	r3, #156	; 0x9c
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2201      	movs	r2, #1
 800317e:	4013      	ands	r3, r2
 8003180:	d00b      	beq.n	800319a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2202      	movs	r2, #2
 8003188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2284      	movs	r2, #132	; 0x84
 800318e:	589b      	ldr	r3, [r3, r2]
 8003190:	2204      	movs	r2, #4
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2184      	movs	r1, #132	; 0x84
 8003198:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800319a:	23a4      	movs	r3, #164	; 0xa4
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2204      	movs	r2, #4
 80031a2:	4013      	ands	r3, r2
 80031a4:	d011      	beq.n	80031ca <HAL_UART_IRQHandler+0x126>
 80031a6:	239c      	movs	r3, #156	; 0x9c
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2201      	movs	r2, #1
 80031ae:	4013      	ands	r3, r2
 80031b0:	d00b      	beq.n	80031ca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2204      	movs	r2, #4
 80031b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2284      	movs	r2, #132	; 0x84
 80031be:	589b      	ldr	r3, [r3, r2]
 80031c0:	2202      	movs	r2, #2
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2184      	movs	r1, #132	; 0x84
 80031c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031ca:	23a4      	movs	r3, #164	; 0xa4
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2208      	movs	r2, #8
 80031d2:	4013      	ands	r3, r2
 80031d4:	d017      	beq.n	8003206 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031d6:	23a0      	movs	r3, #160	; 0xa0
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2220      	movs	r2, #32
 80031de:	4013      	ands	r3, r2
 80031e0:	d105      	bne.n	80031ee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031e2:	239c      	movs	r3, #156	; 0x9c
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031ec:	d00b      	beq.n	8003206 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2208      	movs	r2, #8
 80031f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2284      	movs	r2, #132	; 0x84
 80031fa:	589b      	ldr	r3, [r3, r2]
 80031fc:	2208      	movs	r2, #8
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2184      	movs	r1, #132	; 0x84
 8003204:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003206:	23a4      	movs	r3, #164	; 0xa4
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	4013      	ands	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_UART_IRQHandler+0x198>
 8003214:	23a0      	movs	r3, #160	; 0xa0
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	04db      	lsls	r3, r3, #19
 800321e:	4013      	ands	r3, r2
 8003220:	d00c      	beq.n	800323c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2280      	movs	r2, #128	; 0x80
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2284      	movs	r2, #132	; 0x84
 8003230:	589b      	ldr	r3, [r3, r2]
 8003232:	2220      	movs	r2, #32
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2184      	movs	r1, #132	; 0x84
 800323a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2284      	movs	r2, #132	; 0x84
 8003240:	589b      	ldr	r3, [r3, r2]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d100      	bne.n	8003248 <HAL_UART_IRQHandler+0x1a4>
 8003246:	e1ff      	b.n	8003648 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003248:	23a4      	movs	r3, #164	; 0xa4
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2220      	movs	r2, #32
 8003250:	4013      	ands	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003254:	23a0      	movs	r3, #160	; 0xa0
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2220      	movs	r2, #32
 800325c:	4013      	ands	r3, r2
 800325e:	d008      	beq.n	8003272 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	0010      	movs	r0, r2
 8003270:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2284      	movs	r2, #132	; 0x84
 8003276:	589b      	ldr	r3, [r3, r2]
 8003278:	2194      	movs	r1, #148	; 0x94
 800327a:	187a      	adds	r2, r7, r1
 800327c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2240      	movs	r2, #64	; 0x40
 8003286:	4013      	ands	r3, r2
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d004      	beq.n	8003296 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800328c:	187b      	adds	r3, r7, r1
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2228      	movs	r2, #40	; 0x28
 8003292:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003294:	d047      	beq.n	8003326 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0018      	movs	r0, r3
 800329a:	f000 fdcd 	bl	8003e38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2240      	movs	r2, #64	; 0x40
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b40      	cmp	r3, #64	; 0x40
 80032aa:	d137      	bne.n	800331c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ac:	f3ef 8310 	mrs	r3, PRIMASK
 80032b0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80032b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b4:	2090      	movs	r0, #144	; 0x90
 80032b6:	183a      	adds	r2, r7, r0
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	2301      	movs	r3, #1
 80032bc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2140      	movs	r1, #64	; 0x40
 80032d2:	438a      	bics	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032de:	f383 8810 	msr	PRIMASK, r3
}
 80032e2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <HAL_UART_IRQHandler+0x2a0>)
 80032f2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7fe fde9 	bl	8001ed0 <HAL_DMA_Abort_IT>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d01a      	beq.n	8003338 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	0018      	movs	r0, r3
 800330e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	e012      	b.n	8003338 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0018      	movs	r0, r3
 8003316:	f000 f9bd 	bl	8003694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331a:	e00d      	b.n	8003338 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	0018      	movs	r0, r3
 8003320:	f000 f9b8 	bl	8003694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	e008      	b.n	8003338 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f000 f9b3 	bl	8003694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2284      	movs	r2, #132	; 0x84
 8003332:	2100      	movs	r1, #0
 8003334:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003336:	e187      	b.n	8003648 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	46c0      	nop			; (mov r8, r8)
    return;
 800333a:	e185      	b.n	8003648 <HAL_UART_IRQHandler+0x5a4>
 800333c:	0000080f 	.word	0x0000080f
 8003340:	04000120 	.word	0x04000120
 8003344:	080040f3 	.word	0x080040f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334c:	2b01      	cmp	r3, #1
 800334e:	d000      	beq.n	8003352 <HAL_UART_IRQHandler+0x2ae>
 8003350:	e139      	b.n	80035c6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003352:	23a4      	movs	r3, #164	; 0xa4
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2210      	movs	r2, #16
 800335a:	4013      	ands	r3, r2
 800335c:	d100      	bne.n	8003360 <HAL_UART_IRQHandler+0x2bc>
 800335e:	e132      	b.n	80035c6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003360:	23a0      	movs	r3, #160	; 0xa0
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2210      	movs	r2, #16
 8003368:	4013      	ands	r3, r2
 800336a:	d100      	bne.n	800336e <HAL_UART_IRQHandler+0x2ca>
 800336c:	e12b      	b.n	80035c6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2210      	movs	r2, #16
 8003374:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2240      	movs	r2, #64	; 0x40
 800337e:	4013      	ands	r3, r2
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d000      	beq.n	8003386 <HAL_UART_IRQHandler+0x2e2>
 8003384:	e09f      	b.n	80034c6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	217e      	movs	r1, #126	; 0x7e
 8003390:	187b      	adds	r3, r7, r1
 8003392:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003394:	187b      	adds	r3, r7, r1
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d100      	bne.n	800339e <HAL_UART_IRQHandler+0x2fa>
 800339c:	e156      	b.n	800364c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2258      	movs	r2, #88	; 0x58
 80033a2:	5a9b      	ldrh	r3, [r3, r2]
 80033a4:	187a      	adds	r2, r7, r1
 80033a6:	8812      	ldrh	r2, [r2, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d300      	bcc.n	80033ae <HAL_UART_IRQHandler+0x30a>
 80033ac:	e14e      	b.n	800364c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	187a      	adds	r2, r7, r1
 80033b2:	215a      	movs	r1, #90	; 0x5a
 80033b4:	8812      	ldrh	r2, [r2, #0]
 80033b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d06f      	beq.n	80034a2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c2:	f3ef 8310 	mrs	r3, PRIMASK
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80033cc:	2301      	movs	r3, #1
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	499e      	ldr	r1, [pc, #632]	; (800365c <HAL_UART_IRQHandler+0x5b8>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f4:	f3ef 8310 	mrs	r3, PRIMASK
 80033f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	677b      	str	r3, [r7, #116]	; 0x74
 80033fe:	2301      	movs	r3, #1
 8003400:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003404:	f383 8810 	msr	PRIMASK, r3
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	438a      	bics	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003420:	f383 8810 	msr	PRIMASK, r3
}
 8003424:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003426:	f3ef 8310 	mrs	r3, PRIMASK
 800342a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800342c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342e:	673b      	str	r3, [r7, #112]	; 0x70
 8003430:	2301      	movs	r3, #1
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003436:	f383 8810 	msr	PRIMASK, r3
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2140      	movs	r1, #64	; 0x40
 8003448:	438a      	bics	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800344e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003452:	f383 8810 	msr	PRIMASK, r3
}
 8003456:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	2120      	movs	r1, #32
 800345e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003466:	f3ef 8310 	mrs	r3, PRIMASK
 800346a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800346c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003470:	2301      	movs	r3, #1
 8003472:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2110      	movs	r1, #16
 8003488:	438a      	bics	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003492:	f383 8810 	msr	PRIMASK, r3
}
 8003496:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	0018      	movs	r0, r3
 800349e:	f7fe fcdf 	bl	8001e60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2258      	movs	r2, #88	; 0x58
 80034ac:	5a9a      	ldrh	r2, [r3, r2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	215a      	movs	r1, #90	; 0x5a
 80034b2:	5a5b      	ldrh	r3, [r3, r1]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	0011      	movs	r1, r2
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fd fc16 	bl	8000cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034c4:	e0c2      	b.n	800364c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2258      	movs	r2, #88	; 0x58
 80034ca:	5a99      	ldrh	r1, [r3, r2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	225a      	movs	r2, #90	; 0x5a
 80034d0:	5a9b      	ldrh	r3, [r3, r2]
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	208e      	movs	r0, #142	; 0x8e
 80034d6:	183b      	adds	r3, r7, r0
 80034d8:	1a8a      	subs	r2, r1, r2
 80034da:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	225a      	movs	r2, #90	; 0x5a
 80034e0:	5a9b      	ldrh	r3, [r3, r2]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d100      	bne.n	80034ea <HAL_UART_IRQHandler+0x446>
 80034e8:	e0b2      	b.n	8003650 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80034ea:	183b      	adds	r3, r7, r0
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d100      	bne.n	80034f4 <HAL_UART_IRQHandler+0x450>
 80034f2:	e0ad      	b.n	8003650 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f4:	f3ef 8310 	mrs	r3, PRIMASK
 80034f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80034fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fc:	2488      	movs	r4, #136	; 0x88
 80034fe:	193a      	adds	r2, r7, r4
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	2301      	movs	r3, #1
 8003504:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4951      	ldr	r1, [pc, #324]	; (8003660 <HAL_UART_IRQHandler+0x5bc>)
 800351a:	400a      	ands	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	193b      	adds	r3, r7, r4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f383 8810 	msr	PRIMASK, r3
}
 800352a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352c:	f3ef 8310 	mrs	r3, PRIMASK
 8003530:	61bb      	str	r3, [r7, #24]
  return(result);
 8003532:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	2484      	movs	r4, #132	; 0x84
 8003536:	193a      	adds	r2, r7, r4
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	2301      	movs	r3, #1
 800353c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2101      	movs	r1, #1
 8003552:	438a      	bics	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	193b      	adds	r3, r7, r4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	2120      	movs	r1, #32
 800356a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003578:	f3ef 8310 	mrs	r3, PRIMASK
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003580:	2480      	movs	r4, #128	; 0x80
 8003582:	193a      	adds	r2, r7, r4
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	2301      	movs	r3, #1
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2110      	movs	r1, #16
 800359e:	438a      	bics	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	193b      	adds	r3, r7, r4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	f383 8810 	msr	PRIMASK, r3
}
 80035ae:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b6:	183b      	adds	r3, r7, r0
 80035b8:	881a      	ldrh	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0011      	movs	r1, r2
 80035be:	0018      	movs	r0, r3
 80035c0:	f7fd fb96 	bl	8000cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035c4:	e044      	b.n	8003650 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035c6:	23a4      	movs	r3, #164	; 0xa4
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	035b      	lsls	r3, r3, #13
 80035d0:	4013      	ands	r3, r2
 80035d2:	d010      	beq.n	80035f6 <HAL_UART_IRQHandler+0x552>
 80035d4:	239c      	movs	r3, #156	; 0x9c
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	03db      	lsls	r3, r3, #15
 80035de:	4013      	ands	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	0352      	lsls	r2, r2, #13
 80035ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 fdc1 	bl	8004176 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035f4:	e02f      	b.n	8003656 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035f6:	23a4      	movs	r3, #164	; 0xa4
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	4013      	ands	r3, r2
 8003600:	d00f      	beq.n	8003622 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003602:	23a0      	movs	r3, #160	; 0xa0
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	4013      	ands	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01e      	beq.n	8003654 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	0010      	movs	r0, r2
 800361e:	4798      	blx	r3
    }
    return;
 8003620:	e018      	b.n	8003654 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003622:	23a4      	movs	r3, #164	; 0xa4
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2240      	movs	r2, #64	; 0x40
 800362a:	4013      	ands	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_UART_IRQHandler+0x5b2>
 800362e:	23a0      	movs	r3, #160	; 0xa0
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2240      	movs	r2, #64	; 0x40
 8003636:	4013      	ands	r3, r2
 8003638:	d00d      	beq.n	8003656 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 fd6f 	bl	8004120 <UART_EndTransmit_IT>
    return;
 8003642:	e008      	b.n	8003656 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	e006      	b.n	8003656 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	e004      	b.n	8003656 <HAL_UART_IRQHandler+0x5b2>
      return;
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	e002      	b.n	8003656 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	e000      	b.n	8003656 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003654:	46c0      	nop			; (mov r8, r8)
  }

}
 8003656:	46bd      	mov	sp, r7
 8003658:	b02b      	add	sp, #172	; 0xac
 800365a:	bd90      	pop	{r4, r7, pc}
 800365c:	fffffeff 	.word	0xfffffeff
 8003660:	fffffedf 	.word	0xfffffedf

08003664 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b002      	add	sp, #8
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	46bd      	mov	sp, r7
 8003680:	b002      	add	sp, #8
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b002      	add	sp, #8
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	b002      	add	sp, #8
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036ac:	231e      	movs	r3, #30
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a8d      	ldr	r2, [pc, #564]	; (8003908 <UART_SetConfig+0x264>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	0019      	movs	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	430a      	orrs	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a88      	ldr	r2, [pc, #544]	; (800390c <UART_SetConfig+0x268>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a7f      	ldr	r2, [pc, #508]	; (8003910 <UART_SetConfig+0x26c>)
 8003712:	4013      	ands	r3, r2
 8003714:	0019      	movs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a7b      	ldr	r2, [pc, #492]	; (8003914 <UART_SetConfig+0x270>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d127      	bne.n	800377a <UART_SetConfig+0xd6>
 800372a:	4b7b      	ldr	r3, [pc, #492]	; (8003918 <UART_SetConfig+0x274>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	2203      	movs	r2, #3
 8003730:	4013      	ands	r3, r2
 8003732:	2b03      	cmp	r3, #3
 8003734:	d00d      	beq.n	8003752 <UART_SetConfig+0xae>
 8003736:	d81b      	bhi.n	8003770 <UART_SetConfig+0xcc>
 8003738:	2b02      	cmp	r3, #2
 800373a:	d014      	beq.n	8003766 <UART_SetConfig+0xc2>
 800373c:	d818      	bhi.n	8003770 <UART_SetConfig+0xcc>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <UART_SetConfig+0xa4>
 8003742:	2b01      	cmp	r3, #1
 8003744:	d00a      	beq.n	800375c <UART_SetConfig+0xb8>
 8003746:	e013      	b.n	8003770 <UART_SetConfig+0xcc>
 8003748:	231f      	movs	r3, #31
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e021      	b.n	8003796 <UART_SetConfig+0xf2>
 8003752:	231f      	movs	r3, #31
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2202      	movs	r2, #2
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e01c      	b.n	8003796 <UART_SetConfig+0xf2>
 800375c:	231f      	movs	r3, #31
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2204      	movs	r2, #4
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e017      	b.n	8003796 <UART_SetConfig+0xf2>
 8003766:	231f      	movs	r3, #31
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	2208      	movs	r2, #8
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	e012      	b.n	8003796 <UART_SetConfig+0xf2>
 8003770:	231f      	movs	r3, #31
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2210      	movs	r2, #16
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e00d      	b.n	8003796 <UART_SetConfig+0xf2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a67      	ldr	r2, [pc, #412]	; (800391c <UART_SetConfig+0x278>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d104      	bne.n	800378e <UART_SetConfig+0xea>
 8003784:	231f      	movs	r3, #31
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e003      	b.n	8003796 <UART_SetConfig+0xf2>
 800378e:	231f      	movs	r3, #31
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	2210      	movs	r2, #16
 8003794:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	429a      	cmp	r2, r3
 80037a0:	d15c      	bne.n	800385c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80037a2:	231f      	movs	r3, #31
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d015      	beq.n	80037d8 <UART_SetConfig+0x134>
 80037ac:	dc18      	bgt.n	80037e0 <UART_SetConfig+0x13c>
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d00d      	beq.n	80037ce <UART_SetConfig+0x12a>
 80037b2:	dc15      	bgt.n	80037e0 <UART_SetConfig+0x13c>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <UART_SetConfig+0x11a>
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d005      	beq.n	80037c8 <UART_SetConfig+0x124>
 80037bc:	e010      	b.n	80037e0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037be:	f7ff fb19 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 80037c2:	0003      	movs	r3, r0
 80037c4:	61bb      	str	r3, [r7, #24]
        break;
 80037c6:	e012      	b.n	80037ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c8:	4b55      	ldr	r3, [pc, #340]	; (8003920 <UART_SetConfig+0x27c>)
 80037ca:	61bb      	str	r3, [r7, #24]
        break;
 80037cc:	e00f      	b.n	80037ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ce:	f7ff fa95 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 80037d2:	0003      	movs	r3, r0
 80037d4:	61bb      	str	r3, [r7, #24]
        break;
 80037d6:	e00a      	b.n	80037ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	61bb      	str	r3, [r7, #24]
        break;
 80037de:	e006      	b.n	80037ee <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037e4:	231e      	movs	r3, #30
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
        break;
 80037ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d100      	bne.n	80037f6 <UART_SetConfig+0x152>
 80037f4:	e07a      	b.n	80038ec <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	005a      	lsls	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	18d2      	adds	r2, r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	0019      	movs	r1, r3
 8003808:	0010      	movs	r0, r2
 800380a:	f7fc fc7d 	bl	8000108 <__udivsi3>
 800380e:	0003      	movs	r3, r0
 8003810:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d91c      	bls.n	8003852 <UART_SetConfig+0x1ae>
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	025b      	lsls	r3, r3, #9
 800381e:	429a      	cmp	r2, r3
 8003820:	d217      	bcs.n	8003852 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	b29a      	uxth	r2, r3
 8003826:	200e      	movs	r0, #14
 8003828:	183b      	adds	r3, r7, r0
 800382a:	210f      	movs	r1, #15
 800382c:	438a      	bics	r2, r1
 800382e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	b29b      	uxth	r3, r3
 8003836:	2207      	movs	r2, #7
 8003838:	4013      	ands	r3, r2
 800383a:	b299      	uxth	r1, r3
 800383c:	183b      	adds	r3, r7, r0
 800383e:	183a      	adds	r2, r7, r0
 8003840:	8812      	ldrh	r2, [r2, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	183a      	adds	r2, r7, r0
 800384c:	8812      	ldrh	r2, [r2, #0]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	e04c      	b.n	80038ec <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003852:	231e      	movs	r3, #30
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e047      	b.n	80038ec <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800385c:	231f      	movs	r3, #31
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d015      	beq.n	8003892 <UART_SetConfig+0x1ee>
 8003866:	dc18      	bgt.n	800389a <UART_SetConfig+0x1f6>
 8003868:	2b04      	cmp	r3, #4
 800386a:	d00d      	beq.n	8003888 <UART_SetConfig+0x1e4>
 800386c:	dc15      	bgt.n	800389a <UART_SetConfig+0x1f6>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <UART_SetConfig+0x1d4>
 8003872:	2b02      	cmp	r3, #2
 8003874:	d005      	beq.n	8003882 <UART_SetConfig+0x1de>
 8003876:	e010      	b.n	800389a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7ff fabc 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 800387c:	0003      	movs	r3, r0
 800387e:	61bb      	str	r3, [r7, #24]
        break;
 8003880:	e012      	b.n	80038a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003882:	4b27      	ldr	r3, [pc, #156]	; (8003920 <UART_SetConfig+0x27c>)
 8003884:	61bb      	str	r3, [r7, #24]
        break;
 8003886:	e00f      	b.n	80038a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003888:	f7ff fa38 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 800388c:	0003      	movs	r3, r0
 800388e:	61bb      	str	r3, [r7, #24]
        break;
 8003890:	e00a      	b.n	80038a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	61bb      	str	r3, [r7, #24]
        break;
 8003898:	e006      	b.n	80038a8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800389e:	231e      	movs	r3, #30
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
        break;
 80038a6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01e      	beq.n	80038ec <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	085a      	lsrs	r2, r3, #1
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	18d2      	adds	r2, r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	0019      	movs	r1, r3
 80038be:	0010      	movs	r0, r2
 80038c0:	f7fc fc22 	bl	8000108 <__udivsi3>
 80038c4:	0003      	movs	r3, r0
 80038c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	d90a      	bls.n	80038e4 <UART_SetConfig+0x240>
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	025b      	lsls	r3, r3, #9
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d205      	bcs.n	80038e4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	e003      	b.n	80038ec <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80038e4:	231e      	movs	r3, #30
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038f8:	231e      	movs	r3, #30
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b008      	add	sp, #32
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	efff69f3 	.word	0xefff69f3
 800390c:	ffffcfff 	.word	0xffffcfff
 8003910:	fffff4ff 	.word	0xfffff4ff
 8003914:	40013800 	.word	0x40013800
 8003918:	40021000 	.word	0x40021000
 800391c:	40004400 	.word	0x40004400
 8003920:	007a1200 	.word	0x007a1200

08003924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2201      	movs	r2, #1
 8003932:	4013      	ands	r3, r2
 8003934:	d00b      	beq.n	800394e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4a4a      	ldr	r2, [pc, #296]	; (8003a68 <UART_AdvFeatureConfig+0x144>)
 800393e:	4013      	ands	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2202      	movs	r2, #2
 8003954:	4013      	ands	r3, r2
 8003956:	d00b      	beq.n	8003970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4a43      	ldr	r2, [pc, #268]	; (8003a6c <UART_AdvFeatureConfig+0x148>)
 8003960:	4013      	ands	r3, r2
 8003962:	0019      	movs	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	2204      	movs	r2, #4
 8003976:	4013      	ands	r3, r2
 8003978:	d00b      	beq.n	8003992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4a3b      	ldr	r2, [pc, #236]	; (8003a70 <UART_AdvFeatureConfig+0x14c>)
 8003982:	4013      	ands	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	2208      	movs	r2, #8
 8003998:	4013      	ands	r3, r2
 800399a:	d00b      	beq.n	80039b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4a34      	ldr	r2, [pc, #208]	; (8003a74 <UART_AdvFeatureConfig+0x150>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2210      	movs	r2, #16
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <UART_AdvFeatureConfig+0x154>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2220      	movs	r2, #32
 80039dc:	4013      	ands	r3, r2
 80039de:	d00b      	beq.n	80039f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <UART_AdvFeatureConfig+0x158>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2240      	movs	r2, #64	; 0x40
 80039fe:	4013      	ands	r3, r2
 8003a00:	d01d      	beq.n	8003a3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <UART_AdvFeatureConfig+0x15c>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	035b      	lsls	r3, r3, #13
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d10b      	bne.n	8003a3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <UART_AdvFeatureConfig+0x160>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2280      	movs	r2, #128	; 0x80
 8003a44:	4013      	ands	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <UART_AdvFeatureConfig+0x164>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	0019      	movs	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	fffdffff 	.word	0xfffdffff
 8003a6c:	fffeffff 	.word	0xfffeffff
 8003a70:	fffbffff 	.word	0xfffbffff
 8003a74:	ffff7fff 	.word	0xffff7fff
 8003a78:	ffffefff 	.word	0xffffefff
 8003a7c:	ffffdfff 	.word	0xffffdfff
 8003a80:	ffefffff 	.word	0xffefffff
 8003a84:	ff9fffff 	.word	0xff9fffff
 8003a88:	fff7ffff 	.word	0xfff7ffff

08003a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b092      	sub	sp, #72	; 0x48
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2284      	movs	r2, #132	; 0x84
 8003a98:	2100      	movs	r1, #0
 8003a9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a9c:	f7fd f9e0 	bl	8000e60 <HAL_GetTick>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2208      	movs	r2, #8
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d12c      	bne.n	8003b0c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab4:	2280      	movs	r2, #128	; 0x80
 8003ab6:	0391      	lsls	r1, r2, #14
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4a46      	ldr	r2, [pc, #280]	; (8003bd4 <UART_CheckIdleState+0x148>)
 8003abc:	9200      	str	r2, [sp, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f000 f88c 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003ac4:	1e03      	subs	r3, r0, #0
 8003ac6:	d021      	beq.n	8003b0c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	f383 8810 	msr	PRIMASK, r3
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2180      	movs	r1, #128	; 0x80
 8003aea:	438a      	bics	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	f383 8810 	msr	PRIMASK, r3
}
 8003af8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2278      	movs	r2, #120	; 0x78
 8003b04:	2100      	movs	r1, #0
 8003b06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e05f      	b.n	8003bcc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2204      	movs	r2, #4
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d146      	bne.n	8003ba8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	03d1      	lsls	r1, r2, #15
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4a2c      	ldr	r2, [pc, #176]	; (8003bd4 <UART_CheckIdleState+0x148>)
 8003b24:	9200      	str	r2, [sp, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f000 f858 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d03b      	beq.n	8003ba8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b30:	f3ef 8310 	mrs	r3, PRIMASK
 8003b34:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b36:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f383 8810 	msr	PRIMASK, r3
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4921      	ldr	r1, [pc, #132]	; (8003bd8 <UART_CheckIdleState+0x14c>)
 8003b52:	400a      	ands	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f383 8810 	msr	PRIMASK, r3
}
 8003b60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b62:	f3ef 8310 	mrs	r3, PRIMASK
 8003b66:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b68:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f383 8810 	msr	PRIMASK, r3
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2101      	movs	r1, #1
 8003b84:	438a      	bics	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	2120      	movs	r1, #32
 8003b9a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2278      	movs	r2, #120	; 0x78
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e011      	b.n	8003bcc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2280      	movs	r2, #128	; 0x80
 8003bb2:	2120      	movs	r1, #32
 8003bb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2278      	movs	r2, #120	; 0x78
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b010      	add	sp, #64	; 0x40
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	01ffffff 	.word	0x01ffffff
 8003bd8:	fffffedf 	.word	0xfffffedf

08003bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	1dfb      	adds	r3, r7, #7
 8003bea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bec:	e04b      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	d048      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fd f934 	bl	8000e60 <HAL_GetTick>
 8003bf8:	0002      	movs	r2, r0
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e04b      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2204      	movs	r2, #4
 8003c16:	4013      	ands	r3, r2
 8003c18:	d035      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	2208      	movs	r2, #8
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d111      	bne.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 f900 	bl	8003e38 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2284      	movs	r2, #132	; 0x84
 8003c3c:	2108      	movs	r1, #8
 8003c3e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2278      	movs	r2, #120	; 0x78
 8003c44:	2100      	movs	r1, #0
 8003c46:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e02c      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	401a      	ands	r2, r3
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d112      	bne.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f000 f8e3 	bl	8003e38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2284      	movs	r2, #132	; 0x84
 8003c76:	2120      	movs	r1, #32
 8003c78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2278      	movs	r2, #120	; 0x78
 8003c7e:	2100      	movs	r1, #0
 8003c80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00f      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	425a      	negs	r2, r3
 8003c96:	4153      	adcs	r3, r2
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	1dfb      	adds	r3, r7, #7
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d0a4      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b090      	sub	sp, #64	; 0x40
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	1dbb      	adds	r3, r7, #6
 8003cbc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1dba      	adds	r2, r7, #6
 8003cc8:	2158      	movs	r1, #88	; 0x58
 8003cca:	8812      	ldrh	r2, [r2, #0]
 8003ccc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2284      	movs	r2, #132	; 0x84
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2280      	movs	r2, #128	; 0x80
 8003cda:	2122      	movs	r1, #34	; 0x22
 8003cdc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d028      	beq.n	8003d38 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cea:	4a3e      	ldr	r2, [pc, #248]	; (8003de4 <UART_Start_Receive_DMA+0x134>)
 8003cec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf2:	4a3d      	ldr	r2, [pc, #244]	; (8003de8 <UART_Start_Receive_DMA+0x138>)
 8003cf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	4a3c      	ldr	r2, [pc, #240]	; (8003dec <UART_Start_Receive_DMA+0x13c>)
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	2200      	movs	r2, #0
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3324      	adds	r3, #36	; 0x24
 8003d10:	0019      	movs	r1, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	001a      	movs	r2, r3
 8003d18:	1dbb      	adds	r3, r7, #6
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f7fe f83a 	bl	8001d94 <HAL_DMA_Start_IT>
 8003d20:	1e03      	subs	r3, r0, #0
 8003d22:	d009      	beq.n	8003d38 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2284      	movs	r2, #132	; 0x84
 8003d28:	2110      	movs	r1, #16
 8003d2a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	2120      	movs	r1, #32
 8003d32:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e050      	b.n	8003dda <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d019      	beq.n	8003d74 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d40:	f3ef 8310 	mrs	r3, PRIMASK
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	f383 8810 	msr	PRIMASK, r3
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	0049      	lsls	r1, r1, #1
 8003d64:	430a      	orrs	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	f383 8810 	msr	PRIMASK, r3
}
 8003d72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d74:	f3ef 8310 	mrs	r3, PRIMASK
 8003d78:	613b      	str	r3, [r7, #16]
  return(result);
 8003d7a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d7e:	2301      	movs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f383 8810 	msr	PRIMASK, r3
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2101      	movs	r1, #1
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f383 8810 	msr	PRIMASK, r3
}
 8003da4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da6:	f3ef 8310 	mrs	r3, PRIMASK
 8003daa:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dac:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	2301      	movs	r3, #1
 8003db2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	f383 8810 	msr	PRIMASK, r3
}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2140      	movs	r1, #64	; 0x40
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	f383 8810 	msr	PRIMASK, r3
}
 8003dd6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b010      	add	sp, #64	; 0x40
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	08003f01 	.word	0x08003f01
 8003de8:	0800402d 	.word	0x0800402d
 8003dec:	0800406f 	.word	0x0800406f

08003df0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	2301      	movs	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f383 8810 	msr	PRIMASK, r3
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	21c0      	movs	r1, #192	; 0xc0
 8003e1a:	438a      	bics	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f383 8810 	msr	PRIMASK, r3
}
 8003e28:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b006      	add	sp, #24
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08e      	sub	sp, #56	; 0x38
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e40:	f3ef 8310 	mrs	r3, PRIMASK
 8003e44:	617b      	str	r3, [r7, #20]
  return(result);
 8003e46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f383 8810 	msr	PRIMASK, r3
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4926      	ldr	r1, [pc, #152]	; (8003efc <UART_EndRxTransfer+0xc4>)
 8003e62:	400a      	ands	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f383 8810 	msr	PRIMASK, r3
}
 8003e70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e72:	f3ef 8310 	mrs	r3, PRIMASK
 8003e76:	623b      	str	r3, [r7, #32]
  return(result);
 8003e78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	f383 8810 	msr	PRIMASK, r3
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2101      	movs	r1, #1
 8003e94:	438a      	bics	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d118      	bne.n	8003ede <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eac:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2110      	movs	r1, #16
 8003ece:	438a      	bics	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f383 8810 	msr	PRIMASK, r3
}
 8003edc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2280      	movs	r2, #128	; 0x80
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b00e      	add	sp, #56	; 0x38
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	fffffedf 	.word	0xfffffedf

08003f00 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b094      	sub	sp, #80	; 0x50
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d06f      	beq.n	8003ff6 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f18:	225a      	movs	r2, #90	; 0x5a
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f22:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f24:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f28:	2301      	movs	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f383 8810 	msr	PRIMASK, r3
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	493a      	ldr	r1, [pc, #232]	; (8004028 <UART_DMAReceiveCplt+0x128>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f383 8810 	msr	PRIMASK, r3
}
 8003f4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f50:	f3ef 8310 	mrs	r3, PRIMASK
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	f383 8810 	msr	PRIMASK, r3
}
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	438a      	bics	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]
 8003f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	f383 8810 	msr	PRIMASK, r3
}
 8003f80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2140      	movs	r1, #64	; 0x40
 8003fa4:	438a      	bics	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003faa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	2120      	movs	r1, #32
 8003fba:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d118      	bne.n	8003ff6 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fca:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fce:	2301      	movs	r3, #1
 8003fd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f383 8810 	msr	PRIMASK, r3
}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2110      	movs	r1, #16
 8003fe6:	438a      	bics	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f383 8810 	msr	PRIMASK, r3
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004000:	2b01      	cmp	r3, #1
 8004002:	d108      	bne.n	8004016 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004006:	2258      	movs	r2, #88	; 0x58
 8004008:	5a9a      	ldrh	r2, [r3, r2]
 800400a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400c:	0011      	movs	r1, r2
 800400e:	0018      	movs	r0, r3
 8004010:	f7fc fe6e 	bl	8000cf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004014:	e003      	b.n	800401e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff fb2b 	bl	8003674 <HAL_UART_RxCpltCallback>
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b014      	add	sp, #80	; 0x50
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	fffffeff 	.word	0xfffffeff

0800402c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004044:	2b01      	cmp	r3, #1
 8004046:	d10a      	bne.n	800405e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2258      	movs	r2, #88	; 0x58
 800404c:	5a9b      	ldrh	r3, [r3, r2]
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	0011      	movs	r1, r2
 8004056:	0018      	movs	r0, r3
 8004058:	f7fc fe4a 	bl	8000cf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800405c:	e003      	b.n	8004066 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff fb0f 	bl	8003684 <HAL_UART_RxHalfCpltCallback>
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}

0800406e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004080:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	589b      	ldr	r3, [r3, r2]
 8004088:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2280      	movs	r2, #128	; 0x80
 8004092:	4013      	ands	r3, r2
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d10a      	bne.n	80040ae <UART_DMAError+0x40>
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b21      	cmp	r3, #33	; 0x21
 800409c:	d107      	bne.n	80040ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2252      	movs	r2, #82	; 0x52
 80040a2:	2100      	movs	r1, #0
 80040a4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7ff fea1 	bl	8003df0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2240      	movs	r2, #64	; 0x40
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d10a      	bne.n	80040d2 <UART_DMAError+0x64>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b22      	cmp	r3, #34	; 0x22
 80040c0:	d107      	bne.n	80040d2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	225a      	movs	r2, #90	; 0x5a
 80040c6:	2100      	movs	r1, #0
 80040c8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff feb3 	bl	8003e38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2284      	movs	r2, #132	; 0x84
 80040d6:	589b      	ldr	r3, [r3, r2]
 80040d8:	2210      	movs	r2, #16
 80040da:	431a      	orrs	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2184      	movs	r1, #132	; 0x84
 80040e0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff fad5 	bl	8003694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b006      	add	sp, #24
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	225a      	movs	r2, #90	; 0x5a
 8004104:	2100      	movs	r1, #0
 8004106:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2252      	movs	r2, #82	; 0x52
 800410c:	2100      	movs	r1, #0
 800410e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	0018      	movs	r0, r3
 8004114:	f7ff fabe 	bl	8003694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b004      	add	sp, #16
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	60bb      	str	r3, [r7, #8]
  return(result);
 800412e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	2301      	movs	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2140      	movs	r1, #64	; 0x40
 800414a:	438a      	bics	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	0018      	movs	r0, r3
 800416a:	f7ff fa7b 	bl	8003664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b006      	add	sp, #24
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	b002      	add	sp, #8
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004186:	b5b0      	push	{r4, r5, r7, lr}
 8004188:	b08a      	sub	sp, #40	; 0x28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	1dbb      	adds	r3, r7, #6
 8004192:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2280      	movs	r2, #128	; 0x80
 8004198:	589b      	ldr	r3, [r3, r2]
 800419a:	2b20      	cmp	r3, #32
 800419c:	d156      	bne.n	800424c <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80041a4:	1dbb      	adds	r3, r7, #6
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e04e      	b.n	800424e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d109      	bne.n	80041d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2201      	movs	r2, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d001      	beq.n	80041d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e03e      	b.n	800424e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80041dc:	2527      	movs	r5, #39	; 0x27
 80041de:	197c      	adds	r4, r7, r5
 80041e0:	1dbb      	adds	r3, r7, #6
 80041e2:	881a      	ldrh	r2, [r3, #0]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7ff fd61 	bl	8003cb0 <UART_Start_Receive_DMA>
 80041ee:	0003      	movs	r3, r0
 80041f0:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80041f2:	197b      	adds	r3, r7, r5
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d124      	bne.n	8004244 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d11c      	bne.n	800423c <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2210      	movs	r2, #16
 8004208:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420a:	f3ef 8310 	mrs	r3, PRIMASK
 800420e:	617b      	str	r3, [r7, #20]
  return(result);
 8004210:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004212:	623b      	str	r3, [r7, #32]
 8004214:	2301      	movs	r3, #1
 8004216:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f383 8810 	msr	PRIMASK, r3
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2110      	movs	r1, #16
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f383 8810 	msr	PRIMASK, r3
}
 800423a:	e003      	b.n	8004244 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800423c:	2327      	movs	r3, #39	; 0x27
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	2201      	movs	r2, #1
 8004242:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004244:	2327      	movs	r3, #39	; 0x27
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	e000      	b.n	800424e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800424c:	2302      	movs	r3, #2
  }
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b00a      	add	sp, #40	; 0x28
 8004254:	bdb0      	pop	{r4, r5, r7, pc}

08004256 <memset>:
 8004256:	0003      	movs	r3, r0
 8004258:	1882      	adds	r2, r0, r2
 800425a:	4293      	cmp	r3, r2
 800425c:	d100      	bne.n	8004260 <memset+0xa>
 800425e:	4770      	bx	lr
 8004260:	7019      	strb	r1, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	e7f9      	b.n	800425a <memset+0x4>
	...

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	2600      	movs	r6, #0
 800426c:	4c0c      	ldr	r4, [pc, #48]	; (80042a0 <__libc_init_array+0x38>)
 800426e:	4d0d      	ldr	r5, [pc, #52]	; (80042a4 <__libc_init_array+0x3c>)
 8004270:	1b64      	subs	r4, r4, r5
 8004272:	10a4      	asrs	r4, r4, #2
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	2600      	movs	r6, #0
 800427a:	f000 f823 	bl	80042c4 <_init>
 800427e:	4c0a      	ldr	r4, [pc, #40]	; (80042a8 <__libc_init_array+0x40>)
 8004280:	4d0a      	ldr	r5, [pc, #40]	; (80042ac <__libc_init_array+0x44>)
 8004282:	1b64      	subs	r4, r4, r5
 8004284:	10a4      	asrs	r4, r4, #2
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	00b3      	lsls	r3, r6, #2
 800428e:	58eb      	ldr	r3, [r5, r3]
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	00b3      	lsls	r3, r6, #2
 8004298:	58eb      	ldr	r3, [r5, r3]
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004318 	.word	0x08004318
 80042a4:	08004318 	.word	0x08004318
 80042a8:	0800431c 	.word	0x0800431c
 80042ac:	08004318 	.word	0x08004318

080042b0 <memcpy>:
 80042b0:	2300      	movs	r3, #0
 80042b2:	b510      	push	{r4, lr}
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d100      	bne.n	80042ba <memcpy+0xa>
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	5ccc      	ldrb	r4, [r1, r3]
 80042bc:	54c4      	strb	r4, [r0, r3]
 80042be:	3301      	adds	r3, #1
 80042c0:	e7f8      	b.n	80042b4 <memcpy+0x4>
	...

080042c4 <_init>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr

080042d0 <_fini>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr
