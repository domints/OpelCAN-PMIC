
OpelCAN_PMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e8  080043e8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080043e8  080043e8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043e8  080043e8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080043f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000020  08004410  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08004410  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2b7  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022bc  00000000  00000000  0002c342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073e  00000000  00000000  0002ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018359  00000000  00000000  0002f6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca2e  00000000  00000000  00047a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088863  00000000  00000000  0005444d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002000  00000000  00000000  000dccb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000decb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004394 	.word	0x08004394

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08004394 	.word	0x08004394

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <can_tx_set_hcan>:
uint8_t audio_album_len;

void _can_tx_send_msg(CAN_Tx_Msg_t *message);
void _can_tx_send_and_dequeue();

void can_tx_set_hcan(CAN_HandleTypeDef *hcan) {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	can_tx_hcan = *hcan;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <can_tx_set_hcan+0x3c>)
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800022e:	c313      	stmia	r3!, {r0, r1, r4}
 8000230:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000232:	c313      	stmia	r3!, {r0, r1, r4}
 8000234:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000236:	c313      	stmia	r3!, {r0, r1, r4}
 8000238:	6812      	ldr	r2, [r2, #0]
 800023a:	601a      	str	r2, [r3, #0]

	TxHeader.ExtId = 0x01;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <can_tx_set_hcan+0x40>)
 800023e:	2201      	movs	r2, #1
 8000240:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <can_tx_set_hcan+0x40>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <can_tx_set_hcan+0x40>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <can_tx_set_hcan+0x40>)
 8000250:	2200      	movs	r2, #0
 8000252:	751a      	strb	r2, [r3, #20]
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b003      	add	sp, #12
 800025a:	bd90      	pop	{r4, r7, pc}
 800025c:	2000003c 	.word	0x2000003c
 8000260:	20000064 	.word	0x20000064

08000264 <can_tx_send_packet>:
	}

	audio_album_len = len;
}

void can_tx_send_packet(uint32_t id, uint8_t *data, uint8_t len) {
 8000264:	b5b0      	push	{r4, r5, r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	1dfb      	adds	r3, r7, #7
 8000270:	701a      	strb	r2, [r3, #0]
	if (can_tx_head == can_tx_tail && can_tx_cts) {
 8000272:	4b4a      	ldr	r3, [pc, #296]	; (800039c <can_tx_send_packet+0x138>)
 8000274:	781a      	ldrb	r2, [r3, #0]
 8000276:	4b4a      	ldr	r3, [pc, #296]	; (80003a0 <can_tx_send_packet+0x13c>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	429a      	cmp	r2, r3
 800027c:	d136      	bne.n	80002ec <can_tx_send_packet+0x88>
 800027e:	4b49      	ldr	r3, [pc, #292]	; (80003a4 <can_tx_send_packet+0x140>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d032      	beq.n	80002ec <can_tx_send_packet+0x88>
		CAN_Tx_Msg_t msg = { .id = id, .len = len };
 8000286:	2414      	movs	r4, #20
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	2310      	movs	r3, #16
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f004 f848 	bl	8004326 <memset>
 8000296:	193b      	adds	r3, r7, r4
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	193b      	adds	r3, r7, r4
 800029e:	1dfa      	adds	r2, r7, #7
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	731a      	strb	r2, [r3, #12]

		for (uint8_t i = 0; i < len; i++) {
 80002a4:	2327      	movs	r3, #39	; 0x27
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
 80002ac:	e011      	b.n	80002d2 <can_tx_send_packet+0x6e>
			msg.data[i] = data[i];
 80002ae:	2027      	movs	r0, #39	; 0x27
 80002b0:	183b      	adds	r3, r7, r0
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	68ba      	ldr	r2, [r7, #8]
 80002b6:	18d2      	adds	r2, r2, r3
 80002b8:	183b      	adds	r3, r7, r0
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	7811      	ldrb	r1, [r2, #0]
 80002be:	2214      	movs	r2, #20
 80002c0:	18ba      	adds	r2, r7, r2
 80002c2:	18d3      	adds	r3, r2, r3
 80002c4:	1c0a      	adds	r2, r1, #0
 80002c6:	711a      	strb	r2, [r3, #4]
		for (uint8_t i = 0; i < len; i++) {
 80002c8:	183b      	adds	r3, r7, r0
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	183b      	adds	r3, r7, r0
 80002ce:	3201      	adds	r2, #1
 80002d0:	701a      	strb	r2, [r3, #0]
 80002d2:	2327      	movs	r3, #39	; 0x27
 80002d4:	18fa      	adds	r2, r7, r3
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d3e6      	bcc.n	80002ae <can_tx_send_packet+0x4a>
		}

		_can_tx_send_msg(&msg);
 80002e0:	2314      	movs	r3, #20
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 f88b 	bl	8000400 <_can_tx_send_msg>
 80002ea:	e053      	b.n	8000394 <can_tx_send_packet+0x130>
		return;
	}

	uint8_t next;

	next = can_tx_head + 1; // next is where head will point to after this write.
 80002ec:	4b2b      	ldr	r3, [pc, #172]	; (800039c <can_tx_send_packet+0x138>)
 80002ee:	781a      	ldrb	r2, [r3, #0]
 80002f0:	2126      	movs	r1, #38	; 0x26
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	3201      	adds	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
	if (next >= CAN_MAILBOX_LENGTH)
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b17      	cmp	r3, #23
 80002fe:	d902      	bls.n	8000306 <can_tx_send_packet+0xa2>
		next = 0;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]

	if (next == can_tx_tail) // if the head + 1 == tail, circular buffer is full
 8000306:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <can_tx_send_packet+0x13c>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2226      	movs	r2, #38	; 0x26
 800030c:	18ba      	adds	r2, r7, r2
 800030e:	7812      	ldrb	r2, [r2, #0]
 8000310:	429a      	cmp	r2, r3
 8000312:	d03e      	beq.n	8000392 <can_tx_send_packet+0x12e>
		return;

	can_tx_mailbox[can_tx_head].id = id;
 8000314:	4b21      	ldr	r3, [pc, #132]	; (800039c <can_tx_send_packet+0x138>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	001a      	movs	r2, r3
 800031a:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <can_tx_send_packet+0x144>)
 800031c:	0112      	lsls	r2, r2, #4
 800031e:	68f9      	ldr	r1, [r7, #12]
 8000320:	50d1      	str	r1, [r2, r3]
	can_tx_mailbox[can_tx_head].len = len;
 8000322:	4b1e      	ldr	r3, [pc, #120]	; (800039c <can_tx_send_packet+0x138>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	4a20      	ldr	r2, [pc, #128]	; (80003a8 <can_tx_send_packet+0x144>)
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	18d3      	adds	r3, r2, r3
 800032c:	330c      	adds	r3, #12
 800032e:	1dfa      	adds	r2, r7, #7
 8000330:	7812      	ldrb	r2, [r2, #0]
 8000332:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8000334:	2325      	movs	r3, #37	; 0x25
 8000336:	18fb      	adds	r3, r7, r3
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
 800033c:	e016      	b.n	800036c <can_tx_send_packet+0x108>
		can_tx_mailbox[can_tx_head].data[i] = data[i];
 800033e:	2525      	movs	r5, #37	; 0x25
 8000340:	197b      	adds	r3, r7, r5
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	68ba      	ldr	r2, [r7, #8]
 8000346:	18d2      	adds	r2, r2, r3
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <can_tx_send_packet+0x138>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	001c      	movs	r4, r3
 800034e:	197b      	adds	r3, r7, r5
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	7810      	ldrb	r0, [r2, #0]
 8000354:	4914      	ldr	r1, [pc, #80]	; (80003a8 <can_tx_send_packet+0x144>)
 8000356:	0122      	lsls	r2, r4, #4
 8000358:	188a      	adds	r2, r1, r2
 800035a:	18d3      	adds	r3, r2, r3
 800035c:	3304      	adds	r3, #4
 800035e:	1c02      	adds	r2, r0, #0
 8000360:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8000362:	197b      	adds	r3, r7, r5
 8000364:	781a      	ldrb	r2, [r3, #0]
 8000366:	197b      	adds	r3, r7, r5
 8000368:	3201      	adds	r2, #1
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	2325      	movs	r3, #37	; 0x25
 800036e:	18fa      	adds	r2, r7, r3
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	429a      	cmp	r2, r3
 8000378:	d3e1      	bcc.n	800033e <can_tx_send_packet+0xda>
	}

	can_tx_head = next;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <can_tx_send_packet+0x138>)
 800037c:	2226      	movs	r2, #38	; 0x26
 800037e:	18ba      	adds	r2, r7, r2
 8000380:	7812      	ldrb	r2, [r2, #0]
 8000382:	701a      	strb	r2, [r3, #0]

	if (can_tx_cts) {
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <can_tx_send_packet+0x140>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d003      	beq.n	8000394 <can_tx_send_packet+0x130>
		_can_tx_send_and_dequeue();
 800038c:	f000 f80e 	bl	80003ac <_can_tx_send_and_dequeue>
 8000390:	e000      	b.n	8000394 <can_tx_send_packet+0x130>
		return;
 8000392:	46c0      	nop			; (mov r8, r8)
	}
}
 8000394:	46bd      	mov	sp, r7
 8000396:	b00a      	add	sp, #40	; 0x28
 8000398:	bdb0      	pop	{r4, r5, r7, pc}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	20000208 	.word	0x20000208
 80003a0:	20000209 	.word	0x20000209
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000088 	.word	0x20000088

080003ac <_can_tx_send_and_dequeue>:

void _can_tx_send_and_dequeue() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
	int next;

	if (can_tx_head == can_tx_tail)  // if the head == tail, we don't have any data
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <_can_tx_send_and_dequeue+0x48>)
 80003b4:	781a      	ldrb	r2, [r3, #0]
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <_can_tx_send_and_dequeue+0x4c>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d015      	beq.n	80003ea <_can_tx_send_and_dequeue+0x3e>
		return;

	next = can_tx_tail + 1;  // next is where tail will point to after this read.
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <_can_tx_send_and_dequeue+0x4c>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	3301      	adds	r3, #1
 80003c4:	607b      	str	r3, [r7, #4]
	if (next >= CAN_MAILBOX_LENGTH)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2b17      	cmp	r3, #23
 80003ca:	dd01      	ble.n	80003d0 <_can_tx_send_and_dequeue+0x24>
		next = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	607b      	str	r3, [r7, #4]

	_can_tx_send_msg(&can_tx_mailbox[can_tx_tail]);  // Read data and then move
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <_can_tx_send_and_dequeue+0x4c>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	011a      	lsls	r2, r3, #4
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <_can_tx_send_and_dequeue+0x50>)
 80003d8:	18d3      	adds	r3, r2, r3
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 f810 	bl	8000400 <_can_tx_send_msg>
	can_tx_tail = next;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <_can_tx_send_and_dequeue+0x4c>)
 80003e6:	701a      	strb	r2, [r3, #0]
 80003e8:	e000      	b.n	80003ec <_can_tx_send_and_dequeue+0x40>
		return;
 80003ea:	46c0      	nop			; (mov r8, r8)
}
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b002      	add	sp, #8
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	20000208 	.word	0x20000208
 80003f8:	20000209 	.word	0x20000209
 80003fc:	20000088 	.word	0x20000088

08000400 <_can_tx_send_msg>:

void _can_tx_send_msg(CAN_Tx_Msg_t *message) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	can_tx_cts = false;
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <_can_tx_send_msg+0xa0>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
	TxHeader.StdId = message->id;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <_can_tx_send_msg+0xa4>)
 8000414:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = message->len;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	7b1b      	ldrb	r3, [r3, #12]
 800041a:	001a      	movs	r2, r3
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <_can_tx_send_msg+0xa4>)
 800041e:	611a      	str	r2, [r3, #16]

	for (uint8_t i = 0; i < message->len; i++) {
 8000420:	230f      	movs	r3, #15
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
 8000428:	e00e      	b.n	8000448 <_can_tx_send_msg+0x48>
		TxData[i] = message->data[i];
 800042a:	200f      	movs	r0, #15
 800042c:	183b      	adds	r3, r7, r0
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	183b      	adds	r3, r7, r0
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	6879      	ldr	r1, [r7, #4]
 8000436:	188a      	adds	r2, r1, r2
 8000438:	7911      	ldrb	r1, [r2, #4]
 800043a:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <_can_tx_send_msg+0xa8>)
 800043c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < message->len; i++) {
 800043e:	183b      	adds	r3, r7, r0
 8000440:	781a      	ldrb	r2, [r3, #0]
 8000442:	183b      	adds	r3, r7, r0
 8000444:	3201      	adds	r2, #1
 8000446:	701a      	strb	r2, [r3, #0]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	7b1b      	ldrb	r3, [r3, #12]
 800044c:	220f      	movs	r2, #15
 800044e:	18ba      	adds	r2, r7, r2
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	429a      	cmp	r2, r3
 8000454:	d3e9      	bcc.n	800042a <_can_tx_send_msg+0x2a>
	}

	for (uint8_t i = message->len; i < 8; i++) {
 8000456:	230e      	movs	r3, #14
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	7b12      	ldrb	r2, [r2, #12]
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e00a      	b.n	8000478 <_can_tx_send_msg+0x78>
		TxData[i] = 0x00;
 8000462:	200e      	movs	r0, #14
 8000464:	183b      	adds	r3, r7, r0
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <_can_tx_send_msg+0xa8>)
 800046a:	2100      	movs	r1, #0
 800046c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = message->len; i < 8; i++) {
 800046e:	183b      	adds	r3, r7, r0
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	183b      	adds	r3, r7, r0
 8000474:	3201      	adds	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	230e      	movs	r3, #14
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b07      	cmp	r3, #7
 8000480:	d9ef      	bls.n	8000462 <_can_tx_send_msg+0x62>
	}

	if (HAL_CAN_AddTxMessage(&can_tx_hcan, &TxHeader, TxData, &TxMailbox)
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <_can_tx_send_msg+0xac>)
 8000484:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <_can_tx_send_msg+0xa8>)
 8000486:	4907      	ldr	r1, [pc, #28]	; (80004a4 <_can_tx_send_msg+0xa4>)
 8000488:	4809      	ldr	r0, [pc, #36]	; (80004b0 <_can_tx_send_msg+0xb0>)
 800048a:	f000 ff91 	bl	80013b0 <HAL_CAN_AddTxMessage>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <_can_tx_send_msg+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000492:	f000 fb11 	bl	8000ab8 <Error_Handler>
	}
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b004      	add	sp, #16
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	20000000 	.word	0x20000000
 80004a4:	20000064 	.word	0x20000064
 80004a8:	2000007c 	.word	0x2000007c
 80004ac:	20000084 	.word	0x20000084
 80004b0:	2000003c 	.word	0x2000003c

080004b4 <HAL_CAN_TxMailbox0CompleteCallback>:



void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	can_tx_cts = true;
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80004be:	2201      	movs	r2, #1
 80004c0:	701a      	strb	r2, [r3, #0]
	_can_tx_send_and_dequeue();
 80004c2:	f7ff ff73 	bl	80003ac <_can_tx_send_and_dequeue>
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000000 	.word	0x20000000

080004d4 <circ_buf_push_bytes>:
	c->buffer[c->head] = data;  // Load data and then move
	c->head = next;             // head to next data offset.
	return 0;  // return success to indicate successful push.
}

int circ_buf_push_bytes(circ_buf_t *c, uint8_t *data, int size) {
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b08d      	sub	sp, #52	; 0x34
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
	if (size > c->maxlen) {
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	dd02      	ble.n	80004f0 <circ_buf_push_bytes+0x1c>
		return -1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	425b      	negs	r3, r3
 80004ee:	e07f      	b.n	80005f0 <circ_buf_push_bytes+0x11c>
	}

	int sizeToWrite = size;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	62fb      	str	r3, [r7, #44]	; 0x2c

	int maxSize = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (c->tail > c-> head) {
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	689a      	ldr	r2, [r3, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	dd07      	ble.n	8000514 <circ_buf_push_bytes+0x40>
		maxSize = c->tail - c->head - 1;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	3b01      	subs	r3, #1
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
 8000512:	e009      	b.n	8000528 <circ_buf_push_bytes+0x54>
	}
	else {
		maxSize = c->maxlen - c->head + c->tail - 1;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	68da      	ldr	r2, [r3, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	1ad2      	subs	r2, r2, r3
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	18d3      	adds	r3, r2, r3
 8000524:	3b01      	subs	r3, #1
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	if (maxSize < sizeToWrite)
 8000528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800052a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052c:	429a      	cmp	r2, r3
 800052e:	da01      	bge.n	8000534 <circ_buf_push_bytes+0x60>
		sizeToWrite = maxSize;
 8000530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c

	int firstBatch = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
	int secondBatch = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	623b      	str	r3, [r7, #32]

	if (c->head + sizeToWrite > c->maxlen) {
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	685a      	ldr	r2, [r3, #4]
 8000540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000542:	18d2      	adds	r2, r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd0a      	ble.n	8000562 <circ_buf_push_bytes+0x8e>
		firstBatch = c->maxlen - c->head;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
		secondBatch = sizeToWrite - firstBatch;
 8000558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	623b      	str	r3, [r7, #32]
 8000560:	e001      	b.n	8000566 <circ_buf_push_bytes+0x92>
	} else {
		firstBatch = sizeToWrite;
 8000562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
	}

	int data_ix = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < firstBatch; i++) {
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
 800056e:	e013      	b.n	8000598 <circ_buf_push_bytes+0xc4>
		c->buffer[c->head++] = data[data_ix++];
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	61fa      	str	r2, [r7, #28]
 8000576:	001a      	movs	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1899      	adds	r1, r3, r2
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	685a      	ldr	r2, [r3, #4]
 8000584:	1c54      	adds	r4, r2, #1
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	605c      	str	r4, [r3, #4]
 800058a:	0013      	movs	r3, r2
 800058c:	18c3      	adds	r3, r0, r3
 800058e:	780a      	ldrb	r2, [r1, #0]
 8000590:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBatch; i++) {
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	3301      	adds	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69ba      	ldr	r2, [r7, #24]
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	429a      	cmp	r2, r3
 800059e:	dbe7      	blt.n	8000570 <circ_buf_push_bytes+0x9c>
	}

	if (c->head >= c->maxlen)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	db02      	blt.n	80005b2 <circ_buf_push_bytes+0xde>
		c->head = 0;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]

	if (secondBatch > 0) {
 80005b2:	6a3b      	ldr	r3, [r7, #32]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dd1a      	ble.n	80005ee <circ_buf_push_bytes+0x11a>
		for (int i = 0; i < secondBatch; i++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e013      	b.n	80005e6 <circ_buf_push_bytes+0x112>
			c->buffer[c->head++] = data[data_ix++];
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	61fa      	str	r2, [r7, #28]
 80005c4:	001a      	movs	r2, r3
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	1899      	adds	r1, r3, r2
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	685a      	ldr	r2, [r3, #4]
 80005d2:	1c54      	adds	r4, r2, #1
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	605c      	str	r4, [r3, #4]
 80005d8:	0013      	movs	r3, r2
 80005da:	18c3      	adds	r3, r0, r3
 80005dc:	780a      	ldrb	r2, [r1, #0]
 80005de:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < secondBatch; i++) {
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	3301      	adds	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	6a3b      	ldr	r3, [r7, #32]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dbe7      	blt.n	80005be <circ_buf_push_bytes+0xea>
		}
	}

	return sizeToWrite;
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b00d      	add	sp, #52	; 0x34
 80005f6:	bd90      	pop	{r4, r7, pc}

080005f8 <circ_buf_pop>:

int circ_buf_pop(circ_buf_t *c) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	int next;

	if (c->head == c->tail)  // if the head == tail, we don't have any data
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	429a      	cmp	r2, r3
 800060a:	d102      	bne.n	8000612 <circ_buf_pop+0x1a>
		return -1;
 800060c:	2301      	movs	r3, #1
 800060e:	425b      	negs	r3, r3
 8000610:	e018      	b.n	8000644 <circ_buf_pop+0x4c>

	next = c->tail + 1;  // next is where tail will point to after this read.
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
	if (next >= c->maxlen)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	db01      	blt.n	8000628 <circ_buf_pop+0x30>
		next = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]

	uint8_t val = c->buffer[c->tail];  // Read data and then move
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	18d2      	adds	r2, r2, r3
 8000632:	210b      	movs	r1, #11
 8000634:	187b      	adds	r3, r7, r1
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	701a      	strb	r2, [r3, #0]
	c->tail = next;              // tail to next offset.
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	609a      	str	r2, [r3, #8]
	return val;  // return success to indicate successful push.
 8000640:	187b      	adds	r3, r7, r1
 8000642:	781b      	ldrb	r3, [r3, #0]
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	b004      	add	sp, #16
 800064a:	bd80      	pop	{r7, pc}

0800064c <esp_reset>:

uint8_t msgCnt = 0;

void _esp_parse_command();

void esp_reset() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	mode = UART_MODE_RESET;
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <esp_reset+0x10>)
 8000652:	22fe      	movs	r2, #254	; 0xfe
 8000654:	701a      	strb	r2, [r3, #0]
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000001 	.word	0x20000001

08000660 <esp_receive_uart>:

void esp_receive_uart() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
	int available = uart_data_available();
 8000666:	f000 fb83 	bl	8000d70 <uart_data_available>
 800066a:	0003      	movs	r3, r0
 800066c:	60bb      	str	r3, [r7, #8]
	if (available) {
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d029      	beq.n	80006c8 <esp_receive_uart+0x68>
		uint8_t txdata[2] = { available & 0xFF, msgCnt };
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <esp_receive_uart+0x70>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	705a      	strb	r2, [r3, #1]
		can_tx_send_packet(0x001, txdata, 2);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2202      	movs	r2, #2
 8000688:	0019      	movs	r1, r3
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff fdea 	bl	8000264 <can_tx_send_packet>

		msgCnt++;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <esp_receive_uart+0x70>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <esp_receive_uart+0x70>)
 800069a:	701a      	strb	r2, [r3, #0]

		uint8_t txdata2[1] = { 0x69 };
 800069c:	003b      	movs	r3, r7
 800069e:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <esp_receive_uart+0x74>)
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	701a      	strb	r2, [r3, #0]
		can_tx_send_packet(0x002, txdata2, 1);
 80006a4:	003b      	movs	r3, r7
 80006a6:	2201      	movs	r2, #1
 80006a8:	0019      	movs	r1, r3
 80006aa:	2002      	movs	r0, #2
 80006ac:	f7ff fdda 	bl	8000264 <can_tx_send_packet>

		for (int i = 0; i < available; i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	e004      	b.n	80006c0 <esp_receive_uart+0x60>
			uart_get_byte();
 80006b6:	f000 fb77 	bl	8000da8 <uart_get_byte>
		for (int i = 0; i < available; i++) {
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3301      	adds	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	dbf6      	blt.n	80006b6 <esp_receive_uart+0x56>
		}
	}
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b004      	add	sp, #16
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000020a 	.word	0x2000020a
 80006d4:	080043ac 	.word	0x080043ac

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006dc:	f000 fbce 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f812 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f000 f93a 	bl	800095c <MX_GPIO_Init>
  MX_DMA_Init();
 80006e8:	f000 f91a 	bl	8000920 <MX_DMA_Init>
  MX_CAN_Init();
 80006ec:	f000 f872 	bl	80007d4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 f8e6 	bl	80008c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	uart_start(&huart1);
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <main+0x2c>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fb20 	bl	8000d3c <uart_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		esp_receive_uart();
 80006fc:	f7ff ffb0 	bl	8000660 <esp_receive_uart>
 8000700:	e7fc      	b.n	80006fc <main+0x24>
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000234 	.word	0x20000234

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b099      	sub	sp, #100	; 0x64
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	242c      	movs	r4, #44	; 0x2c
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	2334      	movs	r3, #52	; 0x34
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f003 fe04 	bl	8004326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071e:	231c      	movs	r3, #28
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	0018      	movs	r0, r3
 8000724:	2310      	movs	r3, #16
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f003 fdfc 	bl	8004326 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	0018      	movs	r0, r3
 8000732:	2318      	movs	r3, #24
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f003 fdf5 	bl	8004326 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800073c:	0021      	movs	r1, r4
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2203      	movs	r2, #3
 8000742:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2201      	movs	r2, #1
 8000748:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2201      	movs	r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2210      	movs	r2, #16
 8000754:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2202      	movs	r2, #2
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0252      	lsls	r2, r2, #9
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	22e0      	movs	r2, #224	; 0xe0
 8000768:	0392      	lsls	r2, r2, #14
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV3;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2202      	movs	r2, #2
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	187b      	adds	r3, r7, r1
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fec9 	bl	800250c <HAL_RCC_OscConfig>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800077e:	f000 f99b 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	211c      	movs	r1, #28
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2207      	movs	r2, #7
 8000788:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2202      	movs	r2, #2
 800078e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	00d2      	lsls	r2, r2, #3
 800079c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2101      	movs	r1, #1
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fa38 	bl	8002c18 <HAL_RCC_ClockConfig>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80007ac:	f000 f984 	bl	8000ab8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2201      	movs	r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2203      	movs	r2, #3
 80007ba:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fb96 	bl	8002ef0 <HAL_RCCEx_PeriphCLKConfig>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c8:	f000 f976 	bl	8000ab8 <Error_Handler>
  }
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b019      	add	sp, #100	; 0x64
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <MX_CAN_Init+0xe4>)
 80007dc:	4a37      	ldr	r2, [pc, #220]	; (80008bc <MX_CAN_Init+0xe8>)
 80007de:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 14;
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_CAN_Init+0xe4>)
 80007e2:	220e      	movs	r2, #14
 80007e4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007e6:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <MX_CAN_Init+0xe4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <MX_CAN_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80007f2:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <MX_CAN_Init+0xe4>)
 80007f4:	22c0      	movs	r2, #192	; 0xc0
 80007f6:	0312      	lsls	r2, r2, #12
 80007f8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <MX_CAN_Init+0xe4>)
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	0352      	lsls	r2, r2, #13
 8000800:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_CAN_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_CAN_Init+0xe4>)
 800080a:	2201      	movs	r2, #1
 800080c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_CAN_Init+0xe4>)
 8000810:	2201      	movs	r2, #1
 8000812:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <MX_CAN_Init+0xe4>)
 8000816:	2201      	movs	r2, #1
 8000818:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_CAN_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_CAN_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_CAN_Init+0xe4>)
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fb8b 	bl	8000f44 <HAL_CAN_Init>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000832:	f000 f941 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

	can_tx_set_hcan(&hcan);
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_CAN_Init+0xe4>)
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fcf1 	bl	8000220 <can_tx_set_hcan>

	sFilterConfig.FilterBank = 0;
 800083e:	003b      	movs	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000844:	003b      	movs	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800084a:	003b      	movs	r3, r7
 800084c:	2201      	movs	r2, #1
 800084e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000856:	003b      	movs	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800085c:	003b      	movs	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000868:	003b      	movs	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800086e:	003b      	movs	r3, r7
 8000870:	2201      	movs	r2, #1
 8000872:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000874:	003b      	movs	r3, r7
 8000876:	220e      	movs	r2, #14
 8000878:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 800087a:	003a      	movs	r2, r7
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_CAN_Init+0xe4>)
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f000 fc5d 	bl	8001140 <HAL_CAN_ConfigFilter>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_CAN_Init+0xba>
		/* Filter configuration Error */
		Error_Handler();
 800088a:	f000 f915 	bl	8000ab8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_CAN_Init+0xe4>)
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fd47 	bl	8001324 <HAL_CAN_Start>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_CAN_Init+0xca>
		/* Start Error */
		Error_Handler();
 800089a:	f000 f90d 	bl	8000ab8 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_CAN_Init+0xe4>)
 80008a0:	2103      	movs	r1, #3
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 ff81 	bl	80017aa <HAL_CAN_ActivateNotification>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_CAN_Init+0xdc>
		/* Notification Error */
		Error_Handler();
 80008ac:	f000 f904 	bl	8000ab8 <Error_Handler>
	}
  /* USER CODE END CAN_Init 2 */

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b00a      	add	sp, #40	; 0x28
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000020c 	.word	0x2000020c
 80008bc:	40006400 	.word	0x40006400

080008c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_USART1_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	0252      	lsls	r2, r2, #9
 80008d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <MX_USART1_UART_Init+0x58>)
 8000904:	0018      	movs	r0, r3
 8000906:	f002 fbe1 	bl	80030cc <HAL_UART_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800090e:	f000 f8d3 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000234 	.word	0x20000234
 800091c:	40013800 	.word	0x40013800

08000920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_DMA_Init+0x38>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_DMA_Init+0x38>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_DMA_Init+0x38>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	200a      	movs	r0, #10
 8000944:	f001 fa14 	bl	8001d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000948:	200a      	movs	r0, #10
 800094a:	f001 fa26 	bl	8001d9a <HAL_NVIC_EnableIRQ>

}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40021000 	.word	0x40021000

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	240c      	movs	r4, #12
 8000964:	193b      	adds	r3, r7, r4
 8000966:	0018      	movs	r0, r3
 8000968:	2314      	movs	r3, #20
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f003 fcda 	bl	8004326 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_GPIO_Init+0xa0>)
 8000974:	695a      	ldr	r2, [r3, #20]
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_GPIO_Init+0xa0>)
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	03c9      	lsls	r1, r1, #15
 800097c:	430a      	orrs	r2, r1
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_GPIO_Init+0xa0>)
 8000982:	695a      	ldr	r2, [r3, #20]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	03db      	lsls	r3, r3, #15
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_GPIO_Init+0xa0>)
 8000990:	695a      	ldr	r2, [r3, #20]
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_GPIO_Init+0xa0>)
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	0289      	lsls	r1, r1, #10
 8000998:	430a      	orrs	r2, r1
 800099a:	615a      	str	r2, [r3, #20]
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_GPIO_Init+0xa0>)
 800099e:	695a      	ldr	r2, [r3, #20]
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	029b      	lsls	r3, r3, #10
 80009a4:	4013      	ands	r3, r2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	0059      	lsls	r1, r3, #1
 80009ae:	2390      	movs	r3, #144	; 0x90
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	2201      	movs	r2, #1
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 fd8b 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	0219      	lsls	r1, r3, #8
 80009be:	2390      	movs	r3, #144	; 0x90
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	2200      	movs	r2, #0
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fd83 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_LP_Pin BUCK_EN_Pin */
  GPIO_InitStruct.Pin = CAN_LP_Pin|BUCK_EN_Pin;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2281      	movs	r2, #129	; 0x81
 80009ce:	0212      	lsls	r2, r2, #8
 80009d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2201      	movs	r2, #1
 80009d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	193a      	adds	r2, r7, r4
 80009e6:	2390      	movs	r3, #144	; 0x90
 80009e8:	05db      	lsls	r3, r3, #23
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 fc07 	bl	8002200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b009      	add	sp, #36	; 0x24
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hCan) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hCan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f000 fda0 	bl	8001554 <HAL_CAN_GetRxMessage>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
		/* Reception Error */
		Error_Handler();
 8000a18:	f000 f84e 	bl	8000ab8 <Error_Handler>
	}

	if ((RxHeader.StdId == OPEL_POWER_ID) && (RxHeader.IDE == CAN_ID_STD)
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d112      	bne.n	8000a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10e      	bne.n	8000a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			&& (RxHeader.DLC == 8)) {
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000a30:	691b      	ldr	r3, [r3, #16]
 8000a32:	2b08      	cmp	r3, #8
 8000a34:	d10a      	bne.n	8000a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		if (RxData[6] & 0x40) {
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000a38:	799b      	ldrb	r3, [r3, #6]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2340      	movs	r3, #64	; 0x40
 8000a3e:	4013      	ands	r3, r2
 8000a40:	d002      	beq.n	8000a48 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			Audio_Start();
 8000a42:	f000 f80d 	bl	8000a60 <Audio_Start>
		} else {
			Audio_Kill();
		}
	}
}
 8000a46:	e001      	b.n	8000a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			Audio_Kill();
 8000a48:	f000 f81f 	bl	8000a8a <Audio_Kill>
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000031c 	.word	0x2000031c
 8000a58:	20000300 	.word	0x20000300
 8000a5c:	00000501 	.word	0x00000501

08000a60 <Audio_Start>:

void Audio_Start() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	0219      	lsls	r1, r3, #8
 8000a68:	2390      	movs	r3, #144	; 0x90
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f001 fd2e 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_RESET);
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	0059      	lsls	r1, r3, #1
 8000a78:	2390      	movs	r3, #144	; 0x90
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f001 fd26 	bl	80024d0 <HAL_GPIO_WritePin>
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <Audio_Kill>:

void Audio_Kill() {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	0059      	lsls	r1, r3, #1
 8000a92:	2390      	movs	r3, #144	; 0x90
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	2201      	movs	r2, #1
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 fd19 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	0219      	lsls	r1, r3, #8
 8000aa2:	2390      	movs	r3, #144	; 0x90
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f001 fd11 	bl	80024d0 <HAL_GPIO_WritePin>

	esp_reset();
 8000aae:	f7ff fdcd 	bl	800064c <esp_reset>
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x44>)
 8000acc:	699a      	ldr	r2, [r3, #24]
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	619a      	str	r2, [r3, #24]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae4:	69da      	ldr	r2, [r3, #28]
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	0549      	lsls	r1, r1, #21
 8000aec:	430a      	orrs	r2, r1
 8000aee:	61da      	str	r2, [r3, #28]
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_MspInit+0x44>)
 8000af2:	69da      	ldr	r2, [r3, #28]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	055b      	lsls	r3, r3, #21
 8000af8:	4013      	ands	r3, r2
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	2414      	movs	r4, #20
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f003 fc01 	bl	8004326 <memset>
  if(hcan->Instance==CAN)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <HAL_CAN_MspInit+0xa4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d13b      	bne.n	8000ba6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b30:	69da      	ldr	r2, [r3, #28]
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0489      	lsls	r1, r1, #18
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	61da      	str	r2, [r3, #28]
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	049b      	lsls	r3, r3, #18
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0289      	lsls	r1, r1, #10
 8000b54:	430a      	orrs	r2, r1
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_CAN_MspInit+0xa8>)
 8000b5a:	695a      	ldr	r2, [r3, #20]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	029b      	lsls	r3, r3, #10
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	22c0      	movs	r2, #192	; 0xc0
 8000b6a:	0152      	lsls	r2, r2, #5
 8000b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	0021      	movs	r1, r4
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2202      	movs	r2, #2
 8000b74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2204      	movs	r2, #4
 8000b86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	187a      	adds	r2, r7, r1
 8000b8a:	2390      	movs	r3, #144	; 0x90
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f001 fb35 	bl	8002200 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	201e      	movs	r0, #30
 8000b9c:	f001 f8e8 	bl	8001d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000ba0:	201e      	movs	r0, #30
 8000ba2:	f001 f8fa 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b00b      	add	sp, #44	; 0x2c
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	40006400 	.word	0x40006400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	2414      	movs	r4, #20
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	2314      	movs	r3, #20
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f003 fbab 	bl	8004326 <memset>
  if(huart->Instance==USART1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a34      	ldr	r2, [pc, #208]	; (8000ca8 <HAL_UART_MspInit+0xf0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d161      	bne.n	8000c9e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_UART_MspInit+0xf4>)
 8000bdc:	699a      	ldr	r2, [r3, #24]
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <HAL_UART_MspInit+0xf4>)
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	01c9      	lsls	r1, r1, #7
 8000be4:	430a      	orrs	r2, r1
 8000be6:	619a      	str	r2, [r3, #24]
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <HAL_UART_MspInit+0xf4>)
 8000bea:	699a      	ldr	r2, [r3, #24]
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	01db      	lsls	r3, r3, #7
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <HAL_UART_MspInit+0xf4>)
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <HAL_UART_MspInit+0xf4>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0289      	lsls	r1, r1, #10
 8000c00:	430a      	orrs	r2, r1
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <HAL_UART_MspInit+0xf4>)
 8000c06:	695a      	ldr	r2, [r3, #20]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	029b      	lsls	r3, r3, #10
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	22c0      	movs	r2, #192	; 0xc0
 8000c16:	00d2      	lsls	r2, r2, #3
 8000c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	0021      	movs	r1, r4
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2202      	movs	r2, #2
 8000c20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2201      	movs	r2, #1
 8000c32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	187a      	adds	r2, r7, r1
 8000c36:	2390      	movs	r3, #144	; 0x90
 8000c38:	05db      	lsls	r3, r3, #23
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f001 fadf 	bl	8002200 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c44:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <HAL_UART_MspInit+0xfc>)
 8000c46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 f8ad 	bl	8001dd4 <HAL_DMA_Init>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000c7e:	f7ff ff1b 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c86:	675a      	str	r2, [r3, #116]	; 0x74
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_UART_MspInit+0xf8>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	201b      	movs	r0, #27
 8000c94:	f001 f86c 	bl	8001d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c98:	201b      	movs	r0, #27
 8000c9a:	f001 f87e 	bl	8001d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b00b      	add	sp, #44	; 0x2c
 8000ca4:	bd90      	pop	{r4, r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	40013800 	.word	0x40013800
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	200002bc 	.word	0x200002bc
 8000cb4:	40020030 	.word	0x40020030

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f916 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <DMA1_Channel2_3_IRQHandler+0x14>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 f99b 	bl	800202a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	200002bc 	.word	0x200002bc

08000d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <USART1_IRQHandler+0x14>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f002 fa34 	bl	8003174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	20000234 	.word	0x20000234

08000d18 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <CEC_CAN_IRQHandler+0x14>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fd6d 	bl	80017fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	2000020c 	.word	0x2000020c

08000d30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <uart_start>:
uint8_t uart_byte_buf[UART_BUFFER_SIZE];
UART_HandleTypeDef uart_huart;

CIRC_BUF_DEF(uart_ring_buf, UART_RING_BUFFER_SIZE);

void uart_start(UART_HandleTypeDef *uart) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	uart_huart = *uart;
 8000d44:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <uart_start+0x2c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	0010      	movs	r0, r2
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	2388      	movs	r3, #136	; 0x88
 8000d4e:	001a      	movs	r2, r3
 8000d50:	f003 fb16 	bl	8004380 <memcpy>
	HAL_UARTEx_ReceiveToIdle_DMA(uart, uart_byte_buf, UART_BUFFER_SIZE);
 8000d54:	4905      	ldr	r1, [pc, #20]	; (8000d6c <uart_start+0x30>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2220      	movs	r2, #32
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f003 fa7b 	bl	8004256 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000344 	.word	0x20000344
 8000d6c:	20000324 	.word	0x20000324

08000d70 <uart_data_available>:
void uart_interrupt(UART_HandleTypeDef *uart, uint16_t Size) {


}

int uart_data_available() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	if (uart_ring_buf.head >= uart_ring_buf.tail)
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <uart_data_available+0x34>)
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <uart_data_available+0x34>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	db05      	blt.n	8000d8c <uart_data_available+0x1c>
		return uart_ring_buf.head - uart_ring_buf.tail;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <uart_data_available+0x34>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <uart_data_available+0x34>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	e007      	b.n	8000d9c <uart_data_available+0x2c>

	return uart_ring_buf.maxlen - (uart_ring_buf.tail - uart_ring_buf.head);
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <uart_data_available+0x34>)
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <uart_data_available+0x34>)
 8000d92:	6899      	ldr	r1, [r3, #8]
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <uart_data_available+0x34>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	1acb      	subs	r3, r1, r3
 8000d9a:	1ad3      	subs	r3, r2, r3
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000008 	.word	0x20000008

08000da8 <uart_get_byte>:

int uart_get_byte() {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	return circ_buf_pop(&uart_ring_buf);
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <uart_get_byte+0x14>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fc22 	bl	80005f8 <circ_buf_pop>
 8000db4:	0003      	movs	r3, r0
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	000a      	movs	r2, r1
 8000dca:	1cbb      	adds	r3, r7, #2
 8000dcc:	801a      	strh	r2, [r3, #0]
	circ_buf_push_bytes(&uart_ring_buf, uart_byte_buf, Size);
 8000dce:	1cbb      	adds	r3, r7, #2
 8000dd0:	881a      	ldrh	r2, [r3, #0]
 8000dd2:	4907      	ldr	r1, [pc, #28]	; (8000df0 <HAL_UARTEx_RxEventCallback+0x30>)
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fb7c 	bl	80004d4 <circ_buf_push_bytes>
	HAL_UARTEx_ReceiveToIdle_DMA(huart, uart_byte_buf, UART_BUFFER_SIZE);
 8000ddc:	4904      	ldr	r1, [pc, #16]	; (8000df0 <HAL_UARTEx_RxEventCallback+0x30>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2220      	movs	r2, #32
 8000de2:	0018      	movs	r0, r3
 8000de4:	f003 fa37 	bl	8004256 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000324 	.word	0x20000324
 8000df4:	20000008 	.word	0x20000008

08000df8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dfc:	f7ff ff98 	bl	8000d30 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000e00:	4812      	ldr	r0, [pc, #72]	; (8000e4c <LoopForever+0x6>)
    LDR R1, [R0]
 8000e02:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000e04:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <LoopForever+0xa>)
    CMP R1, R2
 8000e08:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000e0a:	d105      	bne.n	8000e18 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000e0e:	4912      	ldr	r1, [pc, #72]	; (8000e58 <LoopForever+0x12>)
    STR R1, [R0]
 8000e10:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000e12:	4812      	ldr	r0, [pc, #72]	; (8000e5c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000e14:	4912      	ldr	r1, [pc, #72]	; (8000e60 <LoopForever+0x1a>)
    STR R1, [R0]
 8000e16:	6001      	str	r1, [r0, #0]

08000e18 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	4812      	ldr	r0, [pc, #72]	; (8000e64 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000e1a:	4913      	ldr	r1, [pc, #76]	; (8000e68 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <LoopForever+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000e30:	4c10      	ldr	r4, [pc, #64]	; (8000e74 <LoopForever+0x2e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e3e:	f003 fa7b 	bl	8004338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e42:	f7ff fc49 	bl	80006d8 <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   r0, =_estack
 8000e48:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000e4c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000e50:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000e54:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000e58:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e5c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e60:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000e6c:	080043f0 	.word	0x080043f0
  ldr r2, =_sbss
 8000e70:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000e74:	200004d0 	.word	0x200004d0

08000e78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_IRQHandler>
	...

08000e7c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <HAL_Init+0x24>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_Init+0x24>)
 8000e86:	2110      	movs	r1, #16
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f809 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e92:	f7ff fe17 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	40022000 	.word	0x40022000

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_InitTick+0x5c>)
 8000eae:	681c      	ldr	r4, [r3, #0]
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_InitTick+0x60>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	23fa      	movs	r3, #250	; 0xfa
 8000eb8:	0098      	lsls	r0, r3, #2
 8000eba:	f7ff f925 	bl	8000108 <__udivsi3>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	f7ff f920 	bl	8000108 <__udivsi3>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 ff75 	bl	8001dba <HAL_SYSTICK_Config>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e00f      	b.n	8000ef8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d80b      	bhi.n	8000ef6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 ff42 	bl	8001d70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_InitTick+0x64>)
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b003      	add	sp, #12
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	20000004 	.word	0x20000004
 8000f04:	2000001c 	.word	0x2000001c
 8000f08:	20000018 	.word	0x20000018

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	001a      	movs	r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	18d2      	adds	r2, r2, r3
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_IncTick+0x20>)
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	2000001c 	.word	0x2000001c
 8000f2c:	200004cc 	.word	0x200004cc

08000f30 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	200004cc 	.word	0x200004cc

08000f44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0f0      	b.n	8001138 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	5c9b      	ldrb	r3, [r3, r2]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff fdd1 	bl	8000b0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f7a:	f7ff ffd9 	bl	8000f30 <HAL_GetTick>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f82:	e013      	b.n	8000fac <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f84:	f7ff ffd4 	bl	8000f30 <HAL_GetTick>
 8000f88:	0002      	movs	r2, r0
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b0a      	cmp	r3, #10
 8000f90:	d90c      	bls.n	8000fac <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	0292      	lsls	r2, r2, #10
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e0c5      	b.n	8001138 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d0e5      	beq.n	8000f84 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2102      	movs	r1, #2
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc8:	f7ff ffb2 	bl	8000f30 <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fd0:	e013      	b.n	8000ffa <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fd2:	f7ff ffad 	bl	8000f30 <HAL_GetTick>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	d90c      	bls.n	8000ffa <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	0292      	lsls	r2, r2, #10
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e09e      	b.n	8001138 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2202      	movs	r2, #2
 8001002:	4013      	ands	r3, r2
 8001004:	d1e5      	bne.n	8000fd2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7e1b      	ldrb	r3, [r3, #24]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d108      	bne.n	8001020 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e007      	b.n	8001030 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	438a      	bics	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7e5b      	ldrb	r3, [r3, #25]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d108      	bne.n	800104a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e007      	b.n	800105a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	438a      	bics	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7e9b      	ldrb	r3, [r3, #26]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d108      	bne.n	8001074 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2120      	movs	r1, #32
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e007      	b.n	8001084 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2120      	movs	r1, #32
 8001080:	438a      	bics	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7edb      	ldrb	r3, [r3, #27]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d108      	bne.n	800109e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2110      	movs	r1, #16
 8001098:	438a      	bics	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e007      	b.n	80010ae <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2110      	movs	r1, #16
 80010aa:	430a      	orrs	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7f1b      	ldrb	r3, [r3, #28]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d108      	bne.n	80010c8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2108      	movs	r1, #8
 80010c2:	430a      	orrs	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e007      	b.n	80010d8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2108      	movs	r1, #8
 80010d4:	438a      	bics	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7f5b      	ldrb	r3, [r3, #29]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2104      	movs	r1, #4
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2104      	movs	r1, #4
 80010fe:	438a      	bics	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	431a      	orrs	r2, r3
 8001118:	0011      	movs	r1, r2
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2220      	movs	r2, #32
 8001132:	2101      	movs	r1, #1
 8001134:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b004      	add	sp, #16
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001150:	2013      	movs	r0, #19
 8001152:	183b      	adds	r3, r7, r0
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	2120      	movs	r1, #32
 8001158:	5c52      	ldrb	r2, [r2, r1]
 800115a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800115c:	0002      	movs	r2, r0
 800115e:	18bb      	adds	r3, r7, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d004      	beq.n	8001170 <HAL_CAN_ConfigFilter+0x30>
 8001166:	18bb      	adds	r3, r7, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d000      	beq.n	8001170 <HAL_CAN_ConfigFilter+0x30>
 800116e:	e0cd      	b.n	800130c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	58d3      	ldr	r3, [r2, r3]
 8001178:	2201      	movs	r2, #1
 800117a:	431a      	orrs	r2, r3
 800117c:	0011      	movs	r1, r2
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	221f      	movs	r2, #31
 800118c:	4013      	ands	r3, r2
 800118e:	2201      	movs	r2, #1
 8001190:	409a      	lsls	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	2387      	movs	r3, #135	; 0x87
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	58d3      	ldr	r3, [r2, r3]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	401a      	ands	r2, r3
 80011a4:	0011      	movs	r1, r2
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	2387      	movs	r3, #135	; 0x87
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d129      	bne.n	800120a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	2383      	movs	r3, #131	; 0x83
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	58d3      	ldr	r3, [r2, r3]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	0011      	movs	r1, r2
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	2383      	movs	r3, #131	; 0x83
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011e0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3248      	adds	r2, #72	; 0x48
 80011e6:	00d2      	lsls	r2, r2, #3
 80011e8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011fe:	6979      	ldr	r1, [r7, #20]
 8001200:	3348      	adds	r3, #72	; 0x48
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	18cb      	adds	r3, r1, r3
 8001206:	3304      	adds	r3, #4
 8001208:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d128      	bne.n	8001264 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	2383      	movs	r3, #131	; 0x83
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	58d2      	ldr	r2, [r2, r3]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	431a      	orrs	r2, r3
 800121e:	0011      	movs	r1, r2
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	2383      	movs	r3, #131	; 0x83
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	041b      	lsls	r3, r3, #16
 8001234:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800123a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3248      	adds	r2, #72	; 0x48
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001256:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001258:	6979      	ldr	r1, [r7, #20]
 800125a:	3348      	adds	r3, #72	; 0x48
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	18cb      	adds	r3, r1, r3
 8001260:	3304      	adds	r3, #4
 8001262:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10c      	bne.n	8001286 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	2381      	movs	r3, #129	; 0x81
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	58d3      	ldr	r3, [r2, r3]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	43d2      	mvns	r2, r2
 8001278:	401a      	ands	r2, r3
 800127a:	0011      	movs	r1, r2
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	2381      	movs	r3, #129	; 0x81
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	50d1      	str	r1, [r2, r3]
 8001284:	e00a      	b.n	800129c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	2381      	movs	r3, #129	; 0x81
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	58d2      	ldr	r2, [r2, r3]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	431a      	orrs	r2, r3
 8001292:	0011      	movs	r1, r2
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	2381      	movs	r3, #129	; 0x81
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10c      	bne.n	80012be <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	2385      	movs	r3, #133	; 0x85
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	58d3      	ldr	r3, [r2, r3]
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	43d2      	mvns	r2, r2
 80012b0:	401a      	ands	r2, r3
 80012b2:	0011      	movs	r1, r2
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	2385      	movs	r3, #133	; 0x85
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	50d1      	str	r1, [r2, r3]
 80012bc:	e00a      	b.n	80012d4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	2385      	movs	r3, #133	; 0x85
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	58d2      	ldr	r2, [r2, r3]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	0011      	movs	r1, r2
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	2385      	movs	r3, #133	; 0x85
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10a      	bne.n	80012f2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	2387      	movs	r3, #135	; 0x87
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	58d2      	ldr	r2, [r2, r3]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	0011      	movs	r1, r2
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	2387      	movs	r3, #135	; 0x87
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	58d3      	ldr	r3, [r2, r3]
 80012fa:	2201      	movs	r2, #1
 80012fc:	4393      	bics	r3, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	e007      	b.n	800131c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	02d2      	lsls	r2, r2, #11
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
  }
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b006      	add	sp, #24
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	5c9b      	ldrb	r3, [r3, r2]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d12f      	bne.n	8001398 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2220      	movs	r2, #32
 800133c:	2102      	movs	r1, #2
 800133e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2101      	movs	r1, #1
 800134c:	438a      	bics	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001350:	f7ff fdee 	bl	8000f30 <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001358:	e013      	b.n	8001382 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800135a:	f7ff fde9 	bl	8000f30 <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b0a      	cmp	r3, #10
 8001366:	d90c      	bls.n	8001382 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	0292      	lsls	r2, r2, #10
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2220      	movs	r2, #32
 800137a:	2105      	movs	r1, #5
 800137c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e012      	b.n	80013a8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	4013      	ands	r3, r2
 800138c:	d1e5      	bne.n	800135a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e007      	b.n	80013a8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	0312      	lsls	r2, r2, #12
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
  }
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b004      	add	sp, #16
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013be:	201f      	movs	r0, #31
 80013c0:	183b      	adds	r3, r7, r0
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	2120      	movs	r1, #32
 80013c6:	5c52      	ldrb	r2, [r2, r1]
 80013c8:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d2:	183b      	adds	r3, r7, r0
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d004      	beq.n	80013e4 <HAL_CAN_AddTxMessage+0x34>
 80013da:	183b      	adds	r3, r7, r0
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d000      	beq.n	80013e4 <HAL_CAN_AddTxMessage+0x34>
 80013e2:	e0ab      	b.n	800153c <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	04db      	lsls	r3, r3, #19
 80013ea:	4013      	ands	r3, r2
 80013ec:	d10a      	bne.n	8001404 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	051b      	lsls	r3, r3, #20
 80013f4:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013f6:	d105      	bne.n	8001404 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	055b      	lsls	r3, r3, #21
 80013fe:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001400:	d100      	bne.n	8001404 <HAL_CAN_AddTxMessage+0x54>
 8001402:	e092      	b.n	800152a <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	0e1b      	lsrs	r3, r3, #24
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10c      	bne.n	800143a <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4311      	orrs	r1, r2
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	3218      	adds	r2, #24
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	50d1      	str	r1, [r2, r3]
 8001438:	e00f      	b.n	800145a <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001444:	431a      	orrs	r2, r3
 8001446:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001450:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	3218      	adds	r2, #24
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3318      	adds	r3, #24
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	18cb      	adds	r3, r1, r3
 800146a:	3304      	adds	r3, #4
 800146c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	7d1b      	ldrb	r3, [r3, #20]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d112      	bne.n	800149c <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3318      	adds	r3, #24
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	18d3      	adds	r3, r2, r3
 8001482:	3304      	adds	r3, #4
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	431a      	orrs	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3318      	adds	r3, #24
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	18cb      	adds	r3, r1, r3
 8001498:	3304      	adds	r3, #4
 800149a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3307      	adds	r3, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	061a      	lsls	r2, r3, #24
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3306      	adds	r3, #6
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	041b      	lsls	r3, r3, #16
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3305      	adds	r3, #5
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3304      	adds	r3, #4
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	0019      	movs	r1, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	6979      	ldr	r1, [r7, #20]
 80014c8:	23c6      	movs	r3, #198	; 0xc6
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	0109      	lsls	r1, r1, #4
 80014ce:	1841      	adds	r1, r0, r1
 80014d0:	18cb      	adds	r3, r1, r3
 80014d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3303      	adds	r3, #3
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	061a      	lsls	r2, r3, #24
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3302      	adds	r3, #2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	041b      	lsls	r3, r3, #16
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3301      	adds	r3, #1
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	0019      	movs	r1, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	6979      	ldr	r1, [r7, #20]
 80014fe:	23c4      	movs	r3, #196	; 0xc4
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	0109      	lsls	r1, r1, #4
 8001504:	1841      	adds	r1, r0, r1
 8001506:	18cb      	adds	r3, r1, r3
 8001508:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	3218      	adds	r2, #24
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	58d2      	ldr	r2, [r2, r3]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2101      	movs	r1, #1
 800151c:	4311      	orrs	r1, r2
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	3218      	adds	r2, #24
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e010      	b.n	800154c <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	0392      	lsls	r2, r2, #14
 8001532:	431a      	orrs	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e007      	b.n	800154c <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	02d2      	lsls	r2, r2, #11
 8001544:	431a      	orrs	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
  }
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b008      	add	sp, #32
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001562:	2017      	movs	r0, #23
 8001564:	183b      	adds	r3, r7, r0
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	2120      	movs	r1, #32
 800156a:	5c52      	ldrb	r2, [r2, r1]
 800156c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800156e:	0002      	movs	r2, r0
 8001570:	18bb      	adds	r3, r7, r2
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d004      	beq.n	8001582 <HAL_CAN_GetRxMessage+0x2e>
 8001578:	18bb      	adds	r3, r7, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d000      	beq.n	8001582 <HAL_CAN_GetRxMessage+0x2e>
 8001580:	e107      	b.n	8001792 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10e      	bne.n	80015a6 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2203      	movs	r2, #3
 8001590:	4013      	ands	r3, r2
 8001592:	d117      	bne.n	80015c4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	0392      	lsls	r2, r2, #14
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0fd      	b.n	80017a2 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2203      	movs	r2, #3
 80015ae:	4013      	ands	r3, r2
 80015b0:	d108      	bne.n	80015c4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	0392      	lsls	r2, r2, #14
 80015ba:	431a      	orrs	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0ee      	b.n	80017a2 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	321b      	adds	r2, #27
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	58d3      	ldr	r3, [r2, r3]
 80015d0:	2204      	movs	r2, #4
 80015d2:	401a      	ands	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10b      	bne.n	80015f8 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	321b      	adds	r2, #27
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	58d3      	ldr	r3, [r2, r3]
 80015ec:	0d5b      	lsrs	r3, r3, #21
 80015ee:	055b      	lsls	r3, r3, #21
 80015f0:	0d5a      	lsrs	r2, r3, #21
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e00a      	b.n	800160e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	321b      	adds	r2, #27
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	58d3      	ldr	r3, [r2, r3]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	321b      	adds	r2, #27
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	58d3      	ldr	r3, [r2, r3]
 800161a:	2202      	movs	r2, #2
 800161c:	401a      	ands	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	331b      	adds	r3, #27
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	3304      	adds	r3, #4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2208      	movs	r2, #8
 8001634:	4013      	ands	r3, r2
 8001636:	d003      	beq.n	8001640 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2208      	movs	r2, #8
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	e00b      	b.n	8001658 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	331b      	adds	r3, #27
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	18d3      	adds	r3, r2, r3
 800164c:	3304      	adds	r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	220f      	movs	r2, #15
 8001652:	401a      	ands	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	331b      	adds	r3, #27
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	18d3      	adds	r3, r2, r3
 8001664:	3304      	adds	r3, #4
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	22ff      	movs	r2, #255	; 0xff
 800166c:	401a      	ands	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	331b      	adds	r3, #27
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	18d3      	adds	r3, r2, r3
 800167e:	3304      	adds	r3, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	0c1a      	lsrs	r2, r3, #16
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	23dc      	movs	r3, #220	; 0xdc
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	188a      	adds	r2, r1, r2
 800169a:	18d3      	adds	r3, r2, r3
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	23dc      	movs	r3, #220	; 0xdc
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	188a      	adds	r2, r1, r2
 80016b2:	18d3      	adds	r3, r2, r3
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0a1a      	lsrs	r2, r3, #8
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	23dc      	movs	r3, #220	; 0xdc
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	188a      	adds	r2, r1, r2
 80016ce:	18d3      	adds	r3, r2, r3
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0c1a      	lsrs	r2, r3, #16
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	3302      	adds	r3, #2
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	23dc      	movs	r3, #220	; 0xdc
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	188a      	adds	r2, r1, r2
 80016ea:	18d3      	adds	r3, r2, r3
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0e1a      	lsrs	r2, r3, #24
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	3303      	adds	r3, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	23de      	movs	r3, #222	; 0xde
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	188a      	adds	r2, r1, r2
 8001706:	18d3      	adds	r3, r2, r3
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3304      	adds	r3, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	23de      	movs	r3, #222	; 0xde
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	188a      	adds	r2, r1, r2
 8001720:	18d3      	adds	r3, r2, r3
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0a1a      	lsrs	r2, r3, #8
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3305      	adds	r3, #5
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	23de      	movs	r3, #222	; 0xde
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	188a      	adds	r2, r1, r2
 800173c:	18d3      	adds	r3, r2, r3
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0c1a      	lsrs	r2, r3, #16
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3306      	adds	r3, #6
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	23de      	movs	r3, #222	; 0xde
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	188a      	adds	r2, r1, r2
 8001758:	18d3      	adds	r3, r2, r3
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0e1a      	lsrs	r2, r3, #24
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	3307      	adds	r3, #7
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d108      	bne.n	800177e <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2120      	movs	r1, #32
 8001778:	430a      	orrs	r2, r1
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	e007      	b.n	800178e <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2120      	movs	r1, #32
 800178a:	430a      	orrs	r2, r1
 800178c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e007      	b.n	80017a2 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	02d2      	lsls	r2, r2, #11
 800179a:	431a      	orrs	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
  }
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b006      	add	sp, #24
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017b4:	200f      	movs	r0, #15
 80017b6:	183b      	adds	r3, r7, r0
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	2120      	movs	r1, #32
 80017bc:	5c52      	ldrb	r2, [r2, r1]
 80017be:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017c0:	0002      	movs	r2, r0
 80017c2:	18bb      	adds	r3, r7, r2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d003      	beq.n	80017d2 <HAL_CAN_ActivateNotification+0x28>
 80017ca:	18bb      	adds	r3, r7, r2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d109      	bne.n	80017e6 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6959      	ldr	r1, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e007      	b.n	80017f6 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	02d2      	lsls	r2, r2, #11
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
  }
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b004      	add	sp, #16
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b08a      	sub	sp, #40	; 0x28
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	2201      	movs	r2, #1
 800183e:	4013      	ands	r3, r2
 8001840:	d100      	bne.n	8001844 <HAL_CAN_IRQHandler+0x46>
 8001842:	e084      	b.n	800194e <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2201      	movs	r2, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d024      	beq.n	8001896 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d004      	beq.n	8001866 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	0018      	movs	r0, r3
 8001860:	f7fe fe28 	bl	80004b4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001864:	e017      	b.n	8001896 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2204      	movs	r2, #4
 800186a:	4013      	ands	r3, r2
 800186c:	d005      	beq.n	800187a <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	4313      	orrs	r3, r2
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
 8001878:	e00d      	b.n	8001896 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2208      	movs	r2, #8
 800187e:	4013      	ands	r3, r2
 8001880:	d005      	beq.n	800188e <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	0152      	lsls	r2, r2, #5
 8001888:	4313      	orrs	r3, r2
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	e003      	b.n	8001896 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	0018      	movs	r0, r3
 8001892:	f000 f978 	bl	8001b86 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4013      	ands	r3, r2
 800189e:	d028      	beq.n	80018f2 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	0052      	lsls	r2, r2, #1
 80018a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d004      	beq.n	80018be <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 f955 	bl	8001b66 <HAL_CAN_TxMailbox1CompleteCallback>
 80018bc:	e019      	b.n	80018f2 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4013      	ands	r3, r2
 80018c6:	d005      	beq.n	80018d4 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	0192      	lsls	r2, r2, #6
 80018ce:	4313      	orrs	r3, r2
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	e00e      	b.n	80018f2 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	4013      	ands	r3, r2
 80018dc:	d005      	beq.n	80018ea <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	01d2      	lsls	r2, r2, #7
 80018e4:	4313      	orrs	r3, r2
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
 80018e8:	e003      	b.n	80018f2 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f000 f952 	bl	8001b96 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4013      	ands	r3, r2
 80018fa:	d028      	beq.n	800194e <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	0252      	lsls	r2, r2, #9
 8001904:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	d004      	beq.n	800191a <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0018      	movs	r0, r3
 8001914:	f000 f92f 	bl	8001b76 <HAL_CAN_TxMailbox2CompleteCallback>
 8001918:	e019      	b.n	800194e <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	02db      	lsls	r3, r3, #11
 8001920:	4013      	ands	r3, r2
 8001922:	d005      	beq.n	8001930 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	0212      	lsls	r2, r2, #8
 800192a:	4313      	orrs	r3, r2
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	e00e      	b.n	800194e <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	031b      	lsls	r3, r3, #12
 8001936:	4013      	ands	r3, r2
 8001938:	d005      	beq.n	8001946 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	0252      	lsls	r2, r2, #9
 8001940:	4313      	orrs	r3, r2
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
 8001944:	e003      	b.n	800194e <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0018      	movs	r0, r3
 800194a:	f000 f92c 	bl	8001ba6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	2208      	movs	r2, #8
 8001952:	4013      	ands	r3, r2
 8001954:	d00c      	beq.n	8001970 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2210      	movs	r2, #16
 800195a:	4013      	ands	r3, r2
 800195c:	d008      	beq.n	8001970 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4313      	orrs	r3, r2
 8001966:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2210      	movs	r2, #16
 800196e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	2204      	movs	r2, #4
 8001974:	4013      	ands	r3, r2
 8001976:	d00b      	beq.n	8001990 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2208      	movs	r2, #8
 800197c:	4013      	ands	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2208      	movs	r2, #8
 8001986:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	0018      	movs	r0, r3
 800198c:	f000 f913 	bl	8001bb6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	2202      	movs	r2, #2
 8001994:	4013      	ands	r3, r2
 8001996:	d009      	beq.n	80019ac <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2203      	movs	r2, #3
 80019a0:	4013      	ands	r3, r2
 80019a2:	d003      	beq.n	80019ac <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff f82a 	bl	8000a00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	4013      	ands	r3, r2
 80019b2:	d00c      	beq.n	80019ce <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2210      	movs	r2, #16
 80019b8:	4013      	ands	r3, r2
 80019ba:	d008      	beq.n	80019ce <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	00d2      	lsls	r2, r2, #3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2210      	movs	r2, #16
 80019cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	2220      	movs	r2, #32
 80019d2:	4013      	ands	r3, r2
 80019d4:	d00b      	beq.n	80019ee <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2208      	movs	r2, #8
 80019da:	4013      	ands	r3, r2
 80019dc:	d007      	beq.n	80019ee <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2208      	movs	r2, #8
 80019e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 f8f4 	bl	8001bd6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	2210      	movs	r2, #16
 80019f2:	4013      	ands	r3, r2
 80019f4:	d009      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2203      	movs	r2, #3
 80019fe:	4013      	ands	r3, r2
 8001a00:	d003      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 f8de 	bl	8001bc6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	029b      	lsls	r3, r3, #10
 8001a10:	4013      	ands	r3, r2
 8001a12:	d00b      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2210      	movs	r2, #16
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d007      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2210      	movs	r2, #16
 8001a22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 f8dd 	bl	8001be6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a2c:	6a3a      	ldr	r2, [r7, #32]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	4013      	ands	r3, r2
 8001a34:	d00b      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2208      	movs	r2, #8
 8001a44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 f8d4 	bl	8001bf6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a4e:	6a3a      	ldr	r2, [r7, #32]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	4013      	ands	r3, r2
 8001a56:	d100      	bne.n	8001a5a <HAL_CAN_IRQHandler+0x25c>
 8001a58:	e074      	b.n	8001b44 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d100      	bne.n	8001a64 <HAL_CAN_IRQHandler+0x266>
 8001a62:	e06b      	b.n	8001b3c <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a64:	6a3a      	ldr	r2, [r7, #32]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a74:	d003      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a7e:	6a3a      	ldr	r2, [r7, #32]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d007      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a8e:	d003      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	2202      	movs	r2, #2
 8001a94:	4313      	orrs	r3, r2
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a98:	6a3a      	ldr	r2, [r7, #32]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aa8:	d003      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	2204      	movs	r2, #4
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ab2:	6a3a      	ldr	r2, [r7, #32]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d03f      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2270      	movs	r2, #112	; 0x70
 8001ac0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ac2:	d03b      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2270      	movs	r2, #112	; 0x70
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b60      	cmp	r3, #96	; 0x60
 8001acc:	d027      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x320>
 8001ace:	d82c      	bhi.n	8001b2a <HAL_CAN_IRQHandler+0x32c>
 8001ad0:	2b50      	cmp	r3, #80	; 0x50
 8001ad2:	d01f      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x316>
 8001ad4:	d829      	bhi.n	8001b2a <HAL_CAN_IRQHandler+0x32c>
 8001ad6:	2b40      	cmp	r3, #64	; 0x40
 8001ad8:	d017      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x30c>
 8001ada:	d826      	bhi.n	8001b2a <HAL_CAN_IRQHandler+0x32c>
 8001adc:	2b30      	cmp	r3, #48	; 0x30
 8001ade:	d00f      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x302>
 8001ae0:	d823      	bhi.n	8001b2a <HAL_CAN_IRQHandler+0x32c>
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	d002      	beq.n	8001aec <HAL_CAN_IRQHandler+0x2ee>
 8001ae6:	2b20      	cmp	r3, #32
 8001ae8:	d005      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001aea:	e01e      	b.n	8001b2a <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	2208      	movs	r2, #8
 8001af0:	4313      	orrs	r3, r2
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001af4:	e01a      	b.n	8001b2c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	2210      	movs	r2, #16
 8001afa:	4313      	orrs	r3, r2
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001afe:	e015      	b.n	8001b2c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	2220      	movs	r2, #32
 8001b04:	4313      	orrs	r3, r2
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b08:	e010      	b.n	8001b2c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	2240      	movs	r2, #64	; 0x40
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b12:	e00b      	b.n	8001b2c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b1c:	e006      	b.n	8001b2c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	0052      	lsls	r2, r2, #1
 8001b24:	4313      	orrs	r3, r2
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b28:	e000      	b.n	8001b2c <HAL_CAN_IRQHandler+0x32e>
            break;
 8001b2a:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2170      	movs	r1, #112	; 0x70
 8001b38:	438a      	bics	r2, r1
 8001b3a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2204      	movs	r2, #4
 8001b42:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f854 	bl	8001c06 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b00a      	add	sp, #40	; 0x28
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b002      	add	sp, #8
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b002      	add	sp, #8
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b002      	add	sp, #8
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b002      	add	sp, #8
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	0002      	movs	r2, r0
 8001c20:	1dfb      	adds	r3, r7, #7
 8001c22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b7f      	cmp	r3, #127	; 0x7f
 8001c2a:	d809      	bhi.n	8001c40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	001a      	movs	r2, r3
 8001c32:	231f      	movs	r3, #31
 8001c34:	401a      	ands	r2, r3
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_EnableIRQ+0x30>)
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4091      	lsls	r1, r2
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
  }
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	0002      	movs	r2, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c60:	d828      	bhi.n	8001cb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c62:	4a2f      	ldr	r2, [pc, #188]	; (8001d20 <__NVIC_SetPriority+0xd4>)
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	33c0      	adds	r3, #192	; 0xc0
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	589b      	ldr	r3, [r3, r2]
 8001c72:	1dfa      	adds	r2, r7, #7
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	0011      	movs	r1, r2
 8001c78:	2203      	movs	r2, #3
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	00d2      	lsls	r2, r2, #3
 8001c7e:	21ff      	movs	r1, #255	; 0xff
 8001c80:	4091      	lsls	r1, r2
 8001c82:	000a      	movs	r2, r1
 8001c84:	43d2      	mvns	r2, r2
 8001c86:	401a      	ands	r2, r3
 8001c88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	22ff      	movs	r2, #255	; 0xff
 8001c90:	401a      	ands	r2, r3
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	0018      	movs	r0, r3
 8001c98:	2303      	movs	r3, #3
 8001c9a:	4003      	ands	r3, r0
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca0:	481f      	ldr	r0, [pc, #124]	; (8001d20 <__NVIC_SetPriority+0xd4>)
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	430a      	orrs	r2, r1
 8001cac:	33c0      	adds	r3, #192	; 0xc0
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cb2:	e031      	b.n	8001d18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <__NVIC_SetPriority+0xd8>)
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	0019      	movs	r1, r3
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	3b08      	subs	r3, #8
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3306      	adds	r3, #6
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	18d3      	adds	r3, r2, r3
 8001cca:	3304      	adds	r3, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	1dfa      	adds	r2, r7, #7
 8001cd0:	7812      	ldrb	r2, [r2, #0]
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	00d2      	lsls	r2, r2, #3
 8001cda:	21ff      	movs	r1, #255	; 0xff
 8001cdc:	4091      	lsls	r1, r2
 8001cde:	000a      	movs	r2, r1
 8001ce0:	43d2      	mvns	r2, r2
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	22ff      	movs	r2, #255	; 0xff
 8001cec:	401a      	ands	r2, r3
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	4003      	ands	r3, r0
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <__NVIC_SetPriority+0xd8>)
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	001c      	movs	r4, r3
 8001d04:	230f      	movs	r3, #15
 8001d06:	4023      	ands	r3, r4
 8001d08:	3b08      	subs	r3, #8
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	3306      	adds	r3, #6
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	18c3      	adds	r3, r0, r3
 8001d14:	3304      	adds	r3, #4
 8001d16:	601a      	str	r2, [r3, #0]
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b003      	add	sp, #12
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	1e5a      	subs	r2, r3, #1
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	045b      	lsls	r3, r3, #17
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d301      	bcc.n	8001d40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e010      	b.n	8001d62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <SysTick_Config+0x44>)
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	3a01      	subs	r2, #1
 8001d46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d48:	2301      	movs	r3, #1
 8001d4a:	425b      	negs	r3, r3
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff ff7c 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x44>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x44>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	1c02      	adds	r2, r0, #0
 8001d80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	187b      	adds	r3, r7, r1
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b25b      	sxtb	r3, r3
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b004      	add	sp, #16
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	0002      	movs	r2, r0
 8001da2:	1dfb      	adds	r3, r7, #7
 8001da4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da6:	1dfb      	adds	r3, r7, #7
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b25b      	sxtb	r3, r3
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff ff33 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b002      	add	sp, #8
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7ff ffaf 	bl	8001d28 <SysTick_Config>
 8001dca:	0003      	movs	r3, r0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e036      	b.n	8001e58 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2221      	movs	r2, #33	; 0x21
 8001dee:	2102      	movs	r1, #2
 8001df0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_DMA_Init+0x8c>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f9c4 	bl	80021c8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2221      	movs	r2, #33	; 0x21
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2220      	movs	r2, #32
 8001e52:	2100      	movs	r1, #0
 8001e54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b004      	add	sp, #16
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	ffffc00f 	.word	0xffffc00f

08001e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2317      	movs	r3, #23
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	5c9b      	ldrb	r3, [r3, r2]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_DMA_Start_IT+0x24>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e04f      	b.n	8001f28 <HAL_DMA_Start_IT+0xc4>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2221      	movs	r2, #33	; 0x21
 8001e94:	5c9b      	ldrb	r3, [r3, r2]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d13a      	bne.n	8001f12 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2221      	movs	r2, #33	; 0x21
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	438a      	bics	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f954 	bl	800216e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	210e      	movs	r1, #14
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e00f      	b.n	8001f00 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	210a      	movs	r1, #10
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2104      	movs	r1, #4
 8001efc:	438a      	bics	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e007      	b.n	8001f22 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f1a:	2317      	movs	r3, #23
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2202      	movs	r2, #2
 8001f20:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001f22:	2317      	movs	r3, #23
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b006      	add	sp, #24
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2221      	movs	r2, #33	; 0x21
 8001f3c:	5c9b      	ldrb	r3, [r3, r2]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d008      	beq.n	8001f56 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2204      	movs	r2, #4
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	2100      	movs	r1, #0
 8001f50:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e020      	b.n	8001f98 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	210e      	movs	r1, #14
 8001f62:	438a      	bics	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	438a      	bics	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4091      	lsls	r1, r2
 8001f82:	000a      	movs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2221      	movs	r2, #33	; 0x21
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa8:	210f      	movs	r1, #15
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2221      	movs	r2, #33	; 0x21
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d006      	beq.n	8001fca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	e028      	b.n	800201c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	210e      	movs	r1, #14
 8001fd6:	438a      	bics	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2221      	movs	r2, #33	; 0x21
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	2100      	movs	r1, #0
 8002008:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	0010      	movs	r0, r2
 800201a:	4798      	blx	r3
    }
  }
  return status;
 800201c:	230f      	movs	r3, #15
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	781b      	ldrb	r3, [r3, #0]
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2204      	movs	r2, #4
 8002048:	409a      	lsls	r2, r3
 800204a:	0013      	movs	r3, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	d024      	beq.n	800209c <HAL_DMA_IRQHandler+0x72>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2204      	movs	r2, #4
 8002056:	4013      	ands	r3, r2
 8002058:	d020      	beq.n	800209c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2220      	movs	r2, #32
 8002062:	4013      	ands	r3, r2
 8002064:	d107      	bne.n	8002076 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2104      	movs	r1, #4
 8002072:	438a      	bics	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	2104      	movs	r1, #4
 8002080:	4091      	lsls	r1, r2
 8002082:	000a      	movs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d100      	bne.n	8002090 <HAL_DMA_IRQHandler+0x66>
 800208e:	e06a      	b.n	8002166 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	0010      	movs	r0, r2
 8002098:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800209a:	e064      	b.n	8002166 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2202      	movs	r2, #2
 80020a2:	409a      	lsls	r2, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	d02b      	beq.n	8002104 <HAL_DMA_IRQHandler+0xda>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d027      	beq.n	8002104 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2220      	movs	r2, #32
 80020bc:	4013      	ands	r3, r2
 80020be:	d10b      	bne.n	80020d8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	210a      	movs	r1, #10
 80020cc:	438a      	bics	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2221      	movs	r2, #33	; 0x21
 80020d4:	2101      	movs	r1, #1
 80020d6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	2102      	movs	r1, #2
 80020e2:	4091      	lsls	r1, r2
 80020e4:	000a      	movs	r2, r1
 80020e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d036      	beq.n	8002166 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	0010      	movs	r0, r2
 8002100:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002102:	e030      	b.n	8002166 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2208      	movs	r2, #8
 800210a:	409a      	lsls	r2, r3
 800210c:	0013      	movs	r3, r2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	d028      	beq.n	8002166 <HAL_DMA_IRQHandler+0x13c>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2208      	movs	r2, #8
 8002118:	4013      	ands	r3, r2
 800211a:	d024      	beq.n	8002166 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	210e      	movs	r1, #14
 8002128:	438a      	bics	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	2101      	movs	r1, #1
 8002136:	4091      	lsls	r1, r2
 8002138:	000a      	movs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2221      	movs	r2, #33	; 0x21
 8002146:	2101      	movs	r1, #1
 8002148:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	2100      	movs	r1, #0
 8002150:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	0010      	movs	r0, r2
 8002162:	4798      	blx	r3
    }
  }
}
 8002164:	e7ff      	b.n	8002166 <HAL_DMA_IRQHandler+0x13c>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b004      	add	sp, #16
 800216c:	bd80      	pop	{r7, pc}

0800216e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	2101      	movs	r1, #1
 8002186:	4091      	lsls	r1, r2
 8002188:	000a      	movs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b10      	cmp	r3, #16
 800219a:	d108      	bne.n	80021ae <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021ac:	e007      	b.n	80021be <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	60da      	str	r2, [r3, #12]
}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b004      	add	sp, #16
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <DMA_CalcBaseAndBitshift+0x30>)
 80021d6:	4694      	mov	ip, r2
 80021d8:	4463      	add	r3, ip
 80021da:	2114      	movs	r1, #20
 80021dc:	0018      	movs	r0, r3
 80021de:	f7fd ff93 	bl	8000108 <__udivsi3>
 80021e2:	0003      	movs	r3, r0
 80021e4:	009a      	lsls	r2, r3, #2
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a03      	ldr	r2, [pc, #12]	; (80021fc <DMA_CalcBaseAndBitshift+0x34>)
 80021ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	bffdfff8 	.word	0xbffdfff8
 80021fc:	40020000 	.word	0x40020000

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220e:	e149      	b.n	80024a4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4091      	lsls	r1, r2
 800221a:	000a      	movs	r2, r1
 800221c:	4013      	ands	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d100      	bne.n	8002228 <HAL_GPIO_Init+0x28>
 8002226:	e13a      	b.n	800249e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2203      	movs	r2, #3
 800222e:	4013      	ands	r3, r2
 8002230:	2b01      	cmp	r3, #1
 8002232:	d005      	beq.n	8002240 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2203      	movs	r2, #3
 800223a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800223c:	2b02      	cmp	r3, #2
 800223e:	d130      	bne.n	80022a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	409a      	lsls	r2, r3
 800224e:	0013      	movs	r3, r2
 8002250:	43da      	mvns	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	409a      	lsls	r2, r3
 8002262:	0013      	movs	r3, r2
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002276:	2201      	movs	r2, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
 800227c:	0013      	movs	r3, r2
 800227e:	43da      	mvns	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	2201      	movs	r2, #1
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
 8002294:	0013      	movs	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2203      	movs	r2, #3
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d017      	beq.n	80022de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	409a      	lsls	r2, r3
 80022bc:	0013      	movs	r3, r2
 80022be:	43da      	mvns	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	409a      	lsls	r2, r3
 80022d0:	0013      	movs	r3, r2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2203      	movs	r2, #3
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d123      	bne.n	8002332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	58d3      	ldr	r3, [r2, r3]
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2207      	movs	r2, #7
 80022fc:	4013      	ands	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	409a      	lsls	r2, r3
 8002304:	0013      	movs	r3, r2
 8002306:	43da      	mvns	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2107      	movs	r1, #7
 8002316:	400b      	ands	r3, r1
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	6939      	ldr	r1, [r7, #16]
 8002330:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	409a      	lsls	r2, r3
 8002340:	0013      	movs	r3, r2
 8002342:	43da      	mvns	r2, r3
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2203      	movs	r2, #3
 8002350:	401a      	ands	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	23c0      	movs	r3, #192	; 0xc0
 800236c:	029b      	lsls	r3, r3, #10
 800236e:	4013      	ands	r3, r2
 8002370:	d100      	bne.n	8002374 <HAL_GPIO_Init+0x174>
 8002372:	e094      	b.n	800249e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002374:	4b51      	ldr	r3, [pc, #324]	; (80024bc <HAL_GPIO_Init+0x2bc>)
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_GPIO_Init+0x2bc>)
 800237a:	2101      	movs	r1, #1
 800237c:	430a      	orrs	r2, r1
 800237e:	619a      	str	r2, [r3, #24]
 8002380:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <HAL_GPIO_Init+0x2bc>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800238c:	4a4c      	ldr	r2, [pc, #304]	; (80024c0 <HAL_GPIO_Init+0x2c0>)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	589b      	ldr	r3, [r3, r2]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2203      	movs	r2, #3
 800239e:	4013      	ands	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	409a      	lsls	r2, r3
 80023a6:	0013      	movs	r3, r2
 80023a8:	43da      	mvns	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	2390      	movs	r3, #144	; 0x90
 80023b4:	05db      	lsls	r3, r3, #23
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x1d6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a41      	ldr	r2, [pc, #260]	; (80024c4 <HAL_GPIO_Init+0x2c4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x1d2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a40      	ldr	r2, [pc, #256]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x1ce>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x1d8>
 80023ce:	2305      	movs	r3, #5
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x1d8>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x1d8>
 80023d6:	2300      	movs	r3, #0
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	2103      	movs	r1, #3
 80023dc:	400a      	ands	r2, r1
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023e8:	4935      	ldr	r1, [pc, #212]	; (80024c0 <HAL_GPIO_Init+0x2c0>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f6:	4b35      	ldr	r3, [pc, #212]	; (80024cc <HAL_GPIO_Init+0x2cc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	43da      	mvns	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	035b      	lsls	r3, r3, #13
 800240e:	4013      	ands	r3, r2
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_GPIO_Init+0x2cc>)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <HAL_GPIO_Init+0x2cc>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	43da      	mvns	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	039b      	lsls	r3, r3, #14
 8002438:	4013      	ands	r3, r2
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_GPIO_Init+0x2cc>)
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_GPIO_Init+0x2cc>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43da      	mvns	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	029b      	lsls	r3, r3, #10
 8002462:	4013      	ands	r3, r2
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_GPIO_Init+0x2cc>)
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_GPIO_Init+0x2cc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	43da      	mvns	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	025b      	lsls	r3, r3, #9
 800248c:	4013      	ands	r3, r2
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_GPIO_Init+0x2cc>)
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	40da      	lsrs	r2, r3
 80024ac:	1e13      	subs	r3, r2, #0
 80024ae:	d000      	beq.n	80024b2 <HAL_GPIO_Init+0x2b2>
 80024b0:	e6ae      	b.n	8002210 <HAL_GPIO_Init+0x10>
  } 
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b006      	add	sp, #24
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000
 80024c4:	48000400 	.word	0x48000400
 80024c8:	48000800 	.word	0x48000800
 80024cc:	40010400 	.word	0x40010400

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	0008      	movs	r0, r1
 80024da:	0011      	movs	r1, r2
 80024dc:	1cbb      	adds	r3, r7, #2
 80024de:	1c02      	adds	r2, r0, #0
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	1c7b      	adds	r3, r7, #1
 80024e4:	1c0a      	adds	r2, r1, #0
 80024e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e8:	1c7b      	adds	r3, r7, #1
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f0:	1cbb      	adds	r3, r7, #2
 80024f2:	881a      	ldrh	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f8:	e003      	b.n	8002502 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fa:	1cbb      	adds	r3, r7, #2
 80024fc:	881a      	ldrh	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f000 fb76 	bl	8002c0c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	4013      	ands	r3, r2
 8002528:	d100      	bne.n	800252c <HAL_RCC_OscConfig+0x20>
 800252a:	e08e      	b.n	800264a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800252c:	4bc5      	ldr	r3, [pc, #788]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	220c      	movs	r2, #12
 8002532:	4013      	ands	r3, r2
 8002534:	2b04      	cmp	r3, #4
 8002536:	d00e      	beq.n	8002556 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002538:	4bc2      	ldr	r3, [pc, #776]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	220c      	movs	r2, #12
 800253e:	4013      	ands	r3, r2
 8002540:	2b08      	cmp	r3, #8
 8002542:	d117      	bne.n	8002574 <HAL_RCC_OscConfig+0x68>
 8002544:	4bbf      	ldr	r3, [pc, #764]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	23c0      	movs	r3, #192	; 0xc0
 800254a:	025b      	lsls	r3, r3, #9
 800254c:	401a      	ands	r2, r3
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	429a      	cmp	r2, r3
 8002554:	d10e      	bne.n	8002574 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002556:	4bbb      	ldr	r3, [pc, #748]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	029b      	lsls	r3, r3, #10
 800255e:	4013      	ands	r3, r2
 8002560:	d100      	bne.n	8002564 <HAL_RCC_OscConfig+0x58>
 8002562:	e071      	b.n	8002648 <HAL_RCC_OscConfig+0x13c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d000      	beq.n	800256e <HAL_RCC_OscConfig+0x62>
 800256c:	e06c      	b.n	8002648 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f000 fb4c 	bl	8002c0c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x80>
 800257c:	4bb1      	ldr	r3, [pc, #708]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4bb0      	ldr	r3, [pc, #704]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	0249      	lsls	r1, r1, #9
 8002586:	430a      	orrs	r2, r1
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e02f      	b.n	80025ec <HAL_RCC_OscConfig+0xe0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0xa2>
 8002594:	4bab      	ldr	r3, [pc, #684]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4baa      	ldr	r3, [pc, #680]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 800259a:	49ab      	ldr	r1, [pc, #684]	; (8002848 <HAL_RCC_OscConfig+0x33c>)
 800259c:	400a      	ands	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	4ba8      	ldr	r3, [pc, #672]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4ba7      	ldr	r3, [pc, #668]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025a6:	49a9      	ldr	r1, [pc, #676]	; (800284c <HAL_RCC_OscConfig+0x340>)
 80025a8:	400a      	ands	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e01e      	b.n	80025ec <HAL_RCC_OscConfig+0xe0>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d10e      	bne.n	80025d4 <HAL_RCC_OscConfig+0xc8>
 80025b6:	4ba3      	ldr	r3, [pc, #652]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4ba2      	ldr	r3, [pc, #648]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	02c9      	lsls	r1, r1, #11
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	4b9f      	ldr	r3, [pc, #636]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b9e      	ldr	r3, [pc, #632]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	0249      	lsls	r1, r1, #9
 80025ce:	430a      	orrs	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xe0>
 80025d4:	4b9b      	ldr	r3, [pc, #620]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b9a      	ldr	r3, [pc, #616]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025da:	499b      	ldr	r1, [pc, #620]	; (8002848 <HAL_RCC_OscConfig+0x33c>)
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	4b98      	ldr	r3, [pc, #608]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b97      	ldr	r3, [pc, #604]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80025e6:	4999      	ldr	r1, [pc, #612]	; (800284c <HAL_RCC_OscConfig+0x340>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d014      	beq.n	800261e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fc9c 	bl	8000f30 <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fe:	f7fe fc97 	bl	8000f30 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e2fd      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002610:	4b8c      	ldr	r3, [pc, #560]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	029b      	lsls	r3, r3, #10
 8002618:	4013      	ands	r3, r2
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0xf2>
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fc87 	bl	8000f30 <HAL_GetTick>
 8002622:	0003      	movs	r3, r0
 8002624:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fc82 	bl	8000f30 <HAL_GetTick>
 800262c:	0002      	movs	r2, r0
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e2e8      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	4b82      	ldr	r3, [pc, #520]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	029b      	lsls	r3, r3, #10
 8002642:	4013      	ands	r3, r2
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x11c>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d100      	bne.n	8002656 <HAL_RCC_OscConfig+0x14a>
 8002654:	e06c      	b.n	8002730 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002656:	4b7b      	ldr	r3, [pc, #492]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	220c      	movs	r2, #12
 800265c:	4013      	ands	r3, r2
 800265e:	d00e      	beq.n	800267e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002660:	4b78      	ldr	r3, [pc, #480]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	220c      	movs	r2, #12
 8002666:	4013      	ands	r3, r2
 8002668:	2b08      	cmp	r3, #8
 800266a:	d11f      	bne.n	80026ac <HAL_RCC_OscConfig+0x1a0>
 800266c:	4b75      	ldr	r3, [pc, #468]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	23c0      	movs	r3, #192	; 0xc0
 8002672:	025b      	lsls	r3, r3, #9
 8002674:	401a      	ands	r2, r3
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	429a      	cmp	r2, r3
 800267c:	d116      	bne.n	80026ac <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	4b71      	ldr	r3, [pc, #452]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2202      	movs	r2, #2
 8002684:	4013      	ands	r3, r2
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x188>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e2bb      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b6b      	ldr	r3, [pc, #428]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	22f8      	movs	r2, #248	; 0xf8
 800269a:	4393      	bics	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00da      	lsls	r2, r3, #3
 80026a4:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	e041      	b.n	8002730 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d024      	beq.n	80026fe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b4:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b62      	ldr	r3, [pc, #392]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe fc36 	bl	8000f30 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ca:	f7fe fc31 	bl	8000f30 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e297      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2202      	movs	r2, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	d0f1      	beq.n	80026ca <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e6:	4b57      	ldr	r3, [pc, #348]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	22f8      	movs	r2, #248	; 0xf8
 80026ec:	4393      	bics	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00da      	lsls	r2, r3, #3
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e018      	b.n	8002730 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b51      	ldr	r3, [pc, #324]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002704:	2101      	movs	r1, #1
 8002706:	438a      	bics	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe fc11 	bl	8000f30 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fc0c 	bl	8000f30 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e272      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d1f1      	bne.n	8002714 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2208      	movs	r2, #8
 8002736:	4013      	ands	r3, r2
 8002738:	d036      	beq.n	80027a8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d019      	beq.n	8002776 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002742:	4b40      	ldr	r3, [pc, #256]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002748:	2101      	movs	r1, #1
 800274a:	430a      	orrs	r2, r1
 800274c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7fe fbef 	bl	8000f30 <HAL_GetTick>
 8002752:	0003      	movs	r3, r0
 8002754:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe fbea 	bl	8000f30 <HAL_GetTick>
 800275c:	0002      	movs	r2, r0
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e250      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	2202      	movs	r2, #2
 8002770:	4013      	ands	r3, r2
 8002772:	d0f1      	beq.n	8002758 <HAL_RCC_OscConfig+0x24c>
 8002774:	e018      	b.n	80027a8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002776:	4b33      	ldr	r3, [pc, #204]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800277a:	4b32      	ldr	r3, [pc, #200]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 800277c:	2101      	movs	r1, #1
 800277e:	438a      	bics	r2, r1
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7fe fbd5 	bl	8000f30 <HAL_GetTick>
 8002786:	0003      	movs	r3, r0
 8002788:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe fbd0 	bl	8000f30 <HAL_GetTick>
 8002790:	0002      	movs	r2, r0
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e236      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2202      	movs	r2, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d1f1      	bne.n	800278c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2204      	movs	r2, #4
 80027ae:	4013      	ands	r3, r2
 80027b0:	d100      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2a8>
 80027b2:	e0b5      	b.n	8002920 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b4:	201f      	movs	r0, #31
 80027b6:	183b      	adds	r3, r7, r0
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	055b      	lsls	r3, r3, #21
 80027c4:	4013      	ands	r3, r2
 80027c6:	d110      	bne.n	80027ea <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80027ca:	69da      	ldr	r2, [r3, #28]
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80027ce:	2180      	movs	r1, #128	; 0x80
 80027d0:	0549      	lsls	r1, r1, #21
 80027d2:	430a      	orrs	r2, r1
 80027d4:	61da      	str	r2, [r3, #28]
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	055b      	lsls	r3, r3, #21
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027e4:	183b      	adds	r3, r7, r0
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_RCC_OscConfig+0x344>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	d11a      	bne.n	800282c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_RCC_OscConfig+0x344>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_RCC_OscConfig+0x344>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	0049      	lsls	r1, r1, #1
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002804:	f7fe fb94 	bl	8000f30 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe fb8f 	bl	8000f30 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	; 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e1f5      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x344>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4013      	ands	r3, r2
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10f      	bne.n	8002854 <HAL_RCC_OscConfig+0x348>
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 8002836:	6a1a      	ldr	r2, [r3, #32]
 8002838:	4b02      	ldr	r3, [pc, #8]	; (8002844 <HAL_RCC_OscConfig+0x338>)
 800283a:	2101      	movs	r1, #1
 800283c:	430a      	orrs	r2, r1
 800283e:	621a      	str	r2, [r3, #32]
 8002840:	e036      	b.n	80028b0 <HAL_RCC_OscConfig+0x3a4>
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	40021000 	.word	0x40021000
 8002848:	fffeffff 	.word	0xfffeffff
 800284c:	fffbffff 	.word	0xfffbffff
 8002850:	40007000 	.word	0x40007000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10c      	bne.n	8002876 <HAL_RCC_OscConfig+0x36a>
 800285c:	4bca      	ldr	r3, [pc, #808]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 800285e:	6a1a      	ldr	r2, [r3, #32]
 8002860:	4bc9      	ldr	r3, [pc, #804]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002862:	2101      	movs	r1, #1
 8002864:	438a      	bics	r2, r1
 8002866:	621a      	str	r2, [r3, #32]
 8002868:	4bc7      	ldr	r3, [pc, #796]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 800286a:	6a1a      	ldr	r2, [r3, #32]
 800286c:	4bc6      	ldr	r3, [pc, #792]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 800286e:	2104      	movs	r1, #4
 8002870:	438a      	bics	r2, r1
 8002872:	621a      	str	r2, [r3, #32]
 8002874:	e01c      	b.n	80028b0 <HAL_RCC_OscConfig+0x3a4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x38c>
 800287e:	4bc2      	ldr	r3, [pc, #776]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	4bc1      	ldr	r3, [pc, #772]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002884:	2104      	movs	r1, #4
 8002886:	430a      	orrs	r2, r1
 8002888:	621a      	str	r2, [r3, #32]
 800288a:	4bbf      	ldr	r3, [pc, #764]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 800288c:	6a1a      	ldr	r2, [r3, #32]
 800288e:	4bbe      	ldr	r3, [pc, #760]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002890:	2101      	movs	r1, #1
 8002892:	430a      	orrs	r2, r1
 8002894:	621a      	str	r2, [r3, #32]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0x3a4>
 8002898:	4bbb      	ldr	r3, [pc, #748]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	4bba      	ldr	r3, [pc, #744]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 800289e:	2101      	movs	r1, #1
 80028a0:	438a      	bics	r2, r1
 80028a2:	621a      	str	r2, [r3, #32]
 80028a4:	4bb8      	ldr	r3, [pc, #736]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80028a6:	6a1a      	ldr	r2, [r3, #32]
 80028a8:	4bb7      	ldr	r3, [pc, #732]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80028aa:	2104      	movs	r1, #4
 80028ac:	438a      	bics	r2, r1
 80028ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d014      	beq.n	80028e2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b8:	f7fe fb3a 	bl	8000f30 <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	e009      	b.n	80028d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe fb35 	bl	8000f30 <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	4aaf      	ldr	r2, [pc, #700]	; (8002b8c <HAL_RCC_OscConfig+0x680>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e19a      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	4bac      	ldr	r3, [pc, #688]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x3b6>
 80028e0:	e013      	b.n	800290a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fb25 	bl	8000f30 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ea:	e009      	b.n	8002900 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe fb20 	bl	8000f30 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	4aa5      	ldr	r2, [pc, #660]	; (8002b8c <HAL_RCC_OscConfig+0x680>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e185      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	4ba1      	ldr	r3, [pc, #644]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800290a:	231f      	movs	r3, #31
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b9c      	ldr	r3, [pc, #624]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	4b9b      	ldr	r3, [pc, #620]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 800291a:	499d      	ldr	r1, [pc, #628]	; (8002b90 <HAL_RCC_OscConfig+0x684>)
 800291c:	400a      	ands	r2, r1
 800291e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2210      	movs	r2, #16
 8002926:	4013      	ands	r3, r2
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d12a      	bne.n	8002988 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002932:	4b95      	ldr	r3, [pc, #596]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002936:	4b94      	ldr	r3, [pc, #592]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002938:	2104      	movs	r1, #4
 800293a:	430a      	orrs	r2, r1
 800293c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800293e:	4b92      	ldr	r3, [pc, #584]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002942:	4b91      	ldr	r3, [pc, #580]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002944:	2101      	movs	r1, #1
 8002946:	430a      	orrs	r2, r1
 8002948:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe faf1 	bl	8000f30 <HAL_GetTick>
 800294e:	0003      	movs	r3, r0
 8002950:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002954:	f7fe faec 	bl	8000f30 <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e152      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002966:	4b88      	ldr	r3, [pc, #544]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d0f1      	beq.n	8002954 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002970:	4b85      	ldr	r3, [pc, #532]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002974:	22f8      	movs	r2, #248	; 0xf8
 8002976:	4393      	bics	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	00da      	lsls	r2, r3, #3
 8002980:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002982:	430a      	orrs	r2, r1
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
 8002986:	e034      	b.n	80029f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	3305      	adds	r3, #5
 800298e:	d111      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002990:	4b7d      	ldr	r3, [pc, #500]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002994:	4b7c      	ldr	r3, [pc, #496]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002996:	2104      	movs	r1, #4
 8002998:	438a      	bics	r2, r1
 800299a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800299c:	4b7a      	ldr	r3, [pc, #488]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	22f8      	movs	r2, #248	; 0xf8
 80029a2:	4393      	bics	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	00da      	lsls	r2, r3, #3
 80029ac:	4b76      	ldr	r3, [pc, #472]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80029ae:	430a      	orrs	r2, r1
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
 80029b2:	e01e      	b.n	80029f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029b4:	4b74      	ldr	r3, [pc, #464]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80029b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b8:	4b73      	ldr	r3, [pc, #460]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80029ba:	2104      	movs	r1, #4
 80029bc:	430a      	orrs	r2, r1
 80029be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80029c0:	4b71      	ldr	r3, [pc, #452]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80029c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c4:	4b70      	ldr	r3, [pc, #448]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	438a      	bics	r2, r1
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fab0 	bl	8000f30 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029d6:	f7fe faab 	bl	8000f30 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e111      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029e8:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	2202      	movs	r2, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	d1f1      	bne.n	80029d6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2220      	movs	r2, #32
 80029f8:	4013      	ands	r3, r2
 80029fa:	d05c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029fc:	4b62      	ldr	r3, [pc, #392]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	220c      	movs	r2, #12
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d00e      	beq.n	8002a26 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002a08:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	220c      	movs	r2, #12
 8002a0e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d114      	bne.n	8002a3e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002a14:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	23c0      	movs	r3, #192	; 0xc0
 8002a1a:	025b      	lsls	r3, r3, #9
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	23c0      	movs	r3, #192	; 0xc0
 8002a20:	025b      	lsls	r3, r3, #9
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d10b      	bne.n	8002a3e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a26:	4b58      	ldr	r3, [pc, #352]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	029b      	lsls	r3, r3, #10
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d040      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x5a8>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d03c      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0e6      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01b      	beq.n	8002a7e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002a46:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4a:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	0249      	lsls	r1, r1, #9
 8002a50:	430a      	orrs	r2, r1
 8002a52:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fa6c 	bl	8000f30 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a5e:	f7fe fa67 	bl	8000f30 <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0cd      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a70:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	029b      	lsls	r3, r3, #10
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x552>
 8002a7c:	e01b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a7e:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a82:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002a84:	4943      	ldr	r1, [pc, #268]	; (8002b94 <HAL_RCC_OscConfig+0x688>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fa51 	bl	8000f30 <HAL_GetTick>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a94:	f7fe fa4c 	bl	8000f30 <HAL_GetTick>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0b2      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	029b      	lsls	r3, r3, #10
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x588>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ab4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d100      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x5b4>
 8002abe:	e0a4      	b.n	8002c0a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	220c      	movs	r2, #12
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d100      	bne.n	8002ace <HAL_RCC_OscConfig+0x5c2>
 8002acc:	e078      	b.n	8002bc0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d14c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002adc:	492e      	ldr	r1, [pc, #184]	; (8002b98 <HAL_RCC_OscConfig+0x68c>)
 8002ade:	400a      	ands	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fa25 	bl	8000f30 <HAL_GetTick>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fa20 	bl	8000f30 <HAL_GetTick>
 8002af0:	0002      	movs	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e086      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	049b      	lsls	r3, r3, #18
 8002b06:	4013      	ands	r3, r2
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	220f      	movs	r2, #15
 8002b10:	4393      	bics	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_RCC_OscConfig+0x690>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	431a      	orrs	r2, r3
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b3e:	2180      	movs	r1, #128	; 0x80
 8002b40:	0449      	lsls	r1, r1, #17
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fe f9f3 	bl	8000f30 <HAL_GetTick>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe f9ee 	bl	8000f30 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e054      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	049b      	lsls	r3, r3, #18
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x644>
 8002b6e:	e04c      	b.n	8002c0a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <HAL_RCC_OscConfig+0x67c>)
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <HAL_RCC_OscConfig+0x68c>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe f9d8 	bl	8000f30 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x6a6>
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	00001388 	.word	0x00001388
 8002b90:	efffffff 	.word	0xefffffff
 8002b94:	fffeffff 	.word	0xfffeffff
 8002b98:	feffffff 	.word	0xfeffffff
 8002b9c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe f9c6 	bl	8000f30 <HAL_GetTick>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e02c      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb2:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_RCC_OscConfig+0x708>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	049b      	lsls	r3, r3, #18
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x694>
 8002bbe:	e024      	b.n	8002c0a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e01f      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_RCC_OscConfig+0x708>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCC_OscConfig+0x708>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	23c0      	movs	r3, #192	; 0xc0
 8002bdc:	025b      	lsls	r3, r3, #9
 8002bde:	401a      	ands	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d10e      	bne.n	8002c06 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	220f      	movs	r2, #15
 8002bec:	401a      	ands	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	23f0      	movs	r3, #240	; 0xf0
 8002bfa:	039b      	lsls	r3, r3, #14
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b008      	add	sp, #32
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0bf      	b.n	8002dac <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b61      	ldr	r3, [pc, #388]	; (8002db4 <HAL_RCC_ClockConfig+0x19c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d911      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b5e      	ldr	r3, [pc, #376]	; (8002db4 <HAL_RCC_ClockConfig+0x19c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4393      	bics	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <HAL_RCC_ClockConfig+0x19c>)
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCC_ClockConfig+0x19c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2201      	movs	r2, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0a6      	b.n	8002dac <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2202      	movs	r2, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	d015      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d006      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c72:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c78:	21e0      	movs	r1, #224	; 0xe0
 8002c7a:	00c9      	lsls	r1, r1, #3
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b4d      	ldr	r3, [pc, #308]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	22f0      	movs	r2, #240	; 0xf0
 8002c86:	4393      	bics	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d04c      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	029b      	lsls	r3, r3, #10
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d120      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e07a      	b.n	8002dac <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	4b3e      	ldr	r3, [pc, #248]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	049b      	lsls	r3, r3, #18
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d114      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e06e      	b.n	8002dac <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002cd6:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	029b      	lsls	r3, r3, #10
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e062      	b.n	8002dac <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2202      	movs	r2, #2
 8002cec:	4013      	ands	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e05b      	b.n	8002dac <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d08:	f7fe f912 	bl	8000f30 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d10:	e009      	b.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d12:	f7fe f90d 	bl	8000f30 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_RCC_ClockConfig+0x1a4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e042      	b.n	8002dac <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1ec      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_RCC_ClockConfig+0x19c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d211      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCC_ClockConfig+0x19c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_RCC_ClockConfig+0x19c>)
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_RCC_ClockConfig+0x19c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4013      	ands	r3, r2
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e020      	b.n	8002dac <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	4013      	ands	r3, r2
 8002d72:	d009      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <HAL_RCC_ClockConfig+0x1a8>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d88:	f000 f820 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002d8c:	0001      	movs	r1, r0
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_RCC_ClockConfig+0x1a0>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	220f      	movs	r2, #15
 8002d96:	4013      	ands	r3, r2
 8002d98:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_RCC_ClockConfig+0x1ac>)
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	000a      	movs	r2, r1
 8002d9e:	40da      	lsrs	r2, r3
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b0>)
 8002da2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002da4:	2003      	movs	r0, #3
 8002da6:	f7fe f87d 	bl	8000ea4 <HAL_InitTick>
  
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	00001388 	.word	0x00001388
 8002dc0:	fffff8ff 	.word	0xfffff8ff
 8002dc4:	080043b0 	.word	0x080043b0
 8002dc8:	20000004 	.word	0x20000004

08002dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	220c      	movs	r2, #12
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d046      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0xb8>
 8002df6:	d848      	bhi.n	8002e8a <HAL_RCC_GetSysClockFreq+0xbe>
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d002      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x36>
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d003      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x3c>
 8002e00:	e043      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e02:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e04:	613b      	str	r3, [r7, #16]
      break;
 8002e06:	e043      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	0c9b      	lsrs	r3, r3, #18
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	4013      	ands	r3, r2
 8002e10:	4a24      	ldr	r2, [pc, #144]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002e20:	5cd3      	ldrb	r3, [r2, r3]
 8002e22:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	23c0      	movs	r3, #192	; 0xc0
 8002e28:	025b      	lsls	r3, r3, #9
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	025b      	lsls	r3, r3, #9
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d109      	bne.n	8002e48 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	481a      	ldr	r0, [pc, #104]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e38:	f7fd f966 	bl	8000108 <__udivsi3>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	001a      	movs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4353      	muls	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e01a      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	23c0      	movs	r3, #192	; 0xc0
 8002e4c:	025b      	lsls	r3, r3, #9
 8002e4e:	401a      	ands	r2, r3
 8002e50:	23c0      	movs	r3, #192	; 0xc0
 8002e52:	025b      	lsls	r3, r3, #9
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d109      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	4814      	ldr	r0, [pc, #80]	; (8002eac <HAL_RCC_GetSysClockFreq+0xe0>)
 8002e5c:	f7fd f954 	bl	8000108 <__udivsi3>
 8002e60:	0003      	movs	r3, r0
 8002e62:	001a      	movs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4353      	muls	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e70:	f7fd f94a 	bl	8000108 <__udivsi3>
 8002e74:	0003      	movs	r3, r0
 8002e76:	001a      	movs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4353      	muls	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	613b      	str	r3, [r7, #16]
      break;
 8002e82:	e005      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_GetSysClockFreq+0xe0>)
 8002e86:	613b      	str	r3, [r7, #16]
      break;
 8002e88:	e002      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e8c:	613b      	str	r3, [r7, #16]
      break;
 8002e8e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e90:	693b      	ldr	r3, [r7, #16]
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b006      	add	sp, #24
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	007a1200 	.word	0x007a1200
 8002ea4:	080043c8 	.word	0x080043c8
 8002ea8:	080043d8 	.word	0x080043d8
 8002eac:	02dc6c00 	.word	0x02dc6c00

08002eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b02      	ldr	r3, [pc, #8]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ec8:	f7ff fff2 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ecc:	0001      	movs	r1, r0
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	4a04      	ldr	r2, [pc, #16]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	40d9      	lsrs	r1, r3
 8002ede:	000b      	movs	r3, r1
}    
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	080043c0 	.word	0x080043c0

08002ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	025b      	lsls	r3, r3, #9
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002f0c:	e08e      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2017      	movs	r0, #23
 8002f10:	183b      	adds	r3, r7, r0
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	055b      	lsls	r3, r3, #21
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d110      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b64      	ldr	r3, [pc, #400]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	4b63      	ldr	r3, [pc, #396]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	0549      	lsls	r1, r1, #21
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	61da      	str	r2, [r3, #28]
 8002f30:	4b60      	ldr	r3, [pc, #384]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	055b      	lsls	r3, r3, #21
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	183b      	adds	r3, r7, r0
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f44:	4b5c      	ldr	r3, [pc, #368]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d11a      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f50:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b58      	ldr	r3, [pc, #352]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	0049      	lsls	r1, r1, #1
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fd ffe7 	bl	8000f30 <HAL_GetTick>
 8002f62:	0003      	movs	r3, r0
 8002f64:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	e008      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fd ffe2 	bl	8000f30 <HAL_GetTick>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e097      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4013      	ands	r3, r2
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f86:	4b4b      	ldr	r3, [pc, #300]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	23c0      	movs	r3, #192	; 0xc0
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d034      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	23c0      	movs	r3, #192	; 0xc0
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d02c      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa8:	4b42      	ldr	r3, [pc, #264]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4a43      	ldr	r2, [pc, #268]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb2:	4b40      	ldr	r3, [pc, #256]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0249      	lsls	r1, r1, #9
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc0:	4b3c      	ldr	r3, [pc, #240]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fc2:	6a1a      	ldr	r2, [r3, #32]
 8002fc4:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fc6:	493e      	ldr	r1, [pc, #248]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fcc:	4b39      	ldr	r3, [pc, #228]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fd ffa9 	bl	8000f30 <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	e009      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fd ffa4 	bl	8000f30 <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	4a35      	ldr	r2, [pc, #212]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e058      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	4013      	ands	r3, r2
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003002:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a2d      	ldr	r2, [pc, #180]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003012:	430a      	orrs	r2, r1
 8003014:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003016:	2317      	movs	r3, #23
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003026:	4928      	ldr	r1, [pc, #160]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003028:	400a      	ands	r2, r1
 800302a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003036:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	2203      	movs	r2, #3
 800303c:	4393      	bics	r3, r2
 800303e:	0019      	movs	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003046:	430a      	orrs	r2, r1
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2220      	movs	r2, #32
 8003050:	4013      	ands	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003054:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	2210      	movs	r2, #16
 800305a:	4393      	bics	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003064:	430a      	orrs	r2, r1
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	029b      	lsls	r3, r3, #10
 8003070:	4013      	ands	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	4393      	bics	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003084:	430a      	orrs	r2, r1
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4013      	ands	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	4393      	bics	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80030a4:	430a      	orrs	r2, r1
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b006      	add	sp, #24
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
 80030bc:	fffffcff 	.word	0xfffffcff
 80030c0:	fffeffff 	.word	0xfffeffff
 80030c4:	00001388 	.word	0x00001388
 80030c8:	efffffff 	.word	0xefffffff

080030cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e044      	b.n	8003168 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d107      	bne.n	80030f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2278      	movs	r2, #120	; 0x78
 80030ea:	2100      	movs	r1, #0
 80030ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7fd fd61 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2224      	movs	r2, #36	; 0x24
 80030fa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2101      	movs	r1, #1
 8003108:	438a      	bics	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	0018      	movs	r0, r3
 8003110:	f000 fb30 	bl	8003774 <UART_SetConfig>
 8003114:	0003      	movs	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e024      	b.n	8003168 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 fc63 	bl	80039f4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	490d      	ldr	r1, [pc, #52]	; (8003170 <HAL_UART_Init+0xa4>)
 800313a:	400a      	ands	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	212a      	movs	r1, #42	; 0x2a
 800314a:	438a      	bics	r2, r1
 800314c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2101      	movs	r1, #1
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f000 fcfb 	bl	8003b5c <UART_CheckIdleState>
 8003166:	0003      	movs	r3, r0
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}
 8003170:	ffffb7ff 	.word	0xffffb7ff

08003174 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b0ab      	sub	sp, #172	; 0xac
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	22a4      	movs	r2, #164	; 0xa4
 8003184:	18b9      	adds	r1, r7, r2
 8003186:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	20a0      	movs	r0, #160	; 0xa0
 8003190:	1839      	adds	r1, r7, r0
 8003192:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	219c      	movs	r1, #156	; 0x9c
 800319c:	1879      	adds	r1, r7, r1
 800319e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031a0:	0011      	movs	r1, r2
 80031a2:	18bb      	adds	r3, r7, r2
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a99      	ldr	r2, [pc, #612]	; (800340c <HAL_UART_IRQHandler+0x298>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	2298      	movs	r2, #152	; 0x98
 80031ac:	18bc      	adds	r4, r7, r2
 80031ae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80031b0:	18bb      	adds	r3, r7, r2
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d114      	bne.n	80031e2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2220      	movs	r2, #32
 80031be:	4013      	ands	r3, r2
 80031c0:	d00f      	beq.n	80031e2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031c2:	183b      	adds	r3, r7, r0
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2220      	movs	r2, #32
 80031c8:	4013      	ands	r3, r2
 80031ca:	d00a      	beq.n	80031e2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d100      	bne.n	80031d6 <HAL_UART_IRQHandler+0x62>
 80031d4:	e29e      	b.n	8003714 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	0010      	movs	r0, r2
 80031de:	4798      	blx	r3
      }
      return;
 80031e0:	e298      	b.n	8003714 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031e2:	2398      	movs	r3, #152	; 0x98
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d100      	bne.n	80031ee <HAL_UART_IRQHandler+0x7a>
 80031ec:	e114      	b.n	8003418 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031ee:	239c      	movs	r3, #156	; 0x9c
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2201      	movs	r2, #1
 80031f6:	4013      	ands	r3, r2
 80031f8:	d106      	bne.n	8003208 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031fa:	23a0      	movs	r3, #160	; 0xa0
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a83      	ldr	r2, [pc, #524]	; (8003410 <HAL_UART_IRQHandler+0x29c>)
 8003202:	4013      	ands	r3, r2
 8003204:	d100      	bne.n	8003208 <HAL_UART_IRQHandler+0x94>
 8003206:	e107      	b.n	8003418 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003208:	23a4      	movs	r3, #164	; 0xa4
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	4013      	ands	r3, r2
 8003212:	d012      	beq.n	800323a <HAL_UART_IRQHandler+0xc6>
 8003214:	23a0      	movs	r3, #160	; 0xa0
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4013      	ands	r3, r2
 8003220:	d00b      	beq.n	800323a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2284      	movs	r2, #132	; 0x84
 800322e:	589b      	ldr	r3, [r3, r2]
 8003230:	2201      	movs	r2, #1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2184      	movs	r1, #132	; 0x84
 8003238:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800323a:	23a4      	movs	r3, #164	; 0xa4
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2202      	movs	r2, #2
 8003242:	4013      	ands	r3, r2
 8003244:	d011      	beq.n	800326a <HAL_UART_IRQHandler+0xf6>
 8003246:	239c      	movs	r3, #156	; 0x9c
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2202      	movs	r2, #2
 8003258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2284      	movs	r2, #132	; 0x84
 800325e:	589b      	ldr	r3, [r3, r2]
 8003260:	2204      	movs	r2, #4
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2184      	movs	r1, #132	; 0x84
 8003268:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800326a:	23a4      	movs	r3, #164	; 0xa4
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2204      	movs	r2, #4
 8003272:	4013      	ands	r3, r2
 8003274:	d011      	beq.n	800329a <HAL_UART_IRQHandler+0x126>
 8003276:	239c      	movs	r3, #156	; 0x9c
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2201      	movs	r2, #1
 800327e:	4013      	ands	r3, r2
 8003280:	d00b      	beq.n	800329a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2204      	movs	r2, #4
 8003288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2284      	movs	r2, #132	; 0x84
 800328e:	589b      	ldr	r3, [r3, r2]
 8003290:	2202      	movs	r2, #2
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2184      	movs	r1, #132	; 0x84
 8003298:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800329a:	23a4      	movs	r3, #164	; 0xa4
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2208      	movs	r2, #8
 80032a2:	4013      	ands	r3, r2
 80032a4:	d017      	beq.n	80032d6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032a6:	23a0      	movs	r3, #160	; 0xa0
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2220      	movs	r2, #32
 80032ae:	4013      	ands	r3, r2
 80032b0:	d105      	bne.n	80032be <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032b2:	239c      	movs	r3, #156	; 0x9c
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032bc:	d00b      	beq.n	80032d6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2208      	movs	r2, #8
 80032c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2284      	movs	r2, #132	; 0x84
 80032ca:	589b      	ldr	r3, [r3, r2]
 80032cc:	2208      	movs	r2, #8
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2184      	movs	r1, #132	; 0x84
 80032d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032d6:	23a4      	movs	r3, #164	; 0xa4
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_UART_IRQHandler+0x198>
 80032e4:	23a0      	movs	r3, #160	; 0xa0
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	04db      	lsls	r3, r3, #19
 80032ee:	4013      	ands	r3, r2
 80032f0:	d00c      	beq.n	800330c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2284      	movs	r2, #132	; 0x84
 8003300:	589b      	ldr	r3, [r3, r2]
 8003302:	2220      	movs	r2, #32
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2184      	movs	r1, #132	; 0x84
 800330a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2284      	movs	r2, #132	; 0x84
 8003310:	589b      	ldr	r3, [r3, r2]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d100      	bne.n	8003318 <HAL_UART_IRQHandler+0x1a4>
 8003316:	e1ff      	b.n	8003718 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003318:	23a4      	movs	r3, #164	; 0xa4
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2220      	movs	r2, #32
 8003320:	4013      	ands	r3, r2
 8003322:	d00e      	beq.n	8003342 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003324:	23a0      	movs	r3, #160	; 0xa0
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2220      	movs	r2, #32
 800332c:	4013      	ands	r3, r2
 800332e:	d008      	beq.n	8003342 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	0010      	movs	r0, r2
 8003340:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2284      	movs	r2, #132	; 0x84
 8003346:	589b      	ldr	r3, [r3, r2]
 8003348:	2194      	movs	r1, #148	; 0x94
 800334a:	187a      	adds	r2, r7, r1
 800334c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2240      	movs	r2, #64	; 0x40
 8003356:	4013      	ands	r3, r2
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d004      	beq.n	8003366 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800335c:	187b      	adds	r3, r7, r1
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2228      	movs	r2, #40	; 0x28
 8003362:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003364:	d047      	beq.n	80033f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	0018      	movs	r0, r3
 800336a:	f000 fdcd 	bl	8003f08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2240      	movs	r2, #64	; 0x40
 8003376:	4013      	ands	r3, r2
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d137      	bne.n	80033ec <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337c:	f3ef 8310 	mrs	r3, PRIMASK
 8003380:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003384:	2090      	movs	r0, #144	; 0x90
 8003386:	183a      	adds	r2, r7, r0
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	2301      	movs	r3, #1
 800338c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003390:	f383 8810 	msr	PRIMASK, r3
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2140      	movs	r1, #64	; 0x40
 80033a2:	438a      	bics	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	183b      	adds	r3, r7, r0
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d012      	beq.n	80033e2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <HAL_UART_IRQHandler+0x2a0>)
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7fe fde9 	bl	8001fa0 <HAL_DMA_Abort_IT>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d01a      	beq.n	8003408 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	0018      	movs	r0, r3
 80033de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e0:	e012      	b.n	8003408 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 f9bd 	bl	8003764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ea:	e00d      	b.n	8003408 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 f9b8 	bl	8003764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e008      	b.n	8003408 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f9b3 	bl	8003764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2284      	movs	r2, #132	; 0x84
 8003402:	2100      	movs	r1, #0
 8003404:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003406:	e187      	b.n	8003718 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	46c0      	nop			; (mov r8, r8)
    return;
 800340a:	e185      	b.n	8003718 <HAL_UART_IRQHandler+0x5a4>
 800340c:	0000080f 	.word	0x0000080f
 8003410:	04000120 	.word	0x04000120
 8003414:	080041c3 	.word	0x080041c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341c:	2b01      	cmp	r3, #1
 800341e:	d000      	beq.n	8003422 <HAL_UART_IRQHandler+0x2ae>
 8003420:	e139      	b.n	8003696 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003422:	23a4      	movs	r3, #164	; 0xa4
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2210      	movs	r2, #16
 800342a:	4013      	ands	r3, r2
 800342c:	d100      	bne.n	8003430 <HAL_UART_IRQHandler+0x2bc>
 800342e:	e132      	b.n	8003696 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003430:	23a0      	movs	r3, #160	; 0xa0
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2210      	movs	r2, #16
 8003438:	4013      	ands	r3, r2
 800343a:	d100      	bne.n	800343e <HAL_UART_IRQHandler+0x2ca>
 800343c:	e12b      	b.n	8003696 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2210      	movs	r2, #16
 8003444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2240      	movs	r2, #64	; 0x40
 800344e:	4013      	ands	r3, r2
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d000      	beq.n	8003456 <HAL_UART_IRQHandler+0x2e2>
 8003454:	e09f      	b.n	8003596 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	217e      	movs	r1, #126	; 0x7e
 8003460:	187b      	adds	r3, r7, r1
 8003462:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003464:	187b      	adds	r3, r7, r1
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d100      	bne.n	800346e <HAL_UART_IRQHandler+0x2fa>
 800346c:	e156      	b.n	800371c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2258      	movs	r2, #88	; 0x58
 8003472:	5a9b      	ldrh	r3, [r3, r2]
 8003474:	187a      	adds	r2, r7, r1
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d300      	bcc.n	800347e <HAL_UART_IRQHandler+0x30a>
 800347c:	e14e      	b.n	800371c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	187a      	adds	r2, r7, r1
 8003482:	215a      	movs	r1, #90	; 0x5a
 8003484:	8812      	ldrh	r2, [r2, #0]
 8003486:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b20      	cmp	r3, #32
 8003490:	d06f      	beq.n	8003572 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003492:	f3ef 8310 	mrs	r3, PRIMASK
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800349a:	67bb      	str	r3, [r7, #120]	; 0x78
 800349c:	2301      	movs	r3, #1
 800349e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	499e      	ldr	r1, [pc, #632]	; (800372c <HAL_UART_IRQHandler+0x5b8>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	f383 8810 	msr	PRIMASK, r3
}
 80034c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c4:	f3ef 8310 	mrs	r3, PRIMASK
 80034c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80034ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034cc:	677b      	str	r3, [r7, #116]	; 0x74
 80034ce:	2301      	movs	r3, #1
 80034d0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d4:	f383 8810 	msr	PRIMASK, r3
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	438a      	bics	r2, r1
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f0:	f383 8810 	msr	PRIMASK, r3
}
 80034f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f6:	f3ef 8310 	mrs	r3, PRIMASK
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80034fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003500:	2301      	movs	r3, #1
 8003502:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2140      	movs	r1, #64	; 0x40
 8003518:	438a      	bics	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800351e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	2120      	movs	r1, #32
 800352e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003536:	f3ef 8310 	mrs	r3, PRIMASK
 800353a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800353c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003540:	2301      	movs	r3, #1
 8003542:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003546:	f383 8810 	msr	PRIMASK, r3
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2110      	movs	r1, #16
 8003558:	438a      	bics	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003562:	f383 8810 	msr	PRIMASK, r3
}
 8003566:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356c:	0018      	movs	r0, r3
 800356e:	f7fe fcdf 	bl	8001f30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2258      	movs	r2, #88	; 0x58
 800357c:	5a9a      	ldrh	r2, [r3, r2]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	215a      	movs	r1, #90	; 0x5a
 8003582:	5a5b      	ldrh	r3, [r3, r1]
 8003584:	b29b      	uxth	r3, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	b29a      	uxth	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0011      	movs	r1, r2
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd fc16 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003594:	e0c2      	b.n	800371c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2258      	movs	r2, #88	; 0x58
 800359a:	5a99      	ldrh	r1, [r3, r2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	225a      	movs	r2, #90	; 0x5a
 80035a0:	5a9b      	ldrh	r3, [r3, r2]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	208e      	movs	r0, #142	; 0x8e
 80035a6:	183b      	adds	r3, r7, r0
 80035a8:	1a8a      	subs	r2, r1, r2
 80035aa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	225a      	movs	r2, #90	; 0x5a
 80035b0:	5a9b      	ldrh	r3, [r3, r2]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d100      	bne.n	80035ba <HAL_UART_IRQHandler+0x446>
 80035b8:	e0b2      	b.n	8003720 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80035ba:	183b      	adds	r3, r7, r0
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d100      	bne.n	80035c4 <HAL_UART_IRQHandler+0x450>
 80035c2:	e0ad      	b.n	8003720 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c4:	f3ef 8310 	mrs	r3, PRIMASK
 80035c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80035ca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035cc:	2488      	movs	r4, #136	; 0x88
 80035ce:	193a      	adds	r2, r7, r4
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	2301      	movs	r3, #1
 80035d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f383 8810 	msr	PRIMASK, r3
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4951      	ldr	r1, [pc, #324]	; (8003730 <HAL_UART_IRQHandler+0x5bc>)
 80035ea:	400a      	ands	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	193b      	adds	r3, r7, r4
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003600:	61bb      	str	r3, [r7, #24]
  return(result);
 8003602:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003604:	2484      	movs	r4, #132	; 0x84
 8003606:	193a      	adds	r2, r7, r4
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	2301      	movs	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f383 8810 	msr	PRIMASK, r3
}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	438a      	bics	r2, r1
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	193b      	adds	r3, r7, r4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	2120      	movs	r1, #32
 800363a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003648:	f3ef 8310 	mrs	r3, PRIMASK
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003650:	2480      	movs	r4, #128	; 0x80
 8003652:	193a      	adds	r2, r7, r4
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	2301      	movs	r3, #1
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	f383 8810 	msr	PRIMASK, r3
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2110      	movs	r1, #16
 800366e:	438a      	bics	r2, r1
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	193b      	adds	r3, r7, r4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003686:	183b      	adds	r3, r7, r0
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	0011      	movs	r1, r2
 800368e:	0018      	movs	r0, r3
 8003690:	f7fd fb96 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003694:	e044      	b.n	8003720 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003696:	23a4      	movs	r3, #164	; 0xa4
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	035b      	lsls	r3, r3, #13
 80036a0:	4013      	ands	r3, r2
 80036a2:	d010      	beq.n	80036c6 <HAL_UART_IRQHandler+0x552>
 80036a4:	239c      	movs	r3, #156	; 0x9c
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	03db      	lsls	r3, r3, #15
 80036ae:	4013      	ands	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	0352      	lsls	r2, r2, #13
 80036ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 fdc1 	bl	8004246 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036c4:	e02f      	b.n	8003726 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80036c6:	23a4      	movs	r3, #164	; 0xa4
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	4013      	ands	r3, r2
 80036d0:	d00f      	beq.n	80036f2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036d2:	23a0      	movs	r3, #160	; 0xa0
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	4013      	ands	r3, r2
 80036dc:	d009      	beq.n	80036f2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01e      	beq.n	8003724 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	0010      	movs	r0, r2
 80036ee:	4798      	blx	r3
    }
    return;
 80036f0:	e018      	b.n	8003724 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036f2:	23a4      	movs	r3, #164	; 0xa4
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2240      	movs	r2, #64	; 0x40
 80036fa:	4013      	ands	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_UART_IRQHandler+0x5b2>
 80036fe:	23a0      	movs	r3, #160	; 0xa0
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2240      	movs	r2, #64	; 0x40
 8003706:	4013      	ands	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 fd6f 	bl	80041f0 <UART_EndTransmit_IT>
    return;
 8003712:	e008      	b.n	8003726 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	e006      	b.n	8003726 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	e004      	b.n	8003726 <HAL_UART_IRQHandler+0x5b2>
      return;
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	e002      	b.n	8003726 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	e000      	b.n	8003726 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003724:	46c0      	nop			; (mov r8, r8)
  }

}
 8003726:	46bd      	mov	sp, r7
 8003728:	b02b      	add	sp, #172	; 0xac
 800372a:	bd90      	pop	{r4, r7, pc}
 800372c:	fffffeff 	.word	0xfffffeff
 8003730:	fffffedf 	.word	0xfffffedf

08003734 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	b002      	add	sp, #8
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	46bd      	mov	sp, r7
 8003760:	b002      	add	sp, #8
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}

08003774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800377c:	231e      	movs	r3, #30
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a8d      	ldr	r2, [pc, #564]	; (80039d8 <UART_SetConfig+0x264>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	0019      	movs	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a88      	ldr	r2, [pc, #544]	; (80039dc <UART_SetConfig+0x268>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a7f      	ldr	r2, [pc, #508]	; (80039e0 <UART_SetConfig+0x26c>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a7b      	ldr	r2, [pc, #492]	; (80039e4 <UART_SetConfig+0x270>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d127      	bne.n	800384a <UART_SetConfig+0xd6>
 80037fa:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <UART_SetConfig+0x274>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	2203      	movs	r2, #3
 8003800:	4013      	ands	r3, r2
 8003802:	2b03      	cmp	r3, #3
 8003804:	d00d      	beq.n	8003822 <UART_SetConfig+0xae>
 8003806:	d81b      	bhi.n	8003840 <UART_SetConfig+0xcc>
 8003808:	2b02      	cmp	r3, #2
 800380a:	d014      	beq.n	8003836 <UART_SetConfig+0xc2>
 800380c:	d818      	bhi.n	8003840 <UART_SetConfig+0xcc>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <UART_SetConfig+0xa4>
 8003812:	2b01      	cmp	r3, #1
 8003814:	d00a      	beq.n	800382c <UART_SetConfig+0xb8>
 8003816:	e013      	b.n	8003840 <UART_SetConfig+0xcc>
 8003818:	231f      	movs	r3, #31
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e021      	b.n	8003866 <UART_SetConfig+0xf2>
 8003822:	231f      	movs	r3, #31
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	2202      	movs	r2, #2
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	e01c      	b.n	8003866 <UART_SetConfig+0xf2>
 800382c:	231f      	movs	r3, #31
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2204      	movs	r2, #4
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e017      	b.n	8003866 <UART_SetConfig+0xf2>
 8003836:	231f      	movs	r3, #31
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2208      	movs	r2, #8
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e012      	b.n	8003866 <UART_SetConfig+0xf2>
 8003840:	231f      	movs	r3, #31
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2210      	movs	r2, #16
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e00d      	b.n	8003866 <UART_SetConfig+0xf2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a67      	ldr	r2, [pc, #412]	; (80039ec <UART_SetConfig+0x278>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d104      	bne.n	800385e <UART_SetConfig+0xea>
 8003854:	231f      	movs	r3, #31
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e003      	b.n	8003866 <UART_SetConfig+0xf2>
 800385e:	231f      	movs	r3, #31
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2210      	movs	r2, #16
 8003864:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	429a      	cmp	r2, r3
 8003870:	d15c      	bne.n	800392c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003872:	231f      	movs	r3, #31
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d015      	beq.n	80038a8 <UART_SetConfig+0x134>
 800387c:	dc18      	bgt.n	80038b0 <UART_SetConfig+0x13c>
 800387e:	2b04      	cmp	r3, #4
 8003880:	d00d      	beq.n	800389e <UART_SetConfig+0x12a>
 8003882:	dc15      	bgt.n	80038b0 <UART_SetConfig+0x13c>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <UART_SetConfig+0x11a>
 8003888:	2b02      	cmp	r3, #2
 800388a:	d005      	beq.n	8003898 <UART_SetConfig+0x124>
 800388c:	e010      	b.n	80038b0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800388e:	f7ff fb19 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8003892:	0003      	movs	r3, r0
 8003894:	61bb      	str	r3, [r7, #24]
        break;
 8003896:	e012      	b.n	80038be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003898:	4b55      	ldr	r3, [pc, #340]	; (80039f0 <UART_SetConfig+0x27c>)
 800389a:	61bb      	str	r3, [r7, #24]
        break;
 800389c:	e00f      	b.n	80038be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389e:	f7ff fa95 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 80038a2:	0003      	movs	r3, r0
 80038a4:	61bb      	str	r3, [r7, #24]
        break;
 80038a6:	e00a      	b.n	80038be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	61bb      	str	r3, [r7, #24]
        break;
 80038ae:	e006      	b.n	80038be <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038b4:	231e      	movs	r3, #30
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	2201      	movs	r2, #1
 80038ba:	701a      	strb	r2, [r3, #0]
        break;
 80038bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d100      	bne.n	80038c6 <UART_SetConfig+0x152>
 80038c4:	e07a      	b.n	80039bc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	005a      	lsls	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	18d2      	adds	r2, r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	0019      	movs	r1, r3
 80038d8:	0010      	movs	r0, r2
 80038da:	f7fc fc15 	bl	8000108 <__udivsi3>
 80038de:	0003      	movs	r3, r0
 80038e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b0f      	cmp	r3, #15
 80038e6:	d91c      	bls.n	8003922 <UART_SetConfig+0x1ae>
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	025b      	lsls	r3, r3, #9
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d217      	bcs.n	8003922 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	200e      	movs	r0, #14
 80038f8:	183b      	adds	r3, r7, r0
 80038fa:	210f      	movs	r1, #15
 80038fc:	438a      	bics	r2, r1
 80038fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	2207      	movs	r2, #7
 8003908:	4013      	ands	r3, r2
 800390a:	b299      	uxth	r1, r3
 800390c:	183b      	adds	r3, r7, r0
 800390e:	183a      	adds	r2, r7, r0
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	183a      	adds	r2, r7, r0
 800391c:	8812      	ldrh	r2, [r2, #0]
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	e04c      	b.n	80039bc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003922:	231e      	movs	r3, #30
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e047      	b.n	80039bc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800392c:	231f      	movs	r3, #31
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d015      	beq.n	8003962 <UART_SetConfig+0x1ee>
 8003936:	dc18      	bgt.n	800396a <UART_SetConfig+0x1f6>
 8003938:	2b04      	cmp	r3, #4
 800393a:	d00d      	beq.n	8003958 <UART_SetConfig+0x1e4>
 800393c:	dc15      	bgt.n	800396a <UART_SetConfig+0x1f6>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <UART_SetConfig+0x1d4>
 8003942:	2b02      	cmp	r3, #2
 8003944:	d005      	beq.n	8003952 <UART_SetConfig+0x1de>
 8003946:	e010      	b.n	800396a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003948:	f7ff fabc 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 800394c:	0003      	movs	r3, r0
 800394e:	61bb      	str	r3, [r7, #24]
        break;
 8003950:	e012      	b.n	8003978 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003952:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <UART_SetConfig+0x27c>)
 8003954:	61bb      	str	r3, [r7, #24]
        break;
 8003956:	e00f      	b.n	8003978 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003958:	f7ff fa38 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 800395c:	0003      	movs	r3, r0
 800395e:	61bb      	str	r3, [r7, #24]
        break;
 8003960:	e00a      	b.n	8003978 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	61bb      	str	r3, [r7, #24]
        break;
 8003968:	e006      	b.n	8003978 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800396e:	231e      	movs	r3, #30
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
        break;
 8003976:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01e      	beq.n	80039bc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	085a      	lsrs	r2, r3, #1
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	18d2      	adds	r2, r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	0019      	movs	r1, r3
 800398e:	0010      	movs	r0, r2
 8003990:	f7fc fbba 	bl	8000108 <__udivsi3>
 8003994:	0003      	movs	r3, r0
 8003996:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b0f      	cmp	r3, #15
 800399c:	d90a      	bls.n	80039b4 <UART_SetConfig+0x240>
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	025b      	lsls	r3, r3, #9
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d205      	bcs.n	80039b4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	e003      	b.n	80039bc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80039b4:	231e      	movs	r3, #30
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039c8:	231e      	movs	r3, #30
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	781b      	ldrb	r3, [r3, #0]
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b008      	add	sp, #32
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	efff69f3 	.word	0xefff69f3
 80039dc:	ffffcfff 	.word	0xffffcfff
 80039e0:	fffff4ff 	.word	0xfffff4ff
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40004400 	.word	0x40004400
 80039f0:	007a1200 	.word	0x007a1200

080039f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2201      	movs	r2, #1
 8003a02:	4013      	ands	r3, r2
 8003a04:	d00b      	beq.n	8003a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <UART_AdvFeatureConfig+0x144>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	0019      	movs	r1, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4a43      	ldr	r2, [pc, #268]	; (8003b3c <UART_AdvFeatureConfig+0x148>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2204      	movs	r2, #4
 8003a46:	4013      	ands	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <UART_AdvFeatureConfig+0x14c>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2208      	movs	r2, #8
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d00b      	beq.n	8003a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <UART_AdvFeatureConfig+0x150>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	2210      	movs	r2, #16
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a2c      	ldr	r2, [pc, #176]	; (8003b48 <UART_AdvFeatureConfig+0x154>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2220      	movs	r2, #32
 8003aac:	4013      	ands	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <UART_AdvFeatureConfig+0x158>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	2240      	movs	r2, #64	; 0x40
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d01d      	beq.n	8003b0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <UART_AdvFeatureConfig+0x15c>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	0019      	movs	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	035b      	lsls	r3, r3, #13
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d10b      	bne.n	8003b0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <UART_AdvFeatureConfig+0x160>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	0019      	movs	r1, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2280      	movs	r2, #128	; 0x80
 8003b14:	4013      	ands	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <UART_AdvFeatureConfig+0x164>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	0019      	movs	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	fffdffff 	.word	0xfffdffff
 8003b3c:	fffeffff 	.word	0xfffeffff
 8003b40:	fffbffff 	.word	0xfffbffff
 8003b44:	ffff7fff 	.word	0xffff7fff
 8003b48:	ffffefff 	.word	0xffffefff
 8003b4c:	ffffdfff 	.word	0xffffdfff
 8003b50:	ffefffff 	.word	0xffefffff
 8003b54:	ff9fffff 	.word	0xff9fffff
 8003b58:	fff7ffff 	.word	0xfff7ffff

08003b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b092      	sub	sp, #72	; 0x48
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2284      	movs	r2, #132	; 0x84
 8003b68:	2100      	movs	r1, #0
 8003b6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b6c:	f7fd f9e0 	bl	8000f30 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d12c      	bne.n	8003bdc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	0391      	lsls	r1, r2, #14
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4a46      	ldr	r2, [pc, #280]	; (8003ca4 <UART_CheckIdleState+0x148>)
 8003b8c:	9200      	str	r2, [sp, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f000 f88c 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d021      	beq.n	8003bdc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b98:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	f383 8810 	msr	PRIMASK, r3
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2180      	movs	r1, #128	; 0x80
 8003bba:	438a      	bics	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2278      	movs	r2, #120	; 0x78
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e05f      	b.n	8003c9c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2204      	movs	r2, #4
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d146      	bne.n	8003c78 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	03d1      	lsls	r1, r2, #15
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	; (8003ca4 <UART_CheckIdleState+0x148>)
 8003bf4:	9200      	str	r2, [sp, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f000 f858 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 8003bfc:	1e03      	subs	r3, r0, #0
 8003bfe:	d03b      	beq.n	8003c78 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c00:	f3ef 8310 	mrs	r3, PRIMASK
 8003c04:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c06:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f383 8810 	msr	PRIMASK, r3
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4921      	ldr	r1, [pc, #132]	; (8003ca8 <UART_CheckIdleState+0x14c>)
 8003c22:	400a      	ands	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f383 8810 	msr	PRIMASK, r3
}
 8003c30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c32:	f3ef 8310 	mrs	r3, PRIMASK
 8003c36:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c38:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f383 8810 	msr	PRIMASK, r3
}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	438a      	bics	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f383 8810 	msr	PRIMASK, r3
}
 8003c62:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	2120      	movs	r1, #32
 8003c6a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2278      	movs	r2, #120	; 0x78
 8003c70:	2100      	movs	r1, #0
 8003c72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e011      	b.n	8003c9c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	2120      	movs	r1, #32
 8003c84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2278      	movs	r2, #120	; 0x78
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b010      	add	sp, #64	; 0x40
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	01ffffff 	.word	0x01ffffff
 8003ca8:	fffffedf 	.word	0xfffffedf

08003cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbc:	e04b      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d048      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7fd f934 	bl	8000f30 <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <UART_WaitOnFlagUntilTimeout+0x2e>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e04b      	b.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d035      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d111      	bne.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 f900 	bl	8003f08 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2284      	movs	r2, #132	; 0x84
 8003d0c:	2108      	movs	r1, #8
 8003d0e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2278      	movs	r2, #120	; 0x78
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e02c      	b.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	401a      	ands	r2, r3
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d112      	bne.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	0112      	lsls	r2, r2, #4
 8003d38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f000 f8e3 	bl	8003f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2284      	movs	r2, #132	; 0x84
 8003d46:	2120      	movs	r1, #32
 8003d48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2278      	movs	r2, #120	; 0x78
 8003d4e:	2100      	movs	r1, #0
 8003d50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e00f      	b.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	425a      	negs	r2, r3
 8003d66:	4153      	adcs	r3, r2
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	1dfb      	adds	r3, r7, #7
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d0a4      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b090      	sub	sp, #64	; 0x40
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	1dbb      	adds	r3, r7, #6
 8003d8c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1dba      	adds	r2, r7, #6
 8003d98:	2158      	movs	r1, #88	; 0x58
 8003d9a:	8812      	ldrh	r2, [r2, #0]
 8003d9c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2284      	movs	r2, #132	; 0x84
 8003da2:	2100      	movs	r1, #0
 8003da4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2280      	movs	r2, #128	; 0x80
 8003daa:	2122      	movs	r1, #34	; 0x22
 8003dac:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d028      	beq.n	8003e08 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dba:	4a3e      	ldr	r2, [pc, #248]	; (8003eb4 <UART_Start_Receive_DMA+0x134>)
 8003dbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc2:	4a3d      	ldr	r2, [pc, #244]	; (8003eb8 <UART_Start_Receive_DMA+0x138>)
 8003dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dca:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <UART_Start_Receive_DMA+0x13c>)
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3324      	adds	r3, #36	; 0x24
 8003de0:	0019      	movs	r1, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	001a      	movs	r2, r3
 8003de8:	1dbb      	adds	r3, r7, #6
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	f7fe f83a 	bl	8001e64 <HAL_DMA_Start_IT>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d009      	beq.n	8003e08 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2284      	movs	r2, #132	; 0x84
 8003df8:	2110      	movs	r1, #16
 8003dfa:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	2120      	movs	r1, #32
 8003e02:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e050      	b.n	8003eaa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d019      	beq.n	8003e44 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	0049      	lsls	r1, r1, #1
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	f383 8810 	msr	PRIMASK, r3
}
 8003e42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e44:	f3ef 8310 	mrs	r3, PRIMASK
 8003e48:	613b      	str	r3, [r7, #16]
  return(result);
 8003e4a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f383 8810 	msr	PRIMASK, r3
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2101      	movs	r1, #1
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f383 8810 	msr	PRIMASK, r3
}
 8003e74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e76:	f3ef 8310 	mrs	r3, PRIMASK
 8003e7a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e7c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e80:	2301      	movs	r3, #1
 8003e82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	f383 8810 	msr	PRIMASK, r3
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	f383 8810 	msr	PRIMASK, r3
}
 8003ea6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b010      	add	sp, #64	; 0x40
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	08003fd1 	.word	0x08003fd1
 8003eb8:	080040fd 	.word	0x080040fd
 8003ebc:	0800413f 	.word	0x0800413f

08003ec0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ecc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ece:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f383 8810 	msr	PRIMASK, r3
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	21c0      	movs	r1, #192	; 0xc0
 8003eea:	438a      	bics	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f383 8810 	msr	PRIMASK, r3
}
 8003ef8:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b006      	add	sp, #24
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08e      	sub	sp, #56	; 0x38
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f10:	f3ef 8310 	mrs	r3, PRIMASK
 8003f14:	617b      	str	r3, [r7, #20]
  return(result);
 8003f16:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f383 8810 	msr	PRIMASK, r3
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4926      	ldr	r1, [pc, #152]	; (8003fcc <UART_EndRxTransfer+0xc4>)
 8003f32:	400a      	ands	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f383 8810 	msr	PRIMASK, r3
}
 8003f40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f42:	f3ef 8310 	mrs	r3, PRIMASK
 8003f46:	623b      	str	r3, [r7, #32]
  return(result);
 8003f48:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f383 8810 	msr	PRIMASK, r3
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2101      	movs	r1, #1
 8003f64:	438a      	bics	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	f383 8810 	msr	PRIMASK, r3
}
 8003f72:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d118      	bne.n	8003fae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f80:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f82:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f86:	2301      	movs	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2110      	movs	r1, #16
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2280      	movs	r2, #128	; 0x80
 8003fb2:	2120      	movs	r1, #32
 8003fb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b00e      	add	sp, #56	; 0x38
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	fffffedf 	.word	0xfffffedf

08003fd0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b094      	sub	sp, #80	; 0x50
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d06f      	beq.n	80040c6 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe8:	225a      	movs	r2, #90	; 0x5a
 8003fea:	2100      	movs	r1, #0
 8003fec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ff4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f383 8810 	msr	PRIMASK, r3
}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	493a      	ldr	r1, [pc, #232]	; (80040f8 <UART_DMAReceiveCplt+0x128>)
 8004010:	400a      	ands	r2, r1
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004016:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f383 8810 	msr	PRIMASK, r3
}
 800401e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004020:	f3ef 8310 	mrs	r3, PRIMASK
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004028:	647b      	str	r3, [r7, #68]	; 0x44
 800402a:	2301      	movs	r3, #1
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	f383 8810 	msr	PRIMASK, r3
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2101      	movs	r1, #1
 8004042:	438a      	bics	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	f383 8810 	msr	PRIMASK, r3
}
 8004050:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004052:	f3ef 8310 	mrs	r3, PRIMASK
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	643b      	str	r3, [r7, #64]	; 0x40
 800405c:	2301      	movs	r3, #1
 800405e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2140      	movs	r1, #64	; 0x40
 8004074:	438a      	bics	r2, r1
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	f383 8810 	msr	PRIMASK, r3
}
 8004082:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	2120      	movs	r1, #32
 800408a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004090:	2b01      	cmp	r3, #1
 8004092:	d118      	bne.n	80040c6 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004094:	f3ef 8310 	mrs	r3, PRIMASK
 8004098:	60fb      	str	r3, [r7, #12]
  return(result);
 800409a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409e:	2301      	movs	r3, #1
 80040a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2110      	movs	r1, #16
 80040b6:	438a      	bics	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f383 8810 	msr	PRIMASK, r3
}
 80040c4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c8:	2200      	movs	r2, #0
 80040ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d108      	bne.n	80040e6 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d6:	2258      	movs	r2, #88	; 0x58
 80040d8:	5a9a      	ldrh	r2, [r3, r2]
 80040da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040dc:	0011      	movs	r1, r2
 80040de:	0018      	movs	r0, r3
 80040e0:	f7fc fe6e 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040e4:	e003      	b.n	80040ee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff fb2b 	bl	8003744 <HAL_UART_RxCpltCallback>
}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b014      	add	sp, #80	; 0x50
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	fffffeff 	.word	0xfffffeff

080040fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10a      	bne.n	800412e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2258      	movs	r2, #88	; 0x58
 800411c:	5a9b      	ldrh	r3, [r3, r2]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f7fc fe4a 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800412c:	e003      	b.n	8004136 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	0018      	movs	r0, r3
 8004132:	f7ff fb0f 	bl	8003754 <HAL_UART_RxHalfCpltCallback>
}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	b004      	add	sp, #16
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004150:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2280      	movs	r2, #128	; 0x80
 8004156:	589b      	ldr	r3, [r3, r2]
 8004158:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2280      	movs	r2, #128	; 0x80
 8004162:	4013      	ands	r3, r2
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d10a      	bne.n	800417e <UART_DMAError+0x40>
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b21      	cmp	r3, #33	; 0x21
 800416c:	d107      	bne.n	800417e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2252      	movs	r2, #82	; 0x52
 8004172:	2100      	movs	r1, #0
 8004174:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	0018      	movs	r0, r3
 800417a:	f7ff fea1 	bl	8003ec0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2240      	movs	r2, #64	; 0x40
 8004186:	4013      	ands	r3, r2
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d10a      	bne.n	80041a2 <UART_DMAError+0x64>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	d107      	bne.n	80041a2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	225a      	movs	r2, #90	; 0x5a
 8004196:	2100      	movs	r1, #0
 8004198:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	0018      	movs	r0, r3
 800419e:	f7ff feb3 	bl	8003f08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2284      	movs	r2, #132	; 0x84
 80041a6:	589b      	ldr	r3, [r3, r2]
 80041a8:	2210      	movs	r2, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2184      	movs	r1, #132	; 0x84
 80041b0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7ff fad5 	bl	8003764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	46bd      	mov	sp, r7
 80041be:	b006      	add	sp, #24
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	225a      	movs	r2, #90	; 0x5a
 80041d4:	2100      	movs	r1, #0
 80041d6:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2252      	movs	r2, #82	; 0x52
 80041dc:	2100      	movs	r1, #0
 80041de:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7ff fabe 	bl	8003764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b004      	add	sp, #16
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f8:	f3ef 8310 	mrs	r3, PRIMASK
 80041fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80041fe:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	2301      	movs	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	438a      	bics	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f383 8810 	msr	PRIMASK, r3
}
 8004228:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f7ff fa7b 	bl	8003734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	46bd      	mov	sp, r7
 8004242:	b006      	add	sp, #24
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b002      	add	sp, #8
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004256:	b5b0      	push	{r4, r5, r7, lr}
 8004258:	b08a      	sub	sp, #40	; 0x28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	1dbb      	adds	r3, r7, #6
 8004262:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	589b      	ldr	r3, [r3, r2]
 800426a:	2b20      	cmp	r3, #32
 800426c:	d156      	bne.n	800431c <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004274:	1dbb      	adds	r3, r7, #6
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e04e      	b.n	800431e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	015b      	lsls	r3, r3, #5
 8004288:	429a      	cmp	r2, r3
 800428a:	d109      	bne.n	80042a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2201      	movs	r2, #1
 8004298:	4013      	ands	r3, r2
 800429a:	d001      	beq.n	80042a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e03e      	b.n	800431e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80042ac:	2527      	movs	r5, #39	; 0x27
 80042ae:	197c      	adds	r4, r7, r5
 80042b0:	1dbb      	adds	r3, r7, #6
 80042b2:	881a      	ldrh	r2, [r3, #0]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7ff fd61 	bl	8003d80 <UART_Start_Receive_DMA>
 80042be:	0003      	movs	r3, r0
 80042c0:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80042c2:	197b      	adds	r3, r7, r5
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d124      	bne.n	8004314 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d11c      	bne.n	800430c <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2210      	movs	r2, #16
 80042d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042da:	f3ef 8310 	mrs	r3, PRIMASK
 80042de:	617b      	str	r3, [r7, #20]
  return(result);
 80042e0:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	2301      	movs	r3, #1
 80042e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2110      	movs	r1, #16
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f383 8810 	msr	PRIMASK, r3
}
 800430a:	e003      	b.n	8004314 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800430c:	2327      	movs	r3, #39	; 0x27
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004314:	2327      	movs	r3, #39	; 0x27
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	e000      	b.n	800431e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	0018      	movs	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	b00a      	add	sp, #40	; 0x28
 8004324:	bdb0      	pop	{r4, r5, r7, pc}

08004326 <memset>:
 8004326:	0003      	movs	r3, r0
 8004328:	1882      	adds	r2, r0, r2
 800432a:	4293      	cmp	r3, r2
 800432c:	d100      	bne.n	8004330 <memset+0xa>
 800432e:	4770      	bx	lr
 8004330:	7019      	strb	r1, [r3, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	e7f9      	b.n	800432a <memset+0x4>
	...

08004338 <__libc_init_array>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	2600      	movs	r6, #0
 800433c:	4c0c      	ldr	r4, [pc, #48]	; (8004370 <__libc_init_array+0x38>)
 800433e:	4d0d      	ldr	r5, [pc, #52]	; (8004374 <__libc_init_array+0x3c>)
 8004340:	1b64      	subs	r4, r4, r5
 8004342:	10a4      	asrs	r4, r4, #2
 8004344:	42a6      	cmp	r6, r4
 8004346:	d109      	bne.n	800435c <__libc_init_array+0x24>
 8004348:	2600      	movs	r6, #0
 800434a:	f000 f823 	bl	8004394 <_init>
 800434e:	4c0a      	ldr	r4, [pc, #40]	; (8004378 <__libc_init_array+0x40>)
 8004350:	4d0a      	ldr	r5, [pc, #40]	; (800437c <__libc_init_array+0x44>)
 8004352:	1b64      	subs	r4, r4, r5
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	42a6      	cmp	r6, r4
 8004358:	d105      	bne.n	8004366 <__libc_init_array+0x2e>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	00b3      	lsls	r3, r6, #2
 800435e:	58eb      	ldr	r3, [r5, r3]
 8004360:	4798      	blx	r3
 8004362:	3601      	adds	r6, #1
 8004364:	e7ee      	b.n	8004344 <__libc_init_array+0xc>
 8004366:	00b3      	lsls	r3, r6, #2
 8004368:	58eb      	ldr	r3, [r5, r3]
 800436a:	4798      	blx	r3
 800436c:	3601      	adds	r6, #1
 800436e:	e7f2      	b.n	8004356 <__libc_init_array+0x1e>
 8004370:	080043e8 	.word	0x080043e8
 8004374:	080043e8 	.word	0x080043e8
 8004378:	080043ec 	.word	0x080043ec
 800437c:	080043e8 	.word	0x080043e8

08004380 <memcpy>:
 8004380:	2300      	movs	r3, #0
 8004382:	b510      	push	{r4, lr}
 8004384:	429a      	cmp	r2, r3
 8004386:	d100      	bne.n	800438a <memcpy+0xa>
 8004388:	bd10      	pop	{r4, pc}
 800438a:	5ccc      	ldrb	r4, [r1, r3]
 800438c:	54c4      	strb	r4, [r0, r3]
 800438e:	3301      	adds	r3, #1
 8004390:	e7f8      	b.n	8004384 <memcpy+0x4>
	...

08004394 <_init>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr

080043a0 <_fini>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr
