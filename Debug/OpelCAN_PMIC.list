
OpelCAN_PMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c84  08005c84  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005c84  08005c84  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c84  08005c84  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c84  08005c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  20000020  08005cac  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e8  08005cac  000209e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117a6  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c30  00000000  00000000  00031831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c23  00000000  00000000  00035400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f7f  00000000  00000000  00036023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e13  00000000  00000000  0004ffa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000942c1  00000000  00000000  00062db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003748  00000000  00000000  000f7078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fa7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c20 	.word	0x08005c20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08005c20 	.word	0x08005c20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t last_seen = 0;

bool _can_rx_is_aux_packet(uint8_t *data);
bool _can_rx_is_non_aux_packet(uint8_t *data);

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hCan) {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hCan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000228:	4b5d      	ldr	r3, [pc, #372]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800022a:	4a5e      	ldr	r2, [pc, #376]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	2100      	movs	r1, #0
 8000230:	f002 f91e 	bl	8002470 <HAL_CAN_GetRxMessage>
 8000234:	1e03      	subs	r3, r0, #0
 8000236:	d001      	beq.n	800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
		/* Reception Error */
		Error_Handler();
 8000238:	f001 fb1a 	bl	8001870 <Error_Handler>
	}

	if ((RxHeader.StdId == OPEL_POWER_ID) && (RxHeader.IDE == CAN_ID_STD)
 800023c:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a59      	ldr	r2, [pc, #356]	; (80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d113      	bne.n	800026e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
 8000246:	4b57      	ldr	r3, [pc, #348]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d10f      	bne.n	800026e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
			&& (RxHeader.DLC == 8)) {
 800024e:	4b55      	ldr	r3, [pc, #340]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	2b08      	cmp	r3, #8
 8000254:	d10b      	bne.n	800026e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		if (RxData[6] & 0x40) {
 8000256:	4b52      	ldr	r3, [pc, #328]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000258:	799b      	ldrb	r3, [r3, #6]
 800025a:	001a      	movs	r2, r3
 800025c:	2340      	movs	r3, #64	; 0x40
 800025e:	4013      	ands	r3, r2
 8000260:	d002      	beq.n	8000268 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			esp_start();
 8000262:	f000 feb7 	bl	8000fd4 <esp_start>
		} else {
			esp_kill();
		}

		return;
 8000266:	e098      	b.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
			esp_kill();
 8000268:	f000 feda 	bl	8001020 <esp_kill>
		return;
 800026c:	e095      	b.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
	}
	else if ((RxHeader.StdId == DISPLAY_CAN_ID) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8)) {
 800026e:	4b4d      	ldr	r3, [pc, #308]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a4e      	ldr	r2, [pc, #312]	; (80003ac <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d000      	beq.n	800027a <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8000278:	e06f      	b.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800027a:	4b4a      	ldr	r3, [pc, #296]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d000      	beq.n	8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
 8000282:	e06a      	b.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8000284:	4b47      	ldr	r3, [pc, #284]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	2b08      	cmp	r3, #8
 800028a:	d166      	bne.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
		if (RxData[0] == 0x10) {
 800028c:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b10      	cmp	r3, #16
 8000292:	d153      	bne.n	800033c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
			if (_can_rx_is_aux_packet(RxData)) {
 8000294:	4b42      	ldr	r3, [pc, #264]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000296:	0018      	movs	r0, r3
 8000298:	f000 f892 	bl	80003c0 <_can_rx_is_aux_packet>
 800029c:	1e03      	subs	r3, r0, #0
 800029e:	d00d      	beq.n	80002bc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
				can_tx_corrupt_ehu_packet();
 80002a0:	f000 fa2e 	bl	8000700 <can_tx_corrupt_ehu_packet>
				if (!esp_is_connected()) {
 80002a4:	f001 f836 	bl	8001314 <esp_is_connected>
 80002a8:	0003      	movs	r3, r0
 80002aa:	001a      	movs	r2, r3
 80002ac:	2301      	movs	r3, #1
 80002ae:	4053      	eors	r3, r2
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d00e      	beq.n	80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
					esp_reconnect();
 80002b6:	f001 f823 	bl	8001300 <esp_reconnect>
 80002ba:	e00b      	b.n	80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
				}
			}
			else if (_can_rx_is_non_aux_packet(RxData)) {
 80002bc:	4b38      	ldr	r3, [pc, #224]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 f8e7 	bl	8000492 <_can_rx_is_non_aux_packet>
 80002c4:	1e03      	subs	r3, r0, #0
 80002c6:	d005      	beq.n	80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
				if (esp_is_connected()) {
 80002c8:	f001 f824 	bl	8001314 <esp_is_connected>
 80002cc:	1e03      	subs	r3, r0, #0
 80002ce:	d001      	beq.n	80002d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
					esp_disconnect();
 80002d0:	f001 f80c 	bl	80012ec <esp_disconnect>
				}
			}

			uint16_t len = ((RxData[0] & 0x0F) << 8 | RxData[1]) + 1;
 80002d4:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	021b      	lsls	r3, r3, #8
 80002da:	b21a      	sxth	r2, r3
 80002dc:	23f0      	movs	r3, #240	; 0xf0
 80002de:	011b      	lsls	r3, r3, #4
 80002e0:	4013      	ands	r3, r2
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	4b2e      	ldr	r3, [pc, #184]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	b21b      	sxth	r3, r3
 80002ea:	4313      	orrs	r3, r2
 80002ec:	b21b      	sxth	r3, r3
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	240e      	movs	r4, #14
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	3201      	adds	r2, #1
 80002f6:	801a      	strh	r2, [r3, #0]
			display_packets = len / 7;
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	2107      	movs	r1, #7
 80002fe:	0018      	movs	r0, r3
 8000300:	f7ff ff02 	bl	8000108 <__udivsi3>
 8000304:	0003      	movs	r3, r0
 8000306:	b29b      	uxth	r3, r3
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4b29      	ldr	r3, [pc, #164]	; (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800030c:	701a      	strb	r2, [r3, #0]
			if (len % 7 > 0)
 800030e:	193b      	adds	r3, r7, r4
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	2107      	movs	r1, #7
 8000314:	0018      	movs	r0, r3
 8000316:	f7ff ff7d 	bl	8000214 <__aeabi_uidivmod>
 800031a:	000b      	movs	r3, r1
 800031c:	b29b      	uxth	r3, r3
 800031e:	2b00      	cmp	r3, #0
 8000320:	d005      	beq.n	800032e <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
				display_packets += 1;
 8000322:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	3301      	adds	r3, #1
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800032c:	701a      	strb	r2, [r3, #0]

			seen_packets = 1;
 800032e:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8000330:	2201      	movs	r2, #1
 8000332:	701a      	strb	r2, [r3, #0]

			last_seen = 0;
 8000334:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
		if (RxData[0] == 0x10) {
 800033a:	e02d      	b.n	8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
		}
		else {
			seen_packets++;
 800033c:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	b2da      	uxtb	r2, r3
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8000346:	701a      	strb	r2, [r3, #0]

			if (
#ifdef ONLY_AUX
					esp_is_connected() &&
#endif
					seen_packets == display_packets)
 8000348:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800034e:	781b      	ldrb	r3, [r3, #0]
			if (
 8000350:	429a      	cmp	r2, r3
 8000352:	d121      	bne.n	8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
				can_tx_send_music_metadata();
 8000354:	f000 fa88 	bl	8000868 <can_tx_send_music_metadata>
		if (RxData[0] == 0x10) {
 8000358:	e01e      	b.n	8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
		}
	}
	else if (RxHeader.StdId == STEERING_WHEEL && RxHeader.IDE == CAN_ID_STD && RxHeader.DLC == 3 && RxData[0] == 0x00) {
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a17      	ldr	r2, [pc, #92]	; (80003bc <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d11a      	bne.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d116      	bne.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	2b03      	cmp	r3, #3
 8000372:	d112      	bne.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10e      	bne.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
		if (RxData[1] == BTN_RIGHT_UP)
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800037e:	785b      	ldrb	r3, [r3, #1]
 8000380:	2b91      	cmp	r3, #145	; 0x91
 8000382:	d102      	bne.n	800038a <HAL_CAN_RxFifo0MsgPendingCallback+0x16a>
			esp_next_song();
 8000384:	f000 ff9e 	bl	80012c4 <esp_next_song>
 8000388:	e007      	b.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
		else if (RxData[1] == BTN_RIGHT_DOWN)
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800038c:	785b      	ldrb	r3, [r3, #1]
 800038e:	2b92      	cmp	r3, #146	; 0x92
 8000390:	d103      	bne.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
			esp_prev_song();
 8000392:	f000 ffa1 	bl	80012d8 <esp_prev_song>
 8000396:	e000      	b.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
		if (RxData[0] == 0x10) {
 8000398:	46c0      	nop			; (mov r8, r8)
	}
}
 800039a:	46bd      	mov	sp, r7
 800039c:	b005      	add	sp, #20
 800039e:	bd90      	pop	{r4, r7, pc}
 80003a0:	20000058 	.word	0x20000058
 80003a4:	2000003c 	.word	0x2000003c
 80003a8:	00000501 	.word	0x00000501
 80003ac:	000006c1 	.word	0x000006c1
 80003b0:	20000060 	.word	0x20000060
 80003b4:	20000061 	.word	0x20000061
 80003b8:	20000064 	.word	0x20000064
 80003bc:	00000206 	.word	0x00000206

080003c0 <_can_rx_is_aux_packet>:

uint32_t can_rx_last_seen() {
	return last_seen;
}

bool _can_rx_is_aux_packet(uint8_t *data) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	return
			(data[1] == 0x2E && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x01) ||
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3301      	adds	r3, #1
 80003cc:	781b      	ldrb	r3, [r3, #0]
			(data[1] == 0x36 && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x05) ||
			(data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x03) ||
 80003ce:	2b2e      	cmp	r3, #46	; 0x2e
 80003d0:	d113      	bne.n	80003fa <_can_rx_is_aux_packet+0x3a>
			(data[1] == 0x2E && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x01) ||
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3302      	adds	r3, #2
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2bc0      	cmp	r3, #192	; 0xc0
 80003da:	d10e      	bne.n	80003fa <_can_rx_is_aux_packet+0x3a>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3305      	adds	r3, #5
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b03      	cmp	r3, #3
 80003e4:	d109      	bne.n	80003fa <_can_rx_is_aux_packet+0x3a>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3306      	adds	r3, #6
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d104      	bne.n	80003fa <_can_rx_is_aux_packet+0x3a>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	3307      	adds	r3, #7
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d040      	beq.n	800047c <_can_rx_is_aux_packet+0xbc>
			(data[1] == 0x36 && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x05) ||
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3301      	adds	r3, #1
 80003fe:	781b      	ldrb	r3, [r3, #0]
			(data[1] == 0x2E && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x01) ||
 8000400:	2b36      	cmp	r3, #54	; 0x36
 8000402:	d113      	bne.n	800042c <_can_rx_is_aux_packet+0x6c>
			(data[1] == 0x36 && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x05) ||
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3302      	adds	r3, #2
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2bc0      	cmp	r3, #192	; 0xc0
 800040c:	d10e      	bne.n	800042c <_can_rx_is_aux_packet+0x6c>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3305      	adds	r3, #5
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d109      	bne.n	800042c <_can_rx_is_aux_packet+0x6c>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3306      	adds	r3, #6
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d104      	bne.n	800042c <_can_rx_is_aux_packet+0x6c>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3307      	adds	r3, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b05      	cmp	r3, #5
 800042a:	d027      	beq.n	800047c <_can_rx_is_aux_packet+0xbc>
			(data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x03) ||
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3302      	adds	r3, #2
 8000430:	781b      	ldrb	r3, [r3, #0]
			(data[1] == 0x36 && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x05) ||
 8000432:	2bc0      	cmp	r3, #192	; 0xc0
 8000434:	d10e      	bne.n	8000454 <_can_rx_is_aux_packet+0x94>
			(data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x03) ||
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3305      	adds	r3, #5
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d109      	bne.n	8000454 <_can_rx_is_aux_packet+0x94>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3306      	adds	r3, #6
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d104      	bne.n	8000454 <_can_rx_is_aux_packet+0x94>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3307      	adds	r3, #7
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d013      	beq.n	800047c <_can_rx_is_aux_packet+0xbc>
			(data[2] == 0x40 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x03);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3302      	adds	r3, #2
 8000458:	781b      	ldrb	r3, [r3, #0]
			(data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x03) ||
 800045a:	2b40      	cmp	r3, #64	; 0x40
 800045c:	d110      	bne.n	8000480 <_can_rx_is_aux_packet+0xc0>
			(data[2] == 0x40 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x03);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	3305      	adds	r3, #5
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b03      	cmp	r3, #3
 8000466:	d10b      	bne.n	8000480 <_can_rx_is_aux_packet+0xc0>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3306      	adds	r3, #6
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d106      	bne.n	8000480 <_can_rx_is_aux_packet+0xc0>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3307      	adds	r3, #7
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d101      	bne.n	8000480 <_can_rx_is_aux_packet+0xc0>
			(data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x03) ||
 800047c:	2301      	movs	r3, #1
 800047e:	e000      	b.n	8000482 <_can_rx_is_aux_packet+0xc2>
 8000480:	2300      	movs	r3, #0
 8000482:	1c1a      	adds	r2, r3, #0
 8000484:	2301      	movs	r3, #1
 8000486:	4013      	ands	r3, r2
 8000488:	b2db      	uxtb	r3, r3
}
 800048a:	0018      	movs	r0, r3
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}

08000492 <_can_rx_is_non_aux_packet>:

bool _can_rx_is_non_aux_packet(uint8_t *data) {
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
	return (data[1] != 0x2E && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x01) ||
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3301      	adds	r3, #1
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b2e      	cmp	r3, #46	; 0x2e
 80004a2:	d013      	beq.n	80004cc <_can_rx_is_non_aux_packet+0x3a>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3302      	adds	r3, #2
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2bc0      	cmp	r3, #192	; 0xc0
 80004ac:	d10e      	bne.n	80004cc <_can_rx_is_non_aux_packet+0x3a>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3305      	adds	r3, #5
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	d109      	bne.n	80004cc <_can_rx_is_non_aux_packet+0x3a>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3306      	adds	r3, #6
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d104      	bne.n	80004cc <_can_rx_is_non_aux_packet+0x3a>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3307      	adds	r3, #7
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d013      	beq.n	80004f4 <_can_rx_is_non_aux_packet+0x62>
		   (data[2] == 0x40 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x01);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3302      	adds	r3, #2
 80004d0:	781b      	ldrb	r3, [r3, #0]
	return (data[1] != 0x2E && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x01) ||
 80004d2:	2b40      	cmp	r3, #64	; 0x40
 80004d4:	d110      	bne.n	80004f8 <_can_rx_is_non_aux_packet+0x66>
		   (data[2] == 0x40 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x01);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3305      	adds	r3, #5
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d10b      	bne.n	80004f8 <_can_rx_is_non_aux_packet+0x66>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3306      	adds	r3, #6
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d106      	bne.n	80004f8 <_can_rx_is_non_aux_packet+0x66>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3307      	adds	r3, #7
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d101      	bne.n	80004f8 <_can_rx_is_non_aux_packet+0x66>
	return (data[1] != 0x2E && data[2] == 0xC0 && data[5] == 0x03 && data[6] == 0x01 && data[7] == 0x01) ||
 80004f4:	2301      	movs	r3, #1
 80004f6:	e000      	b.n	80004fa <_can_rx_is_non_aux_packet+0x68>
 80004f8:	2300      	movs	r3, #0
 80004fa:	1c1a      	adds	r2, r3, #0
 80004fc:	2301      	movs	r3, #1
 80004fe:	4013      	ands	r3, r2
 8000500:	b2db      	uxtb	r3, r3
}
 8000502:	0018      	movs	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <can_tx_set_hcan>:

void _can_tx_send_msg(CAN_Tx_Msg_t *message);
void _can_tx_send_and_dequeue();
void _can_tx_try_send_metadata();

void can_tx_set_hcan(CAN_HandleTypeDef *hcan) {
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	can_tx_hcan = *hcan;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <can_tx_set_hcan+0x3c>)
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	ca13      	ldmia	r2!, {r0, r1, r4}
 800051a:	c313      	stmia	r3!, {r0, r1, r4}
 800051c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800051e:	c313      	stmia	r3!, {r0, r1, r4}
 8000520:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000522:	c313      	stmia	r3!, {r0, r1, r4}
 8000524:	6812      	ldr	r2, [r2, #0]
 8000526:	601a      	str	r2, [r3, #0]

	TxHeader.ExtId = 0x01;
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <can_tx_set_hcan+0x40>)
 800052a:	2201      	movs	r2, #1
 800052c:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <can_tx_set_hcan+0x40>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <can_tx_set_hcan+0x40>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <can_tx_set_hcan+0x40>)
 800053c:	2200      	movs	r2, #0
 800053e:	751a      	strb	r2, [r3, #20]
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b003      	add	sp, #12
 8000546:	bd90      	pop	{r4, r7, pc}
 8000548:	20000068 	.word	0x20000068
 800054c:	20000090 	.word	0x20000090

08000550 <can_tx_set_title>:

void can_tx_set_title(uint8_t *buf, uint8_t len) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	000a      	movs	r2, r1
 800055a:	1cfb      	adds	r3, r7, #3
 800055c:	701a      	strb	r2, [r3, #0]
	memcpy(audio_title, buf, len);
 800055e:	1cfb      	adds	r3, r7, #3
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <can_tx_set_title+0x30>)
 8000566:	0018      	movs	r0, r3
 8000568:	f005 fb50 	bl	8005c0c <memcpy>
	audio_title_len = len;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <can_tx_set_title+0x34>)
 800056e:	1cfa      	adds	r2, r7, #3
 8000570:	7812      	ldrb	r2, [r2, #0]
 8000572:	701a      	strb	r2, [r3, #0]
	_can_tx_try_send_metadata();
 8000574:	f000 f840 	bl	80005f8 <_can_tx_try_send_metadata>
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200003bc 	.word	0x200003bc
 8000584:	2000043c 	.word	0x2000043c

08000588 <can_tx_set_artist>:

void can_tx_set_artist(uint8_t *buf, uint8_t len) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	000a      	movs	r2, r1
 8000592:	1cfb      	adds	r3, r7, #3
 8000594:	701a      	strb	r2, [r3, #0]
	memcpy(audio_artist, buf, len);
 8000596:	1cfb      	adds	r3, r7, #3
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <can_tx_set_artist+0x30>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f005 fb34 	bl	8005c0c <memcpy>
	audio_artist_len = len;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <can_tx_set_artist+0x34>)
 80005a6:	1cfa      	adds	r2, r7, #3
 80005a8:	7812      	ldrb	r2, [r2, #0]
 80005aa:	701a      	strb	r2, [r3, #0]
	_can_tx_try_send_metadata();
 80005ac:	f000 f824 	bl	80005f8 <_can_tx_try_send_metadata>
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b002      	add	sp, #8
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000440 	.word	0x20000440
 80005bc:	200004c0 	.word	0x200004c0

080005c0 <can_tx_set_album>:

void can_tx_set_album(uint8_t *buf, uint8_t len) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	000a      	movs	r2, r1
 80005ca:	1cfb      	adds	r3, r7, #3
 80005cc:	701a      	strb	r2, [r3, #0]
	memcpy(audio_album, buf, len);
 80005ce:	1cfb      	adds	r3, r7, #3
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <can_tx_set_album+0x30>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f005 fb18 	bl	8005c0c <memcpy>
	audio_album_len = len;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <can_tx_set_album+0x34>)
 80005de:	1cfa      	adds	r2, r7, #3
 80005e0:	7812      	ldrb	r2, [r2, #0]
 80005e2:	701a      	strb	r2, [r3, #0]
	_can_tx_try_send_metadata();
 80005e4:	f000 f808 	bl	80005f8 <_can_tx_try_send_metadata>
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200004c4 	.word	0x200004c4
 80005f4:	20000544 	.word	0x20000544

080005f8 <_can_tx_try_send_metadata>:

void _can_tx_try_send_metadata() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	if (ticks_since_last_corrupt < CAN_SEND_BEFORE) {
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <_can_tx_try_send_metadata+0x18>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	2b6f      	cmp	r3, #111	; 0x6f
 8000602:	d801      	bhi.n	8000608 <_can_tx_try_send_metadata+0x10>
		can_tx_send_music_metadata();
 8000604:	f000 f930 	bl	8000868 <can_tx_send_music_metadata>
	}
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	200003b8 	.word	0x200003b8

08000614 <can_tx_send_packet>:

void can_tx_send_packet(uint32_t id, uint8_t *data, uint8_t len) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b08b      	sub	sp, #44	; 0x2c
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	701a      	strb	r2, [r3, #0]
	if (can_tx_head == can_tx_tail && can_tx_cts) {
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <can_tx_send_packet+0xdc>)
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	4b33      	ldr	r3, [pc, #204]	; (80006f4 <can_tx_send_packet+0xe0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	d121      	bne.n	8000672 <can_tx_send_packet+0x5e>
 800062e:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <can_tx_send_packet+0xe4>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d01d      	beq.n	8000672 <can_tx_send_packet+0x5e>
		CAN_Tx_Msg_t msg = { .id = id, .len = len };
 8000636:	2414      	movs	r4, #20
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2310      	movs	r3, #16
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f005 fab6 	bl	8005bb2 <memset>
 8000646:	0020      	movs	r0, r4
 8000648:	183b      	adds	r3, r7, r0
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	183b      	adds	r3, r7, r0
 8000650:	1dfa      	adds	r2, r7, #7
 8000652:	7812      	ldrb	r2, [r2, #0]
 8000654:	731a      	strb	r2, [r3, #12]

		memcpy(msg.data, data, len);
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	0004      	movs	r4, r0
 800065e:	183b      	adds	r3, r7, r0
 8000660:	3304      	adds	r3, #4
 8000662:	0018      	movs	r0, r3
 8000664:	f005 fad2 	bl	8005c0c <memcpy>

		_can_tx_send_msg(&msg);
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f8b0 	bl	80007d0 <_can_tx_send_msg>
 8000670:	e03b      	b.n	80006ea <can_tx_send_packet+0xd6>
		return;
	}

	uint8_t next;

	next = can_tx_head + 1; // next is where head will point to after this write.
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <can_tx_send_packet+0xdc>)
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	2127      	movs	r1, #39	; 0x27
 8000678:	187b      	adds	r3, r7, r1
 800067a:	3201      	adds	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
	if (next >= CAN_MAILBOX_LENGTH)
 800067e:	187b      	adds	r3, r7, r1
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b2f      	cmp	r3, #47	; 0x2f
 8000684:	d902      	bls.n	800068c <can_tx_send_packet+0x78>
		next = 0;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]

	if (next == can_tx_tail) // if the head + 1 == tail, circular buffer is full
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <can_tx_send_packet+0xe0>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2427      	movs	r4, #39	; 0x27
 8000692:	193a      	adds	r2, r7, r4
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	429a      	cmp	r2, r3
 8000698:	d026      	beq.n	80006e8 <can_tx_send_packet+0xd4>
		return;

	can_tx_mailbox[can_tx_head].id = id;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <can_tx_send_packet+0xdc>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	001a      	movs	r2, r3
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <can_tx_send_packet+0xe8>)
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	68f9      	ldr	r1, [r7, #12]
 80006a6:	50d1      	str	r1, [r2, r3]
	can_tx_mailbox[can_tx_head].len = len;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <can_tx_send_packet+0xdc>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <can_tx_send_packet+0xe8>)
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	18d3      	adds	r3, r2, r3
 80006b2:	330c      	adds	r3, #12
 80006b4:	1dfa      	adds	r2, r7, #7
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	701a      	strb	r2, [r3, #0]
	memcpy(can_tx_mailbox[can_tx_head].data, data, len);
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <can_tx_send_packet+0xdc>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	011a      	lsls	r2, r3, #4
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <can_tx_send_packet+0xe8>)
 80006c2:	18d3      	adds	r3, r2, r3
 80006c4:	1d18      	adds	r0, r3, #4
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	0019      	movs	r1, r3
 80006ce:	f005 fa9d 	bl	8005c0c <memcpy>

	can_tx_head = next;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <can_tx_send_packet+0xdc>)
 80006d4:	193a      	adds	r2, r7, r4
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	701a      	strb	r2, [r3, #0]

	if (can_tx_cts) {
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <can_tx_send_packet+0xe4>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d003      	beq.n	80006ea <can_tx_send_packet+0xd6>
		_can_tx_send_and_dequeue();
 80006e2:	f000 f84b 	bl	800077c <_can_tx_send_and_dequeue>
 80006e6:	e000      	b.n	80006ea <can_tx_send_packet+0xd6>
		return;
 80006e8:	46c0      	nop			; (mov r8, r8)
	}
}
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b00b      	add	sp, #44	; 0x2c
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	200003b6 	.word	0x200003b6
 80006f4:	200003b7 	.word	0x200003b7
 80006f8:	20000000 	.word	0x20000000
 80006fc:	200000b4 	.word	0x200000b4

08000700 <can_tx_corrupt_ehu_packet>:

void can_tx_corrupt_ehu_packet() {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	ticks_since_last_corrupt = 0;
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <can_tx_corrupt_ehu_packet+0x18>)
 8000706:	2200      	movs	r2, #0
 8000708:	801a      	strh	r2, [r3, #0]
	corrupt_ehu = true;
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <can_tx_corrupt_ehu_packet+0x1c>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	200003b8 	.word	0x200003b8
 800071c:	200003b4 	.word	0x200003b4

08000720 <can_tx_send_next>:

void can_tx_send_next() {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	ticks_since_last_corrupt++;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <can_tx_send_next+0x48>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <can_tx_send_next+0x48>)
 8000730:	801a      	strh	r2, [r3, #0]
	if (corrupt_ehu) {
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <can_tx_send_next+0x4c>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00c      	beq.n	8000754 <can_tx_send_next+0x34>
		uint8_t data[8] = { 0x10,0x2E,0xC0,0x00,0x2B,0x03,0x01,0x01 };
 800073a:	003b      	movs	r3, r7
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <can_tx_send_next+0x50>)
 800073e:	ca03      	ldmia	r2!, {r0, r1}
 8000740:	c303      	stmia	r3!, {r0, r1}
		can_tx_send_packet(0x6C1, data, 8);
 8000742:	003b      	movs	r3, r7
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <can_tx_send_next+0x54>)
 8000746:	2208      	movs	r2, #8
 8000748:	0019      	movs	r1, r3
 800074a:	f7ff ff63 	bl	8000614 <can_tx_send_packet>
		corrupt_ehu = false;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <can_tx_send_next+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
	}
	if (can_tx_cts) {
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <can_tx_send_next+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <can_tx_send_next+0x40>
		_can_tx_send_and_dequeue();
 800075c:	f000 f80e 	bl	800077c <_can_tx_send_and_dequeue>
	}
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200003b8 	.word	0x200003b8
 800076c:	200003b4 	.word	0x200003b4
 8000770:	08005c38 	.word	0x08005c38
 8000774:	000006c1 	.word	0x000006c1
 8000778:	20000000 	.word	0x20000000

0800077c <_can_tx_send_and_dequeue>:

void _can_tx_send_and_dequeue() {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
	int next;

	if (can_tx_head == can_tx_tail) // if the head == tail, we don't have any data
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <_can_tx_send_and_dequeue+0x48>)
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <_can_tx_send_and_dequeue+0x4c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	429a      	cmp	r2, r3
 800078c:	d015      	beq.n	80007ba <_can_tx_send_and_dequeue+0x3e>
		return;

	next = can_tx_tail + 1; // next is where tail will point to after this read.
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <_can_tx_send_and_dequeue+0x4c>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
	if (next >= CAN_MAILBOX_LENGTH)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b2f      	cmp	r3, #47	; 0x2f
 800079a:	dd01      	ble.n	80007a0 <_can_tx_send_and_dequeue+0x24>
		next = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]

	_can_tx_send_msg(&can_tx_mailbox[can_tx_tail]);  // Read data and then move
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <_can_tx_send_and_dequeue+0x4c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	011a      	lsls	r2, r3, #4
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <_can_tx_send_and_dequeue+0x50>)
 80007a8:	18d3      	adds	r3, r2, r3
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 f810 	bl	80007d0 <_can_tx_send_msg>
	can_tx_tail = next;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <_can_tx_send_and_dequeue+0x4c>)
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e000      	b.n	80007bc <_can_tx_send_and_dequeue+0x40>
		return;
 80007ba:	46c0      	nop			; (mov r8, r8)
}
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	200003b6 	.word	0x200003b6
 80007c8:	200003b7 	.word	0x200003b7
 80007cc:	200000b4 	.word	0x200000b4

080007d0 <_can_tx_send_msg>:

void _can_tx_send_msg(CAN_Tx_Msg_t *message) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	can_tx_cts = false;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <_can_tx_send_msg+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
	TxHeader.StdId = message->id;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <_can_tx_send_msg+0x54>)
 80007e4:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = message->len;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7b1b      	ldrb	r3, [r3, #12]
 80007ea:	001a      	movs	r2, r3
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <_can_tx_send_msg+0x54>)
 80007ee:	611a      	str	r2, [r3, #16]

	memcpy(TxData, message->data, message->len);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	1d19      	adds	r1, r3, #4
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7b1b      	ldrb	r3, [r3, #12]
 80007f8:	001a      	movs	r2, r3
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <_can_tx_send_msg+0x58>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f005 fa05 	bl	8005c0c <memcpy>

	if (HAL_CAN_AddTxMessage(&can_tx_hcan, &TxHeader, TxData, &TxMailbox)
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <_can_tx_send_msg+0x5c>)
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <_can_tx_send_msg+0x58>)
 8000806:	4907      	ldr	r1, [pc, #28]	; (8000824 <_can_tx_send_msg+0x54>)
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <_can_tx_send_msg+0x60>)
 800080a:	f001 fd5f 	bl	80022cc <HAL_CAN_AddTxMessage>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <_can_tx_send_msg+0x46>
			!= HAL_OK) {
		Error_Handler();
 8000812:	f001 f82d 	bl	8001870 <Error_Handler>
	}
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000000 	.word	0x20000000
 8000824:	20000090 	.word	0x20000090
 8000828:	200000a8 	.word	0x200000a8
 800082c:	200000b0 	.word	0x200000b0
 8000830:	20000068 	.word	0x20000068

08000834 <_next_tp_id>:

uint8_t _next_tp_id(uint8_t lastId) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	701a      	strb	r2, [r3, #0]
	if (lastId == 0x10) {
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b10      	cmp	r3, #16
 8000846:	d101      	bne.n	800084c <_next_tp_id+0x18>
		return 0x21;
 8000848:	2321      	movs	r3, #33	; 0x21
 800084a:	e009      	b.n	8000860 <_next_tp_id+0x2c>
	}
	if (lastId == 0x2F) {
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b2f      	cmp	r3, #47	; 0x2f
 8000852:	d101      	bne.n	8000858 <_next_tp_id+0x24>
		return 0x20;
 8000854:	2320      	movs	r3, #32
 8000856:	e003      	b.n	8000860 <_next_tp_id+0x2c>
	}
	return lastId + 1;
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	b2db      	uxtb	r3, r3
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}

08000868 <can_tx_send_music_metadata>:

void can_tx_send_music_metadata() {
 8000868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086a:	b091      	sub	sp, #68	; 0x44
 800086c:	af00      	add	r7, sp, #0
	if (sending_metadata)
 800086e:	4bee      	ldr	r3, [pc, #952]	; (8000c28 <can_tx_send_music_metadata+0x3c0>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d000      	beq.n	800087a <can_tx_send_music_metadata+0x12>
 8000878:	e2e1      	b.n	8000e3e <can_tx_send_music_metadata+0x5d6>
		return;
	sending_metadata = true;
 800087a:	4beb      	ldr	r3, [pc, #940]	; (8000c28 <can_tx_send_music_metadata+0x3c0>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
	uint8_t space_data[2] = { 0x00, 0x20 };
 8000880:	2028      	movs	r0, #40	; 0x28
 8000882:	183b      	adds	r3, r7, r0
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0192      	lsls	r2, r2, #6
 8000888:	801a      	strh	r2, [r3, #0]
	uint8_t title_len = audio_title_len;
 800088a:	213f      	movs	r1, #63	; 0x3f
 800088c:	187b      	adds	r3, r7, r1
 800088e:	4ae7      	ldr	r2, [pc, #924]	; (8000c2c <can_tx_send_music_metadata+0x3c4>)
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	701a      	strb	r2, [r3, #0]
	uint8_t artist_len = audio_artist_len;
 8000894:	233e      	movs	r3, #62	; 0x3e
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	4ae5      	ldr	r2, [pc, #916]	; (8000c30 <can_tx_send_music_metadata+0x3c8>)
 800089a:	7812      	ldrb	r2, [r2, #0]
 800089c:	701a      	strb	r2, [r3, #0]
	uint8_t album_len = audio_album_len;
 800089e:	233d      	movs	r3, #61	; 0x3d
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	4ae4      	ldr	r2, [pc, #912]	; (8000c34 <can_tx_send_music_metadata+0x3cc>)
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	701a      	strb	r2, [r3, #0]
	uint8_t * title = audio_title;
 80008a8:	4be3      	ldr	r3, [pc, #908]	; (8000c38 <can_tx_send_music_metadata+0x3d0>)
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t * artist = audio_artist;
 80008ac:	4be3      	ldr	r3, [pc, #908]	; (8000c3c <can_tx_send_music_metadata+0x3d4>)
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t * album = audio_album;
 80008b0:	4be3      	ldr	r3, [pc, #908]	; (8000c40 <can_tx_send_music_metadata+0x3d8>)
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
	if (title_len == 0) {
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <can_tx_send_music_metadata+0x5e>
		title_len = 2;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2202      	movs	r2, #2
 80008c0:	701a      	strb	r2, [r3, #0]
		title = space_data;
 80008c2:	183b      	adds	r3, r7, r0
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if (title_len > 60) {
 80008c6:	223f      	movs	r2, #63	; 0x3f
 80008c8:	18bb      	adds	r3, r7, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b3c      	cmp	r3, #60	; 0x3c
 80008ce:	d902      	bls.n	80008d6 <can_tx_send_music_metadata+0x6e>
		title_len = 60;
 80008d0:	18bb      	adds	r3, r7, r2
 80008d2:	223c      	movs	r2, #60	; 0x3c
 80008d4:	701a      	strb	r2, [r3, #0]
	}

	if (artist_len == 0) {
 80008d6:	223e      	movs	r2, #62	; 0x3e
 80008d8:	18bb      	adds	r3, r7, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d105      	bne.n	80008ec <can_tx_send_music_metadata+0x84>
		artist_len = 2;
 80008e0:	18bb      	adds	r3, r7, r2
 80008e2:	2202      	movs	r2, #2
 80008e4:	701a      	strb	r2, [r3, #0]
		artist = space_data;
 80008e6:	2328      	movs	r3, #40	; 0x28
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (artist_len > 80) {
 80008ec:	223e      	movs	r2, #62	; 0x3e
 80008ee:	18bb      	adds	r3, r7, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b50      	cmp	r3, #80	; 0x50
 80008f4:	d902      	bls.n	80008fc <can_tx_send_music_metadata+0x94>
		artist_len = 80;
 80008f6:	18bb      	adds	r3, r7, r2
 80008f8:	2250      	movs	r2, #80	; 0x50
 80008fa:	701a      	strb	r2, [r3, #0]
	}

	if (album_len == 0) {
 80008fc:	223d      	movs	r2, #61	; 0x3d
 80008fe:	18bb      	adds	r3, r7, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <can_tx_send_music_metadata+0xaa>
		album_len = 2;
 8000906:	18bb      	adds	r3, r7, r2
 8000908:	2202      	movs	r2, #2
 800090a:	701a      	strb	r2, [r3, #0]
		album = space_data;
 800090c:	2328      	movs	r3, #40	; 0x28
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (album_len > 80) {
 8000912:	223d      	movs	r2, #61	; 0x3d
 8000914:	18bb      	adds	r3, r7, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b50      	cmp	r3, #80	; 0x50
 800091a:	d902      	bls.n	8000922 <can_tx_send_music_metadata+0xba>
		album_len = 80;
 800091c:	18bb      	adds	r3, r7, r2
 800091e:	2250      	movs	r2, #80	; 0x50
 8000920:	701a      	strb	r2, [r3, #0]
	}

	uint8_t tpSize = 30 + title_len + artist_len + album_len;
 8000922:	233f      	movs	r3, #63	; 0x3f
 8000924:	18fa      	adds	r2, r7, r3
 8000926:	213e      	movs	r1, #62	; 0x3e
 8000928:	187b      	adds	r3, r7, r1
 800092a:	7812      	ldrb	r2, [r2, #0]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	18d3      	adds	r3, r2, r3
 8000930:	b2da      	uxtb	r2, r3
 8000932:	213d      	movs	r1, #61	; 0x3d
 8000934:	187b      	adds	r3, r7, r1
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	b2da      	uxtb	r2, r3
 800093c:	242a      	movs	r4, #42	; 0x2a
 800093e:	193b      	adds	r3, r7, r4
 8000940:	321e      	adds	r2, #30
 8000942:	701a      	strb	r2, [r3, #0]

	uint8_t buffer[8] = { 0 };
 8000944:	2220      	movs	r2, #32
 8000946:	18bb      	adds	r3, r7, r2
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
	uint8_t msgIx = 0x10;
 8000950:	212f      	movs	r1, #47	; 0x2f
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2210      	movs	r2, #16
 8000956:	701a      	strb	r2, [r3, #0]
	uint8_t bfrIx = 0;
 8000958:	222e      	movs	r2, #46	; 0x2e
 800095a:	18bb      	adds	r3, r7, r2
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]

	uint8_t buf_1[8] =
 8000960:	2018      	movs	r0, #24
 8000962:	183b      	adds	r3, r7, r0
 8000964:	187a      	adds	r2, r7, r1
 8000966:	7812      	ldrb	r2, [r2, #0]
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	183b      	adds	r3, r7, r0
 800096c:	193a      	adds	r2, r7, r4
 800096e:	7812      	ldrb	r2, [r2, #0]
 8000970:	705a      	strb	r2, [r3, #1]
 8000972:	183b      	adds	r3, r7, r0
 8000974:	2240      	movs	r2, #64	; 0x40
 8000976:	709a      	strb	r2, [r3, #2]
 8000978:	183b      	adds	r3, r7, r0
 800097a:	2200      	movs	r2, #0
 800097c:	70da      	strb	r2, [r3, #3]
			{ msgIx, tpSize, 0x40, 0x00, tpSize - 3, 0x03, 0x01, 0x05 };
 800097e:	193b      	adds	r3, r7, r4
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	3b03      	subs	r3, #3
 8000984:	b2da      	uxtb	r2, r3
	uint8_t buf_1[8] =
 8000986:	0006      	movs	r6, r0
 8000988:	19bb      	adds	r3, r7, r6
 800098a:	711a      	strb	r2, [r3, #4]
 800098c:	19bb      	adds	r3, r7, r6
 800098e:	2203      	movs	r2, #3
 8000990:	715a      	strb	r2, [r3, #5]
 8000992:	19bb      	adds	r3, r7, r6
 8000994:	2201      	movs	r2, #1
 8000996:	719a      	strb	r2, [r3, #6]
 8000998:	19bb      	adds	r3, r7, r6
 800099a:	2205      	movs	r2, #5
 800099c:	71da      	strb	r2, [r3, #7]
	uint8_t buf_2[8] = { msgIx = _next_tp_id(msgIx), 0x00, 0x41, 0x00, 0x75,
 800099e:	187c      	adds	r4, r7, r1
 80009a0:	000d      	movs	r5, r1
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff ff44 	bl	8000834 <_next_tp_id>
 80009ac:	0003      	movs	r3, r0
 80009ae:	7023      	strb	r3, [r4, #0]
 80009b0:	2010      	movs	r0, #16
 80009b2:	183b      	adds	r3, r7, r0
 80009b4:	0029      	movs	r1, r5
 80009b6:	187a      	adds	r2, r7, r1
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	183b      	adds	r3, r7, r0
 80009be:	2200      	movs	r2, #0
 80009c0:	705a      	strb	r2, [r3, #1]
 80009c2:	183b      	adds	r3, r7, r0
 80009c4:	2241      	movs	r2, #65	; 0x41
 80009c6:	709a      	strb	r2, [r3, #2]
 80009c8:	183b      	adds	r3, r7, r0
 80009ca:	2200      	movs	r2, #0
 80009cc:	70da      	strb	r2, [r3, #3]
 80009ce:	183b      	adds	r3, r7, r0
 80009d0:	2275      	movs	r2, #117	; 0x75
 80009d2:	711a      	strb	r2, [r3, #4]
 80009d4:	183b      	adds	r3, r7, r0
 80009d6:	2200      	movs	r2, #0
 80009d8:	715a      	strb	r2, [r3, #5]
 80009da:	183b      	adds	r3, r7, r0
 80009dc:	2263      	movs	r2, #99	; 0x63
 80009de:	719a      	strb	r2, [r3, #6]
 80009e0:	183b      	adds	r3, r7, r0
 80009e2:	2200      	movs	r2, #0
 80009e4:	71da      	strb	r2, [r3, #7]
			0x00, 0x63, 0x00 };
	uint8_t buf_3[8] = { msgIx = _next_tp_id(msgIx), 0x69, 0x00, 0x6F, 0x02,
 80009e6:	187c      	adds	r4, r7, r1
 80009e8:	000d      	movs	r5, r1
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff ff20 	bl	8000834 <_next_tp_id>
 80009f4:	0003      	movs	r3, r0
 80009f6:	7023      	strb	r3, [r4, #0]
 80009f8:	2108      	movs	r1, #8
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	002c      	movs	r4, r5
 80009fe:	193a      	adds	r2, r7, r4
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2269      	movs	r2, #105	; 0x69
 8000a08:	705a      	strb	r2, [r3, #1]
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	709a      	strb	r2, [r3, #2]
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	226f      	movs	r2, #111	; 0x6f
 8000a14:	70da      	strb	r2, [r3, #3]
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2202      	movs	r2, #2
 8000a1a:	711a      	strb	r2, [r3, #4]
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	715a      	strb	r2, [r3, #5]
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	719a      	strb	r2, [r3, #6]
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2241      	movs	r2, #65	; 0x41
 8000a2c:	71da      	strb	r2, [r3, #7]
			0x03, 0x00, 0x41 };
	uint8_t buf_4[8] = { msgIx = _next_tp_id(msgIx), 0x00, 0x75, 0x00, 0x78,
 8000a2e:	0025      	movs	r5, r4
 8000a30:	197c      	adds	r4, r7, r5
 8000a32:	197b      	adds	r3, r7, r5
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fefc 	bl	8000834 <_next_tp_id>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
 8000a40:	003b      	movs	r3, r7
 8000a42:	002c      	movs	r4, r5
 8000a44:	193a      	adds	r2, r7, r4
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	705a      	strb	r2, [r3, #1]
 8000a50:	003b      	movs	r3, r7
 8000a52:	2275      	movs	r2, #117	; 0x75
 8000a54:	709a      	strb	r2, [r3, #2]
 8000a56:	003b      	movs	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	70da      	strb	r2, [r3, #3]
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	2278      	movs	r2, #120	; 0x78
 8000a60:	711a      	strb	r2, [r3, #4]
 8000a62:	003b      	movs	r3, r7
 8000a64:	2210      	movs	r2, #16
 8000a66:	715a      	strb	r2, [r3, #5]
 8000a68:	233f      	movs	r3, #63	; 0x3f
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	003b      	movs	r3, r7
 8000a74:	719a      	strb	r2, [r3, #6]
			0x10, title_len / 2, title[0] };
 8000a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a78:	781a      	ldrb	r2, [r3, #0]
	uint8_t buf_4[8] = { msgIx = _next_tp_id(msgIx), 0x00, 0x75, 0x00, 0x78,
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	71da      	strb	r2, [r3, #7]
	can_tx_send_packet(DISPLAY_CAN_ID, buf_1, 8);
 8000a7e:	19bb      	adds	r3, r7, r6
 8000a80:	4870      	ldr	r0, [pc, #448]	; (8000c44 <can_tx_send_music_metadata+0x3dc>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	0019      	movs	r1, r3
 8000a86:	f7ff fdc5 	bl	8000614 <can_tx_send_packet>
	can_tx_send_packet(DISPLAY_CAN_ID, buf_2, 8);
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	183b      	adds	r3, r7, r0
 8000a8e:	486d      	ldr	r0, [pc, #436]	; (8000c44 <can_tx_send_music_metadata+0x3dc>)
 8000a90:	2208      	movs	r2, #8
 8000a92:	0019      	movs	r1, r3
 8000a94:	f7ff fdbe 	bl	8000614 <can_tx_send_packet>
	can_tx_send_packet(DISPLAY_CAN_ID, buf_3, 8);
 8000a98:	2108      	movs	r1, #8
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	4869      	ldr	r0, [pc, #420]	; (8000c44 <can_tx_send_music_metadata+0x3dc>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	f7ff fdb7 	bl	8000614 <can_tx_send_packet>
	can_tx_send_packet(DISPLAY_CAN_ID, buf_4, 8);
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	4866      	ldr	r0, [pc, #408]	; (8000c44 <can_tx_send_music_metadata+0x3dc>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	0019      	movs	r1, r3
 8000aae:	f7ff fdb1 	bl	8000614 <can_tx_send_packet>
	buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000ab2:	0025      	movs	r5, r4
 8000ab4:	197c      	adds	r4, r7, r5
 8000ab6:	197b      	adds	r3, r7, r5
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff feba 	bl	8000834 <_next_tp_id>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	7023      	strb	r3, [r4, #0]
 8000ac4:	222e      	movs	r2, #46	; 0x2e
 8000ac6:	18bb      	adds	r3, r7, r2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	18ba      	adds	r2, r7, r2
 8000acc:	1c59      	adds	r1, r3, #1
 8000ace:	7011      	strb	r1, [r2, #0]
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	18bb      	adds	r3, r7, r2
 8000ad6:	197a      	adds	r2, r7, r5
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 1; i < title_len; i++) {
 8000adc:	232d      	movs	r3, #45	; 0x2d
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	e036      	b.n	8000b54 <can_tx_send_music_metadata+0x2ec>
		buffer[bfrIx++] = title[i];
 8000ae6:	232d      	movs	r3, #45	; 0x2d
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aee:	18d2      	adds	r2, r2, r3
 8000af0:	252e      	movs	r5, #46	; 0x2e
 8000af2:	197b      	adds	r3, r7, r5
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	1979      	adds	r1, r7, r5
 8000af8:	1c58      	adds	r0, r3, #1
 8000afa:	7008      	strb	r0, [r1, #0]
 8000afc:	0019      	movs	r1, r3
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	2620      	movs	r6, #32
 8000b02:	19bb      	adds	r3, r7, r6
 8000b04:	545a      	strb	r2, [r3, r1]
		if (bfrIx == 8) {
 8000b06:	197b      	adds	r3, r7, r5
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d11c      	bne.n	8000b48 <can_tx_send_music_metadata+0x2e0>
			can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000b0e:	19bb      	adds	r3, r7, r6
 8000b10:	484c      	ldr	r0, [pc, #304]	; (8000c44 <can_tx_send_music_metadata+0x3dc>)
 8000b12:	2208      	movs	r2, #8
 8000b14:	0019      	movs	r1, r3
 8000b16:	f7ff fd7d 	bl	8000614 <can_tx_send_packet>
			bfrIx = 0;
 8000b1a:	197b      	adds	r3, r7, r5
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
			buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000b20:	232f      	movs	r3, #47	; 0x2f
 8000b22:	18fc      	adds	r4, r7, r3
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fe83 	bl	8000834 <_next_tp_id>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	7023      	strb	r3, [r4, #0]
 8000b32:	197b      	adds	r3, r7, r5
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	197a      	adds	r2, r7, r5
 8000b38:	1c59      	adds	r1, r3, #1
 8000b3a:	7011      	strb	r1, [r2, #0]
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	19bb      	adds	r3, r7, r6
 8000b40:	222f      	movs	r2, #47	; 0x2f
 8000b42:	18ba      	adds	r2, r7, r2
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 1; i < title_len; i++) {
 8000b48:	212d      	movs	r1, #45	; 0x2d
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	3201      	adds	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	232d      	movs	r3, #45	; 0x2d
 8000b56:	18fa      	adds	r2, r7, r3
 8000b58:	233f      	movs	r3, #63	; 0x3f
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d3c0      	bcc.n	8000ae6 <can_tx_send_music_metadata+0x27e>
		}
	}

	buffer[bfrIx++] = 0x11;
 8000b64:	252e      	movs	r5, #46	; 0x2e
 8000b66:	197b      	adds	r3, r7, r5
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	197a      	adds	r2, r7, r5
 8000b6c:	1c59      	adds	r1, r3, #1
 8000b6e:	7011      	strb	r1, [r2, #0]
 8000b70:	001a      	movs	r2, r3
 8000b72:	2620      	movs	r6, #32
 8000b74:	19bb      	adds	r3, r7, r6
 8000b76:	2111      	movs	r1, #17
 8000b78:	5499      	strb	r1, [r3, r2]
	if (bfrIx == 8) {
 8000b7a:	197b      	adds	r3, r7, r5
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d11c      	bne.n	8000bbc <can_tx_send_music_metadata+0x354>
		can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000b82:	19bb      	adds	r3, r7, r6
 8000b84:	482f      	ldr	r0, [pc, #188]	; (8000c44 <can_tx_send_music_metadata+0x3dc>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	0019      	movs	r1, r3
 8000b8a:	f7ff fd43 	bl	8000614 <can_tx_send_packet>
		bfrIx = 0;
 8000b8e:	197b      	adds	r3, r7, r5
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
		buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000b94:	232f      	movs	r3, #47	; 0x2f
 8000b96:	18fc      	adds	r4, r7, r3
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff fe49 	bl	8000834 <_next_tp_id>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	7023      	strb	r3, [r4, #0]
 8000ba6:	197b      	adds	r3, r7, r5
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	197a      	adds	r2, r7, r5
 8000bac:	1c59      	adds	r1, r3, #1
 8000bae:	7011      	strb	r1, [r2, #0]
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	19bb      	adds	r3, r7, r6
 8000bb4:	222f      	movs	r2, #47	; 0x2f
 8000bb6:	18ba      	adds	r2, r7, r2
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	545a      	strb	r2, [r3, r1]
	}

	buffer[bfrIx++] = artist_len / 2;
 8000bbc:	252e      	movs	r5, #46	; 0x2e
 8000bbe:	197b      	adds	r3, r7, r5
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	197a      	adds	r2, r7, r5
 8000bc4:	1c59      	adds	r1, r3, #1
 8000bc6:	7011      	strb	r1, [r2, #0]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	233e      	movs	r3, #62	; 0x3e
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	085b      	lsrs	r3, r3, #1
 8000bd2:	b2d9      	uxtb	r1, r3
 8000bd4:	2620      	movs	r6, #32
 8000bd6:	19bb      	adds	r3, r7, r6
 8000bd8:	5499      	strb	r1, [r3, r2]
	if (bfrIx == 8) {
 8000bda:	197b      	adds	r3, r7, r5
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d11c      	bne.n	8000c1c <can_tx_send_music_metadata+0x3b4>
		can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000be2:	19bb      	adds	r3, r7, r6
 8000be4:	4817      	ldr	r0, [pc, #92]	; (8000c44 <can_tx_send_music_metadata+0x3dc>)
 8000be6:	2208      	movs	r2, #8
 8000be8:	0019      	movs	r1, r3
 8000bea:	f7ff fd13 	bl	8000614 <can_tx_send_packet>
		bfrIx = 0;
 8000bee:	197b      	adds	r3, r7, r5
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
		buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000bf4:	232f      	movs	r3, #47	; 0x2f
 8000bf6:	18fc      	adds	r4, r7, r3
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fe19 	bl	8000834 <_next_tp_id>
 8000c02:	0003      	movs	r3, r0
 8000c04:	7023      	strb	r3, [r4, #0]
 8000c06:	197b      	adds	r3, r7, r5
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	197a      	adds	r2, r7, r5
 8000c0c:	1c59      	adds	r1, r3, #1
 8000c0e:	7011      	strb	r1, [r2, #0]
 8000c10:	0019      	movs	r1, r3
 8000c12:	19bb      	adds	r3, r7, r6
 8000c14:	222f      	movs	r2, #47	; 0x2f
 8000c16:	18ba      	adds	r2, r7, r2
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	545a      	strb	r2, [r3, r1]
	}

	for (uint8_t i = 0; i < artist_len; i++) {
 8000c1c:	232c      	movs	r3, #44	; 0x2c
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e047      	b.n	8000cb6 <can_tx_send_music_metadata+0x44e>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	200003b5 	.word	0x200003b5
 8000c2c:	2000043c 	.word	0x2000043c
 8000c30:	200004c0 	.word	0x200004c0
 8000c34:	20000544 	.word	0x20000544
 8000c38:	200003bc 	.word	0x200003bc
 8000c3c:	20000440 	.word	0x20000440
 8000c40:	200004c4 	.word	0x200004c4
 8000c44:	000006c1 	.word	0x000006c1
		buffer[bfrIx++] = artist[i];
 8000c48:	232c      	movs	r3, #44	; 0x2c
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c50:	18d2      	adds	r2, r2, r3
 8000c52:	252e      	movs	r5, #46	; 0x2e
 8000c54:	197b      	adds	r3, r7, r5
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	1979      	adds	r1, r7, r5
 8000c5a:	1c58      	adds	r0, r3, #1
 8000c5c:	7008      	strb	r0, [r1, #0]
 8000c5e:	0019      	movs	r1, r3
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	2620      	movs	r6, #32
 8000c64:	19bb      	adds	r3, r7, r6
 8000c66:	545a      	strb	r2, [r3, r1]
		if (bfrIx == 8) {
 8000c68:	197b      	adds	r3, r7, r5
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d11c      	bne.n	8000caa <can_tx_send_music_metadata+0x442>
			can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000c70:	19bb      	adds	r3, r7, r6
 8000c72:	4875      	ldr	r0, [pc, #468]	; (8000e48 <can_tx_send_music_metadata+0x5e0>)
 8000c74:	2208      	movs	r2, #8
 8000c76:	0019      	movs	r1, r3
 8000c78:	f7ff fccc 	bl	8000614 <can_tx_send_packet>
			bfrIx = 0;
 8000c7c:	197b      	adds	r3, r7, r5
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
			buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000c82:	232f      	movs	r3, #47	; 0x2f
 8000c84:	18fc      	adds	r4, r7, r3
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fdd2 	bl	8000834 <_next_tp_id>
 8000c90:	0003      	movs	r3, r0
 8000c92:	7023      	strb	r3, [r4, #0]
 8000c94:	197b      	adds	r3, r7, r5
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	197a      	adds	r2, r7, r5
 8000c9a:	1c59      	adds	r1, r3, #1
 8000c9c:	7011      	strb	r1, [r2, #0]
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	19bb      	adds	r3, r7, r6
 8000ca2:	222f      	movs	r2, #47	; 0x2f
 8000ca4:	18ba      	adds	r2, r7, r2
 8000ca6:	7812      	ldrb	r2, [r2, #0]
 8000ca8:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 0; i < artist_len; i++) {
 8000caa:	212c      	movs	r1, #44	; 0x2c
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	3201      	adds	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	232c      	movs	r3, #44	; 0x2c
 8000cb8:	18fa      	adds	r2, r7, r3
 8000cba:	233e      	movs	r3, #62	; 0x3e
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	7812      	ldrb	r2, [r2, #0]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d3c0      	bcc.n	8000c48 <can_tx_send_music_metadata+0x3e0>
		}
	}

	buffer[bfrIx++] = 0x12;
 8000cc6:	252e      	movs	r5, #46	; 0x2e
 8000cc8:	197b      	adds	r3, r7, r5
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	197a      	adds	r2, r7, r5
 8000cce:	1c59      	adds	r1, r3, #1
 8000cd0:	7011      	strb	r1, [r2, #0]
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	2620      	movs	r6, #32
 8000cd6:	19bb      	adds	r3, r7, r6
 8000cd8:	2112      	movs	r1, #18
 8000cda:	5499      	strb	r1, [r3, r2]
	if (bfrIx == 8) {
 8000cdc:	197b      	adds	r3, r7, r5
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d11c      	bne.n	8000d1e <can_tx_send_music_metadata+0x4b6>
		can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000ce4:	19bb      	adds	r3, r7, r6
 8000ce6:	4858      	ldr	r0, [pc, #352]	; (8000e48 <can_tx_send_music_metadata+0x5e0>)
 8000ce8:	2208      	movs	r2, #8
 8000cea:	0019      	movs	r1, r3
 8000cec:	f7ff fc92 	bl	8000614 <can_tx_send_packet>
		bfrIx = 0;
 8000cf0:	197b      	adds	r3, r7, r5
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
		buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000cf6:	232f      	movs	r3, #47	; 0x2f
 8000cf8:	18fc      	adds	r4, r7, r3
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fd98 	bl	8000834 <_next_tp_id>
 8000d04:	0003      	movs	r3, r0
 8000d06:	7023      	strb	r3, [r4, #0]
 8000d08:	197b      	adds	r3, r7, r5
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	197a      	adds	r2, r7, r5
 8000d0e:	1c59      	adds	r1, r3, #1
 8000d10:	7011      	strb	r1, [r2, #0]
 8000d12:	0019      	movs	r1, r3
 8000d14:	19bb      	adds	r3, r7, r6
 8000d16:	222f      	movs	r2, #47	; 0x2f
 8000d18:	18ba      	adds	r2, r7, r2
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	545a      	strb	r2, [r3, r1]
	}

	buffer[bfrIx++] = album_len / 2;
 8000d1e:	252e      	movs	r5, #46	; 0x2e
 8000d20:	197b      	adds	r3, r7, r5
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	197a      	adds	r2, r7, r5
 8000d26:	1c59      	adds	r1, r3, #1
 8000d28:	7011      	strb	r1, [r2, #0]
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	233d      	movs	r3, #61	; 0x3d
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	085b      	lsrs	r3, r3, #1
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	2620      	movs	r6, #32
 8000d38:	19bb      	adds	r3, r7, r6
 8000d3a:	5499      	strb	r1, [r3, r2]
	if (bfrIx == 8) {
 8000d3c:	197b      	adds	r3, r7, r5
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b08      	cmp	r3, #8
 8000d42:	d11c      	bne.n	8000d7e <can_tx_send_music_metadata+0x516>
		can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000d44:	19bb      	adds	r3, r7, r6
 8000d46:	4840      	ldr	r0, [pc, #256]	; (8000e48 <can_tx_send_music_metadata+0x5e0>)
 8000d48:	2208      	movs	r2, #8
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	f7ff fc62 	bl	8000614 <can_tx_send_packet>
		bfrIx = 0;
 8000d50:	197b      	adds	r3, r7, r5
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
		buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000d56:	232f      	movs	r3, #47	; 0x2f
 8000d58:	18fc      	adds	r4, r7, r3
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fd68 	bl	8000834 <_next_tp_id>
 8000d64:	0003      	movs	r3, r0
 8000d66:	7023      	strb	r3, [r4, #0]
 8000d68:	197b      	adds	r3, r7, r5
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	197a      	adds	r2, r7, r5
 8000d6e:	1c59      	adds	r1, r3, #1
 8000d70:	7011      	strb	r1, [r2, #0]
 8000d72:	0019      	movs	r1, r3
 8000d74:	19bb      	adds	r3, r7, r6
 8000d76:	222f      	movs	r2, #47	; 0x2f
 8000d78:	18ba      	adds	r2, r7, r2
 8000d7a:	7812      	ldrb	r2, [r2, #0]
 8000d7c:	545a      	strb	r2, [r3, r1]
	}

	for (uint8_t i = 0; i < album_len; i++) {
 8000d7e:	232b      	movs	r3, #43	; 0x2b
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e036      	b.n	8000df6 <can_tx_send_music_metadata+0x58e>
		buffer[bfrIx++] = album[i];
 8000d88:	232b      	movs	r3, #43	; 0x2b
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d90:	18d2      	adds	r2, r2, r3
 8000d92:	252e      	movs	r5, #46	; 0x2e
 8000d94:	197b      	adds	r3, r7, r5
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	1979      	adds	r1, r7, r5
 8000d9a:	1c58      	adds	r0, r3, #1
 8000d9c:	7008      	strb	r0, [r1, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	2620      	movs	r6, #32
 8000da4:	19bb      	adds	r3, r7, r6
 8000da6:	545a      	strb	r2, [r3, r1]
		if (bfrIx == 8) {
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d11c      	bne.n	8000dea <can_tx_send_music_metadata+0x582>
			can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000db0:	19bb      	adds	r3, r7, r6
 8000db2:	4825      	ldr	r0, [pc, #148]	; (8000e48 <can_tx_send_music_metadata+0x5e0>)
 8000db4:	2208      	movs	r2, #8
 8000db6:	0019      	movs	r1, r3
 8000db8:	f7ff fc2c 	bl	8000614 <can_tx_send_packet>
			bfrIx = 0;
 8000dbc:	197b      	adds	r3, r7, r5
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
			buffer[bfrIx++] = msgIx = _next_tp_id(msgIx);
 8000dc2:	232f      	movs	r3, #47	; 0x2f
 8000dc4:	18fc      	adds	r4, r7, r3
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fd32 	bl	8000834 <_next_tp_id>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	7023      	strb	r3, [r4, #0]
 8000dd4:	197b      	adds	r3, r7, r5
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	197a      	adds	r2, r7, r5
 8000dda:	1c59      	adds	r1, r3, #1
 8000ddc:	7011      	strb	r1, [r2, #0]
 8000dde:	0019      	movs	r1, r3
 8000de0:	19bb      	adds	r3, r7, r6
 8000de2:	222f      	movs	r2, #47	; 0x2f
 8000de4:	18ba      	adds	r2, r7, r2
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 0; i < album_len; i++) {
 8000dea:	212b      	movs	r1, #43	; 0x2b
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	3201      	adds	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	232b      	movs	r3, #43	; 0x2b
 8000df8:	18fa      	adds	r2, r7, r3
 8000dfa:	233d      	movs	r3, #61	; 0x3d
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d3c0      	bcc.n	8000d88 <can_tx_send_music_metadata+0x520>
		}
	}

	while (bfrIx < 8) {
 8000e06:	e00a      	b.n	8000e1e <can_tx_send_music_metadata+0x5b6>
		buffer[bfrIx++] = 0x00;
 8000e08:	222e      	movs	r2, #46	; 0x2e
 8000e0a:	18bb      	adds	r3, r7, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	18ba      	adds	r2, r7, r2
 8000e10:	1c59      	adds	r1, r3, #1
 8000e12:	7011      	strb	r1, [r2, #0]
 8000e14:	001a      	movs	r2, r3
 8000e16:	2320      	movs	r3, #32
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	5499      	strb	r1, [r3, r2]
	while (bfrIx < 8) {
 8000e1e:	232e      	movs	r3, #46	; 0x2e
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b07      	cmp	r3, #7
 8000e26:	d9ef      	bls.n	8000e08 <can_tx_send_music_metadata+0x5a0>
	}

	can_tx_send_packet(DISPLAY_CAN_ID, buffer, 8);
 8000e28:	2320      	movs	r3, #32
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <can_tx_send_music_metadata+0x5e0>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	0019      	movs	r1, r3
 8000e32:	f7ff fbef 	bl	8000614 <can_tx_send_packet>
	sending_metadata = false;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <can_tx_send_music_metadata+0x5e4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e000      	b.n	8000e40 <can_tx_send_music_metadata+0x5d8>
		return;
 8000e3e:	46c0      	nop			; (mov r8, r8)
}
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b011      	add	sp, #68	; 0x44
 8000e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	000006c1 	.word	0x000006c1
 8000e4c:	200003b5 	.word	0x200003b5

08000e50 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	can_tx_cts = true;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	20000000 	.word	0x20000000

08000e6c <circ_buf_push_bytes>:
	c->buffer[c->head] = data;  // Load data and then move
	c->head = next;             // head to next data offset.
	return 0;  // return success to indicate successful push.
}

int circ_buf_push_bytes(circ_buf_t *c, uint8_t *data, int size) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	if (size > c->maxlen) {
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dd02      	ble.n	8000e88 <circ_buf_push_bytes+0x1c>
		return -1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	425b      	negs	r3, r3
 8000e86:	e06c      	b.n	8000f62 <circ_buf_push_bytes+0xf6>
	}

	int sizeToWrite = size;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24

	int maxSize = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
	if (c->tail > c-> head) {
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dd07      	ble.n	8000eac <circ_buf_push_bytes+0x40>
		maxSize = c->tail - c->head - 1;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	e009      	b.n	8000ec0 <circ_buf_push_bytes+0x54>
	}
	else {
		maxSize = c->maxlen - c->head + c->tail - 1;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	1ad2      	subs	r2, r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	18d3      	adds	r3, r2, r3
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
	}

	if (maxSize < sizeToWrite)
 8000ec0:	6a3a      	ldr	r2, [r7, #32]
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	da01      	bge.n	8000ecc <circ_buf_push_bytes+0x60>
		sizeToWrite = maxSize;
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24

	int firstBatch = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
	int secondBatch = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]

	if (c->head + sizeToWrite > c->maxlen) {
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	18d2      	adds	r2, r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dd0a      	ble.n	8000efa <circ_buf_push_bytes+0x8e>
		firstBatch = c->maxlen - c->head;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	61fb      	str	r3, [r7, #28]
		secondBatch = sizeToWrite - firstBatch;
 8000ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	e001      	b.n	8000efe <circ_buf_push_bytes+0x92>
	} else {
		firstBatch = sizeToWrite;
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	61fb      	str	r3, [r7, #28]
	}

	int data_ix = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
	memcpy(c->buffer + c->head, data, firstBatch);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	18d3      	adds	r3, r2, r3
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f004 fe7b 	bl	8005c0c <memcpy>
	c->head += firstBatch;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	18d2      	adds	r2, r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	605a      	str	r2, [r3, #4]
	data_ix += firstBatch;
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	18d3      	adds	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]

	if (c->head >= c->maxlen)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	db02      	blt.n	8000f3c <circ_buf_push_bytes+0xd0>
		c->head = 0;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]

	if (secondBatch > 0) {
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dd0e      	ble.n	8000f60 <circ_buf_push_bytes+0xf4>
		memcpy(c->buffer, data + data_ix, secondBatch);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	18d3      	adds	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	0019      	movs	r1, r3
 8000f50:	f004 fe5c 	bl	8005c0c <memcpy>
		c->head += secondBatch;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	18d2      	adds	r2, r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	605a      	str	r2, [r3, #4]
	}

	return sizeToWrite;
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b00a      	add	sp, #40	; 0x28
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <circ_buf_pop>:

int circ_buf_pop(circ_buf_t *c) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	int next;

	if (c->head == c->tail)  // if the head == tail, we don't have any data
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d102      	bne.n	8000f84 <circ_buf_pop+0x1a>
		return -1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	425b      	negs	r3, r3
 8000f82:	e018      	b.n	8000fb6 <circ_buf_pop+0x4c>

	next = c->tail + 1;  // next is where tail will point to after this read.
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
	if (next >= c->maxlen)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	db01      	blt.n	8000f9a <circ_buf_pop+0x30>
		next = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]

	uint8_t val = c->buffer[c->tail];  // Read data and then move
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	18d2      	adds	r2, r2, r3
 8000fa4:	210b      	movs	r1, #11
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	701a      	strb	r2, [r3, #0]
	c->tail = next;              // tail to next offset.
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	609a      	str	r2, [r3, #8]
	return val;  // return success to indicate successful push.
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b004      	add	sp, #16
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <esp_reset>:
volatile bool push_metadata = false;

void _esp_parse_command();
void _esp_process_uart_byte(uint8_t data);

void esp_reset() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	mode = UART_MODE_RESET;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <esp_reset+0x10>)
 8000fc6:	22fe      	movs	r2, #254	; 0xfe
 8000fc8:	701a      	strb	r2, [r3, #0]
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000001 	.word	0x20000001

08000fd4 <esp_start>:

bool started = false;
bool shutdown_requested = false;
uint8_t shutdown_ticks = 0;

void esp_start() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	if (!started) {
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <esp_start+0x44>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4053      	eors	r3, r2
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d015      	beq.n	8001012 <esp_start+0x3e>
		HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	0219      	lsls	r1, r3, #8
 8000fea:	2390      	movs	r3, #144	; 0x90
 8000fec:	05db      	lsls	r3, r3, #23
 8000fee:	2201      	movs	r2, #1
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f002 f9fb 	bl	80033ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_RESET);
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	0059      	lsls	r1, r3, #1
 8000ffa:	2390      	movs	r3, #144	; 0x90
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	2200      	movs	r2, #0
 8001000:	0018      	movs	r0, r3
 8001002:	f002 f9f3 	bl	80033ec <HAL_GPIO_WritePin>
		connected = true;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <esp_start+0x48>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
		started = true;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <esp_start+0x44>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
	}
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200005d7 	.word	0x200005d7
 800101c:	200005d5 	.word	0x200005d5

08001020 <esp_kill>:

void esp_kill() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	if (started) {
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <esp_kill+0x28>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00a      	beq.n	8001042 <esp_kill+0x22>
		shutdown_ticks = 0;
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <esp_kill+0x2c>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
		shutdown_requested = true;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <esp_kill+0x30>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
		started = false;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <esp_kill+0x28>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
		esp_reset();
 800103e:	f7ff ffbf 	bl	8000fc0 <esp_reset>
	}
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200005d7 	.word	0x200005d7
 800104c:	200005d9 	.word	0x200005d9
 8001050:	200005d8 	.word	0x200005d8

08001054 <esp_tick>:

void esp_tick() {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	if (shutdown_requested) {
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <esp_tick+0x6c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d02a      	beq.n	80010b8 <esp_tick+0x64>
		if (shutdown_ticks == 0) {
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <esp_tick+0x70>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d108      	bne.n	800107c <esp_tick+0x28>
			uint8_t data[1] = { CMD_SHUTDOWN };
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <esp_tick+0x74>)
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	701a      	strb	r2, [r3, #0]
			uart_send_data(data, 1);
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2101      	movs	r1, #1
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fde8 	bl	8001c4c <uart_send_data>
		}
		if (shutdown_ticks >= 4) {
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <esp_tick+0x70>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b03      	cmp	r3, #3
 8001082:	d913      	bls.n	80010ac <esp_tick+0x58>
			HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	0059      	lsls	r1, r3, #1
 8001088:	2390      	movs	r3, #144	; 0x90
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	2201      	movs	r2, #1
 800108e:	0018      	movs	r0, r3
 8001090:	f002 f9ac 	bl	80033ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	0219      	lsls	r1, r3, #8
 8001098:	2390      	movs	r3, #144	; 0x90
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	2200      	movs	r2, #0
 800109e:	0018      	movs	r0, r3
 80010a0:	f002 f9a4 	bl	80033ec <HAL_GPIO_WritePin>
			shutdown_requested = false;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <esp_tick+0x6c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
		else
		{
			shutdown_ticks++;
		}
	}
}
 80010aa:	e005      	b.n	80010b8 <esp_tick+0x64>
			shutdown_ticks++;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <esp_tick+0x70>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <esp_tick+0x70>)
 80010b6:	701a      	strb	r2, [r3, #0]
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200005d8 	.word	0x200005d8
 80010c4:	200005d9 	.word	0x200005d9
 80010c8:	08005c40 	.word	0x08005c40

080010cc <esp_receive_uart>:

void esp_receive_uart() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
	if (!started) {
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <esp_receive_uart+0x54>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4053      	eors	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d11b      	bne.n	8001118 <esp_receive_uart+0x4c>
		return;
	}

	int available = uart_data_available();
 80010e0:	f000 fd8c 	bl	8001bfc <uart_data_available>
 80010e4:	0003      	movs	r3, r0
 80010e6:	60bb      	str	r3, [r7, #8]
	if (available) {
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d015      	beq.n	800111a <esp_receive_uart+0x4e>
		for (int i = 0; i < available; i++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	e00c      	b.n	800110e <esp_receive_uart+0x42>
			uint8_t value = uart_get_byte() & 0xFF;
 80010f4:	f000 fd9e 	bl	8001c34 <uart_get_byte>
 80010f8:	0002      	movs	r2, r0
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	701a      	strb	r2, [r3, #0]
			_esp_process_uart_byte(value);
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	0018      	movs	r0, r3
 8001104:	f000 f80e 	bl	8001124 <_esp_process_uart_byte>
		for (int i = 0; i < available; i++) {
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	429a      	cmp	r2, r3
 8001114:	dbee      	blt.n	80010f4 <esp_receive_uart+0x28>
 8001116:	e000      	b.n	800111a <esp_receive_uart+0x4e>
		return;
 8001118:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 800111a:	46bd      	mov	sp, r7
 800111c:	b004      	add	sp, #16
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200005d7 	.word	0x200005d7

08001124 <_esp_process_uart_byte>:

void _esp_process_uart_byte(uint8_t value) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	701a      	strb	r2, [r3, #0]
	if (mode == UART_MODE_RESET) {
 8001130:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <_esp_process_uart_byte+0x180>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2bfe      	cmp	r3, #254	; 0xfe
 8001136:	d151      	bne.n	80011dc <_esp_process_uart_byte+0xb8>
		if (reset_ix == 0) {
 8001138:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <_esp_process_uart_byte+0x184>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10a      	bne.n	8001156 <_esp_process_uart_byte+0x32>
			if (value == 0xAA)
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2baa      	cmp	r3, #170	; 0xaa
 8001146:	d13e      	bne.n	80011c6 <_esp_process_uart_byte+0xa2>
				reset_ix++;
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <_esp_process_uart_byte+0x184>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b55      	ldr	r3, [pc, #340]	; (80012a8 <_esp_process_uart_byte+0x184>)
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e037      	b.n	80011c6 <_esp_process_uart_byte+0xa2>
		} else if (reset_ix == 1) {
 8001156:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <_esp_process_uart_byte+0x184>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10e      	bne.n	800117c <_esp_process_uart_byte+0x58>
			if (value == 0xFF)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2bff      	cmp	r3, #255	; 0xff
 8001164:	d106      	bne.n	8001174 <_esp_process_uart_byte+0x50>
				reset_ix++;
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <_esp_process_uart_byte+0x184>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b4e      	ldr	r3, [pc, #312]	; (80012a8 <_esp_process_uart_byte+0x184>)
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e028      	b.n	80011c6 <_esp_process_uart_byte+0xa2>
			else
				reset_ix = 0;
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <_esp_process_uart_byte+0x184>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e024      	b.n	80011c6 <_esp_process_uart_byte+0xa2>
		} else if (reset_ix == 2) {
 800117c:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <_esp_process_uart_byte+0x184>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d10e      	bne.n	80011a2 <_esp_process_uart_byte+0x7e>
			if (value == 0x55)
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b55      	cmp	r3, #85	; 0x55
 800118a:	d106      	bne.n	800119a <_esp_process_uart_byte+0x76>
				reset_ix++;
 800118c:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <_esp_process_uart_byte+0x184>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <_esp_process_uart_byte+0x184>)
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e015      	b.n	80011c6 <_esp_process_uart_byte+0xa2>
			else
				reset_ix = 0;
 800119a:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <_esp_process_uart_byte+0x184>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e011      	b.n	80011c6 <_esp_process_uart_byte+0xa2>
		} else if (reset_ix == 3) {
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <_esp_process_uart_byte+0x184>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d10d      	bne.n	80011c6 <_esp_process_uart_byte+0xa2>
			if (value == 0x00)
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d106      	bne.n	80011c0 <_esp_process_uart_byte+0x9c>
				reset_ix++;
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <_esp_process_uart_byte+0x184>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <_esp_process_uart_byte+0x184>)
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e002      	b.n	80011c6 <_esp_process_uart_byte+0xa2>
			else
				reset_ix = 0;
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <_esp_process_uart_byte+0x184>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
		}

		if (reset_ix == 4) {
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <_esp_process_uart_byte+0x184>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d166      	bne.n	800129c <_esp_process_uart_byte+0x178>
			mode = UART_MODE_WAIT;
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <_esp_process_uart_byte+0x180>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
			command = UART_MODE_WAIT;
 80011d4:	4b35      	ldr	r3, [pc, #212]	; (80012ac <_esp_process_uart_byte+0x188>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
			if (text_ix >= size) {
				_esp_parse_command();
			}
		}
	}
}
 80011da:	e05f      	b.n	800129c <_esp_process_uart_byte+0x178>
	} else if (command == 0x00) {
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <_esp_process_uart_byte+0x188>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d116      	bne.n	8001212 <_esp_process_uart_byte+0xee>
		command = value;
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <_esp_process_uart_byte+0x188>)
 80011e6:	1dfa      	adds	r2, r7, #7
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	701a      	strb	r2, [r3, #0]
		if (command > 0x80 && command < 0x90) {
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <_esp_process_uart_byte+0x188>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b80      	cmp	r3, #128	; 0x80
 80011f2:	d90a      	bls.n	800120a <_esp_process_uart_byte+0xe6>
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <_esp_process_uart_byte+0x188>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b8f      	cmp	r3, #143	; 0x8f
 80011fa:	d806      	bhi.n	800120a <_esp_process_uart_byte+0xe6>
			mode = UART_MODE_READ_SIZE;
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <_esp_process_uart_byte+0x180>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
			size_ix = 0;
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <_esp_process_uart_byte+0x18c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
}
 8001208:	e048      	b.n	800129c <_esp_process_uart_byte+0x178>
			command = 0x00;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <_esp_process_uart_byte+0x188>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
}
 8001210:	e044      	b.n	800129c <_esp_process_uart_byte+0x178>
		if (mode == UART_MODE_READ_SIZE) {
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <_esp_process_uart_byte+0x180>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d121      	bne.n	800125e <_esp_process_uart_byte+0x13a>
			size_buf[size_ix++] = value;
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <_esp_process_uart_byte+0x18c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	b2d1      	uxtb	r1, r2
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <_esp_process_uart_byte+0x18c>)
 8001224:	7011      	strb	r1, [r2, #0]
 8001226:	0019      	movs	r1, r3
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <_esp_process_uart_byte+0x190>)
 800122a:	1dfa      	adds	r2, r7, #7
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	545a      	strb	r2, [r3, r1]
			if (size_ix == 2) {
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <_esp_process_uart_byte+0x18c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d131      	bne.n	800129c <_esp_process_uart_byte+0x178>
				size = size_buf[1] << 8 | size_buf[0];
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <_esp_process_uart_byte+0x190>)
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <_esp_process_uart_byte+0x190>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21b      	sxth	r3, r3
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <_esp_process_uart_byte+0x194>)
 800124e:	801a      	strh	r2, [r3, #0]
				mode = UART_MODE_READ_TEXT;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <_esp_process_uart_byte+0x180>)
 8001252:	2202      	movs	r2, #2
 8001254:	701a      	strb	r2, [r3, #0]
				text_ix = 0;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <_esp_process_uart_byte+0x198>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
}
 800125c:	e01e      	b.n	800129c <_esp_process_uart_byte+0x178>
		} else if (mode == UART_MODE_READ_TEXT) {
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_esp_process_uart_byte+0x180>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d11a      	bne.n	800129c <_esp_process_uart_byte+0x178>
			if (text_ix < 128) {
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <_esp_process_uart_byte+0x198>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b25b      	sxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	db06      	blt.n	800127e <_esp_process_uart_byte+0x15a>
				text_buf[text_ix] = value;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <_esp_process_uart_byte+0x198>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	0019      	movs	r1, r3
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <_esp_process_uart_byte+0x19c>)
 8001278:	1dfa      	adds	r2, r7, #7
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	545a      	strb	r2, [r3, r1]
			text_ix++;
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <_esp_process_uart_byte+0x198>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <_esp_process_uart_byte+0x198>)
 8001288:	701a      	strb	r2, [r3, #0]
			if (text_ix >= size) {
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <_esp_process_uart_byte+0x198>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <_esp_process_uart_byte+0x194>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d301      	bcc.n	800129c <_esp_process_uart_byte+0x178>
				_esp_parse_command();
 8001298:	f000 f8a0 	bl	80013dc <_esp_parse_command>
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000001 	.word	0x20000001
 80012a8:	20000545 	.word	0x20000545
 80012ac:	20000546 	.word	0x20000546
 80012b0:	2000054a 	.word	0x2000054a
 80012b4:	20000548 	.word	0x20000548
 80012b8:	2000054c 	.word	0x2000054c
 80012bc:	200005d0 	.word	0x200005d0
 80012c0:	20000550 	.word	0x20000550

080012c4 <esp_next_song>:

void esp_next_song() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	next_song_requested = true;
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <esp_next_song+0x10>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200005d1 	.word	0x200005d1

080012d8 <esp_prev_song>:

void esp_prev_song() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	prev_song_requested = true;
 80012dc:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <esp_prev_song+0x10>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200005d2 	.word	0x200005d2

080012ec <esp_disconnect>:

void esp_disconnect() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	disconnect_requested = true;
 80012f0:	4b02      	ldr	r3, [pc, #8]	; (80012fc <esp_disconnect+0x10>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200005d3 	.word	0x200005d3

08001300 <esp_reconnect>:

void esp_reconnect() {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	reconnect_requested = true;
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <esp_reconnect+0x10>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200005d4 	.word	0x200005d4

08001314 <esp_is_connected>:

bool esp_is_connected() {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	return connected;
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <esp_is_connected+0x10>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200005d5 	.word	0x200005d5

08001328 <esp_run_can_events>:

void esp_run_can_events() {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	if (prev_song_requested) {
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <esp_run_can_events+0x94>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <esp_run_can_events+0x28>
		prev_song_requested = false;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <esp_run_can_events+0x94>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
		uint8_t data[1] = { CMD_PREV };
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <esp_run_can_events+0x98>)
 8001342:	7812      	ldrb	r2, [r2, #0]
 8001344:	701a      	strb	r2, [r3, #0]
		uart_send_data(data, 1);
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2101      	movs	r1, #1
 800134a:	0018      	movs	r0, r3
 800134c:	f000 fc7e 	bl	8001c4c <uart_send_data>
	}

	if (next_song_requested) {
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <esp_run_can_events+0x9c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <esp_run_can_events+0x4a>
		next_song_requested = false;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <esp_run_can_events+0x9c>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
		uint8_t data[1] = { CMD_NEXT };
 8001360:	003b      	movs	r3, r7
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <esp_run_can_events+0xa0>)
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	701a      	strb	r2, [r3, #0]
		uart_send_data(data, 1);
 8001368:	003b      	movs	r3, r7
 800136a:	2101      	movs	r1, #1
 800136c:	0018      	movs	r0, r3
 800136e:	f000 fc6d 	bl	8001c4c <uart_send_data>
	}

	if (disconnect_requested) {
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <esp_run_can_events+0xa4>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <esp_run_can_events+0x60>
		disconnect_requested = false;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <esp_run_can_events+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
		//uint8_t data[1] = { CMD_SHUTDOWN };
		//uart_send_data(data, 1);
		connected = false;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <esp_run_can_events+0xa8>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
	}

	if (reconnect_requested) {
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <esp_run_can_events+0xac>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <esp_run_can_events+0x76>
		reconnect_requested = false;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <esp_run_can_events+0xac>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
		//uint8_t data[1] = { CMD_START };
		//uart_send_data(data, 1);
		connected = true;
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <esp_run_can_events+0xa8>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
	}

	if (push_metadata) {
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <esp_run_can_events+0xb0>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <esp_run_can_events+0x8a>
		push_metadata = false;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <esp_run_can_events+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
		can_tx_send_music_metadata();
 80013ae:	f7ff fa5b 	bl	8000868 <can_tx_send_music_metadata>
	}
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	200005d2 	.word	0x200005d2
 80013c0:	08005c44 	.word	0x08005c44
 80013c4:	200005d1 	.word	0x200005d1
 80013c8:	08005c48 	.word	0x08005c48
 80013cc:	200005d3 	.word	0x200005d3
 80013d0:	200005d5 	.word	0x200005d5
 80013d4:	200005d4 	.word	0x200005d4
 80013d8:	200005d6 	.word	0x200005d6

080013dc <_esp_parse_command>:

void _esp_parse_command() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	if (size > 128)
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <_esp_parse_command+0x7c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	2b80      	cmp	r3, #128	; 0x80
 80013e6:	d902      	bls.n	80013ee <_esp_parse_command+0x12>
		size = 128;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <_esp_parse_command+0x7c>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	801a      	strh	r2, [r3, #0]

	switch (command) {
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <_esp_parse_command+0x80>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b87      	cmp	r3, #135	; 0x87
 80013f4:	d023      	beq.n	800143e <_esp_parse_command+0x62>
 80013f6:	dc25      	bgt.n	8001444 <_esp_parse_command+0x68>
 80013f8:	2b83      	cmp	r3, #131	; 0x83
 80013fa:	d017      	beq.n	800142c <_esp_parse_command+0x50>
 80013fc:	dc22      	bgt.n	8001444 <_esp_parse_command+0x68>
 80013fe:	2b81      	cmp	r3, #129	; 0x81
 8001400:	d002      	beq.n	8001408 <_esp_parse_command+0x2c>
 8001402:	2b82      	cmp	r3, #130	; 0x82
 8001404:	d009      	beq.n	800141a <_esp_parse_command+0x3e>
		can_tx_set_album(text_buf, size);
		break;
	case CMD_TIME:
		push_metadata = true;
	default:
		break;
 8001406:	e01d      	b.n	8001444 <_esp_parse_command+0x68>
		can_tx_set_title(text_buf, size);
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <_esp_parse_command+0x7c>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <_esp_parse_command+0x84>)
 8001410:	0011      	movs	r1, r2
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff f89c 	bl	8000550 <can_tx_set_title>
		break;
 8001418:	e015      	b.n	8001446 <_esp_parse_command+0x6a>
		can_tx_set_artist(text_buf, size);
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <_esp_parse_command+0x7c>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <_esp_parse_command+0x84>)
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff f8af 	bl	8000588 <can_tx_set_artist>
		break;
 800142a:	e00c      	b.n	8001446 <_esp_parse_command+0x6a>
		can_tx_set_album(text_buf, size);
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <_esp_parse_command+0x7c>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <_esp_parse_command+0x84>)
 8001434:	0011      	movs	r1, r2
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff f8c2 	bl	80005c0 <can_tx_set_album>
		break;
 800143c:	e003      	b.n	8001446 <_esp_parse_command+0x6a>
		push_metadata = true;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <_esp_parse_command+0x88>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
		break;
 8001444:	46c0      	nop			; (mov r8, r8)
	}

	mode = UART_MODE_WAIT;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <_esp_parse_command+0x8c>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
	command = UART_MODE_WAIT;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <_esp_parse_command+0x80>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000054c 	.word	0x2000054c
 800145c:	20000546 	.word	0x20000546
 8001460:	20000550 	.word	0x20000550
 8001464:	200005d6 	.word	0x200005d6
 8001468:	20000001 	.word	0x20000001

0800146c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001470:	f000 fc92 	bl	8001d98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001474:	f000 f818 	bl	80014a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001478:	f000 f998 	bl	80017ac <MX_GPIO_Init>
	MX_DMA_Init();
 800147c:	f000 f978 	bl	8001770 <MX_DMA_Init>
	MX_CAN_Init();
 8001480:	f000 f878 	bl	8001574 <MX_CAN_Init>
	MX_USART1_UART_Init();
 8001484:	f000 f944 	bl	8001710 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8001488:	f000 f8ea 	bl	8001660 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	uart_start(&huart1);
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <main+0x38>)
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fb90 	bl	8001bb4 <uart_start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		esp_tick();
 8001494:	f7ff fdde 	bl	8001054 <esp_tick>
		esp_receive_uart();
 8001498:	f7ff fe18 	bl	80010cc <esp_receive_uart>
		esp_run_can_events();
 800149c:	f7ff ff44 	bl	8001328 <esp_run_can_events>
	while (1) {
 80014a0:	e7f8      	b.n	8001494 <main+0x28>
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	2000064c 	.word	0x2000064c

080014a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b099      	sub	sp, #100	; 0x64
 80014ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014ae:	242c      	movs	r4, #44	; 0x2c
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	0018      	movs	r0, r3
 80014b4:	2334      	movs	r3, #52	; 0x34
 80014b6:	001a      	movs	r2, r3
 80014b8:	2100      	movs	r1, #0
 80014ba:	f004 fb7a 	bl	8005bb2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014be:	231c      	movs	r3, #28
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	0018      	movs	r0, r3
 80014c4:	2310      	movs	r3, #16
 80014c6:	001a      	movs	r2, r3
 80014c8:	2100      	movs	r1, #0
 80014ca:	f004 fb72 	bl	8005bb2 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	0018      	movs	r0, r3
 80014d2:	2318      	movs	r3, #24
 80014d4:	001a      	movs	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	f004 fb6b 	bl	8005bb2 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80014dc:	0021      	movs	r1, r4
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2203      	movs	r2, #3
 80014e2:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2201      	movs	r2, #1
 80014e8:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2201      	movs	r2, #1
 80014ee:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2210      	movs	r2, #16
 80014f4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2202      	movs	r2, #2
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	0252      	lsls	r2, r2, #9
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	22e0      	movs	r2, #224	; 0xe0
 8001508:	0392      	lsls	r2, r2, #14
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV3;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2202      	movs	r2, #2
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001512:	187b      	adds	r3, r7, r1
 8001514:	0018      	movs	r0, r3
 8001516:	f001 ff87 	bl	8003428 <HAL_RCC_OscConfig>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x7a>
		Error_Handler();
 800151e:	f000 f9a7 	bl	8001870 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001522:	211c      	movs	r1, #28
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2207      	movs	r2, #7
 8001528:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2202      	movs	r2, #2
 800152e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001536:	187b      	adds	r3, r7, r1
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	00d2      	lsls	r2, r2, #3
 800153c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2101      	movs	r1, #1
 8001542:	0018      	movs	r0, r3
 8001544:	f002 faf6 	bl	8003b34 <HAL_RCC_ClockConfig>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0xa8>
		Error_Handler();
 800154c:	f000 f990 	bl	8001870 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2203      	movs	r2, #3
 800155a:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	0018      	movs	r0, r3
 8001560:	f002 fc56 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001564:	1e03      	subs	r3, r0, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0xc4>
		Error_Handler();
 8001568:	f000 f982 	bl	8001870 <Error_Handler>
	}
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b019      	add	sp, #100	; 0x64
 8001572:	bd90      	pop	{r4, r7, pc}

08001574 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <MX_CAN_Init+0xe4>)
 800157c:	4a37      	ldr	r2, [pc, #220]	; (800165c <MX_CAN_Init+0xe8>)
 800157e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 14;
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <MX_CAN_Init+0xe4>)
 8001582:	220e      	movs	r2, #14
 8001584:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <MX_CAN_Init+0xe4>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <MX_CAN_Init+0xe4>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <MX_CAN_Init+0xe4>)
 8001594:	22c0      	movs	r2, #192	; 0xc0
 8001596:	0312      	lsls	r2, r2, #12
 8001598:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800159a:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <MX_CAN_Init+0xe4>)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	0352      	lsls	r2, r2, #13
 80015a0:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <MX_CAN_Init+0xe4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <MX_CAN_Init+0xe4>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = ENABLE;
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <MX_CAN_Init+0xe4>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <MX_CAN_Init+0xe4>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <MX_CAN_Init+0xe4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <MX_CAN_Init+0xe4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <MX_CAN_Init+0xe4>)
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 fc49 	bl	8001e60 <HAL_CAN_Init>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <MX_CAN_Init+0x62>
		Error_Handler();
 80015d2:	f000 f94d 	bl	8001870 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	can_tx_set_hcan(&hcan);
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <MX_CAN_Init+0xe4>)
 80015d8:	0018      	movs	r0, r3
 80015da:	f7fe ff97 	bl	800050c <can_tx_set_hcan>

	sFilterConfig.FilterBank = 0;
 80015de:	003b      	movs	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015e4:	003b      	movs	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015ea:	003b      	movs	r3, r7
 80015ec:	2201      	movs	r2, #1
 80015ee:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80015f0:	003b      	movs	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80015f6:	003b      	movs	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80015fc:	003b      	movs	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001602:	003b      	movs	r3, r7
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001608:	003b      	movs	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800160e:	003b      	movs	r3, r7
 8001610:	2201      	movs	r2, #1
 8001612:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001614:	003b      	movs	r3, r7
 8001616:	220e      	movs	r2, #14
 8001618:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 800161a:	003a      	movs	r2, r7
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_CAN_Init+0xe4>)
 800161e:	0011      	movs	r1, r2
 8001620:	0018      	movs	r0, r3
 8001622:	f000 fd1b 	bl	800205c <HAL_CAN_ConfigFilter>
 8001626:	1e03      	subs	r3, r0, #0
 8001628:	d001      	beq.n	800162e <MX_CAN_Init+0xba>
		/* Filter configuration Error */
		Error_Handler();
 800162a:	f000 f921 	bl	8001870 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_CAN_Init+0xe4>)
 8001630:	0018      	movs	r0, r3
 8001632:	f000 fe05 	bl	8002240 <HAL_CAN_Start>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <MX_CAN_Init+0xca>
		/* Start Error */
		Error_Handler();
 800163a:	f000 f919 	bl	8001870 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan,
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_CAN_Init+0xe4>)
 8001640:	2103      	movs	r1, #3
 8001642:	0018      	movs	r0, r3
 8001644:	f001 f83f 	bl	80026c6 <HAL_CAN_ActivateNotification>
 8001648:	1e03      	subs	r3, r0, #0
 800164a:	d001      	beq.n	8001650 <MX_CAN_Init+0xdc>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		/* Notification Error */
		Error_Handler();
 800164c:	f000 f910 	bl	8001870 <Error_Handler>
	}
	/* USER CODE END CAN_Init 2 */

}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b00a      	add	sp, #40	; 0x28
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200005dc 	.word	0x200005dc
 800165c:	40006400 	.word	0x40006400

08001660 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001666:	2308      	movs	r3, #8
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	0018      	movs	r0, r3
 800166c:	2310      	movs	r3, #16
 800166e:	001a      	movs	r2, r3
 8001670:	2100      	movs	r1, #0
 8001672:	f004 fa9e 	bl	8005bb2 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001676:	003b      	movs	r3, r7
 8001678:	0018      	movs	r0, r3
 800167a:	2308      	movs	r3, #8
 800167c:	001a      	movs	r2, r3
 800167e:	2100      	movs	r1, #0
 8001680:	f004 fa97 	bl	8005bb2 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <MX_TIM2_Init+0xa8>)
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	05d2      	lsls	r2, r2, #23
 800168a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 4266;
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_TIM2_Init+0xa8>)
 800168e:	4a1f      	ldr	r2, [pc, #124]	; (800170c <MX_TIM2_Init+0xac>)
 8001690:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_TIM2_Init+0xa8>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 25;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_TIM2_Init+0xa8>)
 800169a:	2219      	movs	r2, #25
 800169c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_TIM2_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_TIM2_Init+0xa8>)
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_TIM2_Init+0xa8>)
 80016ac:	0018      	movs	r0, r3
 80016ae:	f002 fc9d 	bl	8003fec <HAL_TIM_Base_Init>
 80016b2:	1e03      	subs	r3, r0, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0x5a>
		Error_Handler();
 80016b6:	f000 f8db 	bl	8001870 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	2108      	movs	r1, #8
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	0152      	lsls	r2, r2, #5
 80016c2:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80016c4:	187a      	adds	r2, r7, r1
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_TIM2_Init+0xa8>)
 80016c8:	0011      	movs	r1, r2
 80016ca:	0018      	movs	r0, r3
 80016cc:	f002 fe40 	bl	8004350 <HAL_TIM_ConfigClockSource>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x78>
		Error_Handler();
 80016d4:	f000 f8cc 	bl	8001870 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	003b      	movs	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	003b      	movs	r3, r7
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80016e4:	003a      	movs	r2, r7
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_TIM2_Init+0xa8>)
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f003 f834 	bl	8004758 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80016f4:	f000 f8bc 	bl	8001870 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <MX_TIM2_Init+0xa8>)
 80016fa:	0018      	movs	r0, r3
 80016fc:	f002 fcc6 	bl	800408c <HAL_TIM_Base_Start_IT>
	/* USER CODE END TIM2_Init 2 */

}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b006      	add	sp, #24
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000604 	.word	0x20000604
 800170c:	000010aa 	.word	0x000010aa

08001710 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_USART1_UART_Init+0x58>)
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <MX_USART1_UART_Init+0x5c>)
 8001718:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_USART1_UART_Init+0x58>)
 800171c:	22e1      	movs	r2, #225	; 0xe1
 800171e:	0252      	lsls	r2, r2, #9
 8001720:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_USART1_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_USART1_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_USART1_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_USART1_UART_Init+0x58>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_USART1_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_USART1_UART_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_USART1_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_USART1_UART_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
	/* USER CODE BEGIN USART1_Init 2 */
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <MX_USART1_UART_Init+0x58>)
 8001754:	0018      	movs	r0, r3
 8001756:	f003 f867 	bl	8004828 <HAL_UART_Init>
 800175a:	1e03      	subs	r3, r0, #0
 800175c:	d001      	beq.n	8001762 <MX_USART1_UART_Init+0x52>
			Error_Handler();
 800175e:	f000 f887 	bl	8001870 <Error_Handler>
		}
	/* USER CODE END USART1_Init 2 */

}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000064c 	.word	0x2000064c
 800176c:	40013800 	.word	0x40013800

08001770 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_DMA_Init+0x38>)
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_DMA_Init+0x38>)
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	615a      	str	r2, [r3, #20]
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_DMA_Init+0x38>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	2201      	movs	r2, #1
 8001788:	4013      	ands	r3, r2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	200a      	movs	r0, #10
 8001794:	f001 fa7a 	bl	8002c8c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001798:	200a      	movs	r0, #10
 800179a:	f001 fa8c 	bl	8002cb6 <HAL_NVIC_EnableIRQ>

}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	40021000 	.word	0x40021000

080017ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017b2:	240c      	movs	r4, #12
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	0018      	movs	r0, r3
 80017b8:	2314      	movs	r3, #20
 80017ba:	001a      	movs	r2, r3
 80017bc:	2100      	movs	r1, #0
 80017be:	f004 f9f8 	bl	8005bb2 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <MX_GPIO_Init+0xa0>)
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_GPIO_Init+0xa0>)
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	03c9      	lsls	r1, r1, #15
 80017cc:	430a      	orrs	r2, r1
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_GPIO_Init+0xa0>)
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	03db      	lsls	r3, r3, #15
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_GPIO_Init+0xa0>)
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_GPIO_Init+0xa0>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0289      	lsls	r1, r1, #10
 80017e8:	430a      	orrs	r2, r1
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_GPIO_Init+0xa0>)
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	029b      	lsls	r3, r3, #10
 80017f4:	4013      	ands	r3, r2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_LP_GPIO_Port, CAN_LP_Pin, GPIO_PIN_SET);
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	0059      	lsls	r1, r3, #1
 80017fe:	2390      	movs	r3, #144	; 0x90
 8001800:	05db      	lsls	r3, r3, #23
 8001802:	2201      	movs	r2, #1
 8001804:	0018      	movs	r0, r3
 8001806:	f001 fdf1 	bl	80033ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	0219      	lsls	r1, r3, #8
 800180e:	2390      	movs	r3, #144	; 0x90
 8001810:	05db      	lsls	r3, r3, #23
 8001812:	2200      	movs	r2, #0
 8001814:	0018      	movs	r0, r3
 8001816:	f001 fde9 	bl	80033ec <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CAN_LP_Pin BUCK_EN_Pin */
	GPIO_InitStruct.Pin = CAN_LP_Pin | BUCK_EN_Pin;
 800181a:	193b      	adds	r3, r7, r4
 800181c:	2281      	movs	r2, #129	; 0x81
 800181e:	0212      	lsls	r2, r2, #8
 8001820:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	193b      	adds	r3, r7, r4
 8001824:	2201      	movs	r2, #1
 8001826:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	193b      	adds	r3, r7, r4
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	193b      	adds	r3, r7, r4
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	193a      	adds	r2, r7, r4
 8001836:	2390      	movs	r3, #144	; 0x90
 8001838:	05db      	lsls	r3, r3, #23
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f001 fc6d 	bl	800311c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b009      	add	sp, #36	; 0x24
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) //check if the interrupt comes from TIM3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	05db      	lsls	r3, r3, #23
 8001860:	429a      	cmp	r2, r3
 8001862:	d101      	bne.n	8001868 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		can_tx_send_next();
 8001864:	f7fe ff5c 	bl	8000720 <can_tx_send_next>
	}
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001878:	e7fe      	b.n	8001878 <Error_Handler+0x8>
	...

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_MspInit+0x44>)
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_MspInit+0x44>)
 8001888:	2101      	movs	r1, #1
 800188a:	430a      	orrs	r2, r1
 800188c:	619a      	str	r2, [r3, #24]
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_MspInit+0x44>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2201      	movs	r2, #1
 8001894:	4013      	ands	r3, r2
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_MspInit+0x44>)
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_MspInit+0x44>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0549      	lsls	r1, r1, #21
 80018a4:	430a      	orrs	r2, r1
 80018a6:	61da      	str	r2, [r3, #28]
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_MspInit+0x44>)
 80018aa:	69da      	ldr	r2, [r3, #28]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	055b      	lsls	r3, r3, #21
 80018b0:	4013      	ands	r3, r2
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b08b      	sub	sp, #44	; 0x2c
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	2414      	movs	r4, #20
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	0018      	movs	r0, r3
 80018d2:	2314      	movs	r3, #20
 80018d4:	001a      	movs	r2, r3
 80018d6:	2100      	movs	r1, #0
 80018d8:	f004 f96b 	bl	8005bb2 <memset>
  if(hcan->Instance==CAN)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a21      	ldr	r2, [pc, #132]	; (8001968 <HAL_CAN_MspInit+0xa4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d13b      	bne.n	800195e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_CAN_MspInit+0xa8>)
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_CAN_MspInit+0xa8>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0489      	lsls	r1, r1, #18
 80018f0:	430a      	orrs	r2, r1
 80018f2:	61da      	str	r2, [r3, #28]
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_CAN_MspInit+0xa8>)
 80018f6:	69da      	ldr	r2, [r3, #28]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	049b      	lsls	r3, r3, #18
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_CAN_MspInit+0xa8>)
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_CAN_MspInit+0xa8>)
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	0289      	lsls	r1, r1, #10
 800190c:	430a      	orrs	r2, r1
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_CAN_MspInit+0xa8>)
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800191e:	193b      	adds	r3, r7, r4
 8001920:	22c0      	movs	r2, #192	; 0xc0
 8001922:	0152      	lsls	r2, r2, #5
 8001924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	0021      	movs	r1, r4
 8001928:	187b      	adds	r3, r7, r1
 800192a:	2202      	movs	r2, #2
 800192c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001934:	187b      	adds	r3, r7, r1
 8001936:	2203      	movs	r2, #3
 8001938:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800193a:	187b      	adds	r3, r7, r1
 800193c:	2204      	movs	r2, #4
 800193e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	187a      	adds	r2, r7, r1
 8001942:	2390      	movs	r3, #144	; 0x90
 8001944:	05db      	lsls	r3, r3, #23
 8001946:	0011      	movs	r1, r2
 8001948:	0018      	movs	r0, r3
 800194a:	f001 fbe7 	bl	800311c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	201e      	movs	r0, #30
 8001954:	f001 f99a 	bl	8002c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001958:	201e      	movs	r0, #30
 800195a:	f001 f9ac 	bl	8002cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b00b      	add	sp, #44	; 0x2c
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40006400 	.word	0x40006400
 800196c:	40021000 	.word	0x40021000

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	05db      	lsls	r3, r3, #23
 8001980:	429a      	cmp	r2, r3
 8001982:	d113      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_TIM_Base_MspInit+0x44>)
 8001986:	69da      	ldr	r2, [r3, #28]
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_TIM_Base_MspInit+0x44>)
 800198a:	2101      	movs	r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	61da      	str	r2, [r3, #28]
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_TIM_Base_MspInit+0x44>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	200f      	movs	r0, #15
 80019a2:	f001 f973 	bl	8002c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019a6:	200f      	movs	r0, #15
 80019a8:	f001 f985 	bl	8002cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b08b      	sub	sp, #44	; 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	2414      	movs	r4, #20
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	0018      	movs	r0, r3
 80019c6:	2314      	movs	r3, #20
 80019c8:	001a      	movs	r2, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	f004 f8f1 	bl	8005bb2 <memset>
  if(huart->Instance==USART1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <HAL_UART_MspInit+0x13c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d000      	beq.n	80019dc <HAL_UART_MspInit+0x24>
 80019da:	e087      	b.n	8001aec <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019dc:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_UART_MspInit+0x140>)
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	4b45      	ldr	r3, [pc, #276]	; (8001af8 <HAL_UART_MspInit+0x140>)
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	01c9      	lsls	r1, r1, #7
 80019e6:	430a      	orrs	r2, r1
 80019e8:	619a      	str	r2, [r3, #24]
 80019ea:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <HAL_UART_MspInit+0x140>)
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	01db      	lsls	r3, r3, #7
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_UART_MspInit+0x140>)
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <HAL_UART_MspInit+0x140>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0289      	lsls	r1, r1, #10
 8001a02:	430a      	orrs	r2, r1
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <HAL_UART_MspInit+0x140>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	029b      	lsls	r3, r3, #10
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	22c0      	movs	r2, #192	; 0xc0
 8001a18:	00d2      	lsls	r2, r2, #3
 8001a1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	0021      	movs	r1, r4
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2202      	movs	r2, #2
 8001a22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2201      	movs	r2, #1
 8001a34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	187a      	adds	r2, r7, r1
 8001a38:	2390      	movs	r3, #144	; 0x90
 8001a3a:	05db      	lsls	r3, r3, #23
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f001 fb6c 	bl	800311c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a46:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <HAL_UART_MspInit+0x148>)
 8001a48:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4a:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f001 f93a 	bl	8002cf0 <HAL_DMA_Init>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001a80:	f7ff fef6 	bl	8001870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a88:	675a      	str	r2, [r3, #116]	; 0x74
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_UART_MspInit+0x144>)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_UART_MspInit+0x150>)
 8001a94:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001a98:	2210      	movs	r2, #16
 8001a9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f001 f914 	bl	8002cf0 <HAL_DMA_Init>
 8001ac8:	1e03      	subs	r3, r0, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8001acc:	f7ff fed0 	bl	8001870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001ad4:	671a      	str	r2, [r3, #112]	; 0x70
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_UART_MspInit+0x14c>)
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	201b      	movs	r0, #27
 8001ae2:	f001 f8d3 	bl	8002c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ae6:	201b      	movs	r0, #27
 8001ae8:	f001 f8e5 	bl	8002cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b00b      	add	sp, #44	; 0x2c
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	40013800 	.word	0x40013800
 8001af8:	40021000 	.word	0x40021000
 8001afc:	200006d4 	.word	0x200006d4
 8001b00:	40020030 	.word	0x40020030
 8001b04:	20000718 	.word	0x20000718
 8001b08:	4002001c 	.word	0x4002001c

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <NMI_Handler+0x4>

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f97a 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001b42:	0018      	movs	r0, r3
 8001b44:	f001 f9ff 	bl	8002f46 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <DMA1_Channel2_3_IRQHandler+0x20>)
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f001 f9fb 	bl	8002f46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	20000718 	.word	0x20000718
 8001b5c:	200006d4 	.word	0x200006d4

08001b60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <TIM2_IRQHandler+0x14>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f002 fadc 	bl	8004124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	20000604 	.word	0x20000604

08001b78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <USART1_IRQHandler+0x14>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f002 ff46 	bl	8004a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	2000064c 	.word	0x2000064c

08001b90 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <CEC_CAN_IRQHandler+0x14>)
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 fdbf 	bl	800271a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	200005dc 	.word	0x200005dc

08001ba8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <uart_start>:

bool uart_cts = true;

void _uart_send_buffer();

void uart_start(UART_HandleTypeDef *uart) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	uart_huart = *uart;
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <uart_start+0x40>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0010      	movs	r0, r2
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	2388      	movs	r3, #136	; 0x88
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	f004 f820 	bl	8005c0c <memcpy>
	HAL_UARTEx_ReceiveToIdle_DMA(uart, uart_byte_buf, UART_BUFFER_SIZE);
 8001bcc:	490a      	ldr	r1, [pc, #40]	; (8001bf8 <uart_start+0x44>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f003 ff85 	bl	8005ae2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(uart->hdmarx, DMA_IT_HT); // Theoretically I might be able to disable half transfers. But maybe let's implement rest n ow.
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2104      	movs	r1, #4
 8001be8:	438a      	bics	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000085c 	.word	0x2000085c
 8001bf8:	2000075c 	.word	0x2000075c

08001bfc <uart_data_available>:

int uart_data_available() {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	if (uart_ring_buf.head >= uart_ring_buf.tail)
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <uart_data_available+0x34>)
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <uart_data_available+0x34>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	db05      	blt.n	8001c18 <uart_data_available+0x1c>
		return uart_ring_buf.head - uart_ring_buf.tail;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <uart_data_available+0x34>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <uart_data_available+0x34>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	e007      	b.n	8001c28 <uart_data_available+0x2c>

	return uart_ring_buf.maxlen - (uart_ring_buf.tail - uart_ring_buf.head);
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <uart_data_available+0x34>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <uart_data_available+0x34>)
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <uart_data_available+0x34>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	1acb      	subs	r3, r1, r3
 8001c26:	1ad3      	subs	r3, r2, r3
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	20000008 	.word	0x20000008

08001c34 <uart_get_byte>:

int uart_get_byte() {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	return circ_buf_pop(&uart_ring_buf);
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <uart_get_byte+0x14>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7ff f995 	bl	8000f6a <circ_buf_pop>
 8001c40:	0003      	movs	r3, r0
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000008 	.word	0x20000008

08001c4c <uart_send_data>:

void uart_send_data(uint8_t * data, uint8_t len) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	000a      	movs	r2, r1
 8001c56:	1cfb      	adds	r3, r7, #3
 8001c58:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit (&uart_huart, data, len, 100);
 8001c5a:	1cfb      	adds	r3, r7, #3
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4804      	ldr	r0, [pc, #16]	; (8001c74 <uart_send_data+0x28>)
 8001c64:	2364      	movs	r3, #100	; 0x64
 8001c66:	f002 fe33 	bl	80048d0 <HAL_UART_Transmit>
}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	2000085c 	.word	0x2000085c

08001c78 <uart_nop>:


void uart_nop() {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	000a      	movs	r2, r1
 8001c8e:	1cbb      	adds	r3, r7, #2
 8001c90:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_UARTEx_RxEventCallback+0x70>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d126      	bne.n	8001cea <HAL_UARTEx_RxEventCallback+0x66>
		uint16_t copyIx = 0;
 8001c9c:	210e      	movs	r1, #14
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	801a      	strh	r2, [r3, #0]
		uint16_t copySize = Size;
 8001ca4:	200c      	movs	r0, #12
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	1cba      	adds	r2, r7, #2
 8001caa:	8812      	ldrh	r2, [r2, #0]
 8001cac:	801a      	strh	r2, [r3, #0]

		if (copySize > 0) {
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_UARTEx_RxEventCallback+0x46>
			circ_buf_push_bytes(&uart_ring_buf, uart_byte_buf + copyIx,
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_UARTEx_RxEventCallback+0x74>)
 8001cbc:	18d1      	adds	r1, r2, r3
 8001cbe:	183b      	adds	r3, r7, r0
 8001cc0:	881a      	ldrh	r2, [r3, #0]
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_UARTEx_RxEventCallback+0x78>)
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff f8d1 	bl	8000e6c <circ_buf_push_bytes>
					copySize);
		}

		HAL_UARTEx_ReceiveToIdle_DMA(huart, uart_byte_buf, UART_BUFFER_SIZE);
 8001cca:	490b      	ldr	r1, [pc, #44]	; (8001cf8 <HAL_UARTEx_RxEventCallback+0x74>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f003 ff06 	bl	8005ae2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	438a      	bics	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
	}
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	2000075c 	.word	0x2000075c
 8001cfc:	20000008 	.word	0x20000008

08001d00 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	uart_nop();
 8001d08:	f7ff ffb6 	bl	8001c78 <uart_nop>
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d16:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d18:	f7ff ff46 	bl	8001ba8 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001d1c:	4812      	ldr	r0, [pc, #72]	; (8001d68 <LoopForever+0x6>)
    LDR R1, [R0]
 8001d1e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001d20:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <LoopForever+0xa>)
    CMP R1, R2
 8001d24:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001d26:	d105      	bne.n	8001d34 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001d28:	4811      	ldr	r0, [pc, #68]	; (8001d70 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001d2a:	4912      	ldr	r1, [pc, #72]	; (8001d74 <LoopForever+0x12>)
    STR R1, [R0]
 8001d2c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001d2e:	4812      	ldr	r0, [pc, #72]	; (8001d78 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001d30:	4912      	ldr	r1, [pc, #72]	; (8001d7c <LoopForever+0x1a>)
    STR R1, [R0]
 8001d32:	6001      	str	r1, [r0, #0]

08001d34 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	4812      	ldr	r0, [pc, #72]	; (8001d80 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001d36:	4913      	ldr	r1, [pc, #76]	; (8001d84 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001d38:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <LoopForever+0x26>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001d4c:	4c10      	ldr	r4, [pc, #64]	; (8001d90 <LoopForever+0x2e>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d5a:	f003 ff33 	bl	8005bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5e:	f7ff fb85 	bl	800146c <main>

08001d62 <LoopForever>:

LoopForever:
    b LoopForever
 8001d62:	e7fe      	b.n	8001d62 <LoopForever>
  ldr   r0, =_estack
 8001d64:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001d68:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001d6c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001d70:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001d74:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001d78:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001d7c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001d88:	08005c8c 	.word	0x08005c8c
  ldr r2, =_sbss
 8001d8c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001d90:	200009e8 	.word	0x200009e8

08001d94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC1_IRQHandler>
	...

08001d98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_Init+0x24>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_Init+0x24>)
 8001da2:	2110      	movs	r1, #16
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f809 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dae:	f7ff fd65 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	40022000 	.word	0x40022000

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_InitTick+0x5c>)
 8001dca:	681c      	ldr	r4, [r3, #0]
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_InitTick+0x60>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	23fa      	movs	r3, #250	; 0xfa
 8001dd4:	0098      	lsls	r0, r3, #2
 8001dd6:	f7fe f997 	bl	8000108 <__udivsi3>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	0019      	movs	r1, r3
 8001dde:	0020      	movs	r0, r4
 8001de0:	f7fe f992 	bl	8000108 <__udivsi3>
 8001de4:	0003      	movs	r3, r0
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 ff75 	bl	8002cd6 <HAL_SYSTICK_Config>
 8001dec:	1e03      	subs	r3, r0, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e00f      	b.n	8001e14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d80b      	bhi.n	8001e12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	425b      	negs	r3, r3
 8001e00:	2200      	movs	r2, #0
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 ff42 	bl	8002c8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_InitTick+0x64>)
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b003      	add	sp, #12
 8001e1a:	bd90      	pop	{r4, r7, pc}
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	2000001c 	.word	0x2000001c
 8001e24:	20000018 	.word	0x20000018

08001e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_IncTick+0x1c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	001a      	movs	r2, r3
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_IncTick+0x20>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	18d2      	adds	r2, r2, r3
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_IncTick+0x20>)
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	2000001c 	.word	0x2000001c
 8001e48:	200009e4 	.word	0x200009e4

08001e4c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <HAL_GetTick+0x10>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	200009e4 	.word	0x200009e4

08001e60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0f0      	b.n	8002054 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2220      	movs	r2, #32
 8001e76:	5c9b      	ldrb	r3, [r3, r2]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff fd1f 	bl	80018c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e96:	f7ff ffd9 	bl	8001e4c <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e9e:	e013      	b.n	8001ec8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea0:	f7ff ffd4 	bl	8001e4c <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b0a      	cmp	r3, #10
 8001eac:	d90c      	bls.n	8001ec8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	0292      	lsls	r2, r2, #10
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0c5      	b.n	8002054 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0e5      	beq.n	8001ea0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2102      	movs	r1, #2
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee4:	f7ff ffb2 	bl	8001e4c <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eec:	e013      	b.n	8001f16 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eee:	f7ff ffad 	bl	8001e4c <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b0a      	cmp	r3, #10
 8001efa:	d90c      	bls.n	8001f16 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	0292      	lsls	r2, r2, #10
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	2105      	movs	r1, #5
 8001f10:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e09e      	b.n	8002054 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d1e5      	bne.n	8001eee <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7e1b      	ldrb	r3, [r3, #24]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d108      	bne.n	8001f3c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	e007      	b.n	8001f4c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	438a      	bics	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e5b      	ldrb	r3, [r3, #25]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d108      	bne.n	8001f66 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e007      	b.n	8001f76 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2140      	movs	r1, #64	; 0x40
 8001f72:	438a      	bics	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7e9b      	ldrb	r3, [r3, #26]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d108      	bne.n	8001f90 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2120      	movs	r1, #32
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e007      	b.n	8001fa0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2120      	movs	r1, #32
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7edb      	ldrb	r3, [r3, #27]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d108      	bne.n	8001fba <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e007      	b.n	8001fca <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2110      	movs	r1, #16
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7f1b      	ldrb	r3, [r3, #28]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d108      	bne.n	8001fe4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2108      	movs	r1, #8
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e007      	b.n	8001ff4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2108      	movs	r1, #8
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7f5b      	ldrb	r3, [r3, #29]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d108      	bne.n	800200e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2104      	movs	r1, #4
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e007      	b.n	800201e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2104      	movs	r1, #4
 800201a:	438a      	bics	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	431a      	orrs	r2, r3
 8002034:	0011      	movs	r1, r2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	1e5a      	subs	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2220      	movs	r2, #32
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b004      	add	sp, #16
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800206c:	2013      	movs	r0, #19
 800206e:	183b      	adds	r3, r7, r0
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	2120      	movs	r1, #32
 8002074:	5c52      	ldrb	r2, [r2, r1]
 8002076:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002078:	0002      	movs	r2, r0
 800207a:	18bb      	adds	r3, r7, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d004      	beq.n	800208c <HAL_CAN_ConfigFilter+0x30>
 8002082:	18bb      	adds	r3, r7, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d000      	beq.n	800208c <HAL_CAN_ConfigFilter+0x30>
 800208a:	e0cd      	b.n	8002228 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	58d3      	ldr	r3, [r2, r3]
 8002094:	2201      	movs	r2, #1
 8002096:	431a      	orrs	r2, r3
 8002098:	0011      	movs	r1, r2
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	221f      	movs	r2, #31
 80020a8:	4013      	ands	r3, r2
 80020aa:	2201      	movs	r2, #1
 80020ac:	409a      	lsls	r2, r3
 80020ae:	0013      	movs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	2387      	movs	r3, #135	; 0x87
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	58d3      	ldr	r3, [r2, r3]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	43d2      	mvns	r2, r2
 80020be:	401a      	ands	r2, r3
 80020c0:	0011      	movs	r1, r2
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	2387      	movs	r3, #135	; 0x87
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d129      	bne.n	8002126 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	2383      	movs	r3, #131	; 0x83
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	58d3      	ldr	r3, [r2, r3]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	43d2      	mvns	r2, r2
 80020de:	401a      	ands	r2, r3
 80020e0:	0011      	movs	r1, r2
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	2383      	movs	r3, #131	; 0x83
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	041b      	lsls	r3, r3, #16
 80020f6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020fc:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3248      	adds	r2, #72	; 0x48
 8002102:	00d2      	lsls	r2, r2, #3
 8002104:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002118:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800211a:	6979      	ldr	r1, [r7, #20]
 800211c:	3348      	adds	r3, #72	; 0x48
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	18cb      	adds	r3, r1, r3
 8002122:	3304      	adds	r3, #4
 8002124:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d128      	bne.n	8002180 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	2383      	movs	r3, #131	; 0x83
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	58d2      	ldr	r2, [r2, r3]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	431a      	orrs	r2, r3
 800213a:	0011      	movs	r1, r2
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	2383      	movs	r3, #131	; 0x83
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	041b      	lsls	r3, r3, #16
 8002150:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002156:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3248      	adds	r2, #72	; 0x48
 800215c:	00d2      	lsls	r2, r2, #3
 800215e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002172:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002174:	6979      	ldr	r1, [r7, #20]
 8002176:	3348      	adds	r3, #72	; 0x48
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	18cb      	adds	r3, r1, r3
 800217c:	3304      	adds	r3, #4
 800217e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10c      	bne.n	80021a2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	2381      	movs	r3, #129	; 0x81
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	58d3      	ldr	r3, [r2, r3]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	43d2      	mvns	r2, r2
 8002194:	401a      	ands	r2, r3
 8002196:	0011      	movs	r1, r2
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	2381      	movs	r3, #129	; 0x81
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	50d1      	str	r1, [r2, r3]
 80021a0:	e00a      	b.n	80021b8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	2381      	movs	r3, #129	; 0x81
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	58d2      	ldr	r2, [r2, r3]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	0011      	movs	r1, r2
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	2381      	movs	r3, #129	; 0x81
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10c      	bne.n	80021da <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	2385      	movs	r3, #133	; 0x85
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	58d3      	ldr	r3, [r2, r3]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	43d2      	mvns	r2, r2
 80021cc:	401a      	ands	r2, r3
 80021ce:	0011      	movs	r1, r2
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	2385      	movs	r3, #133	; 0x85
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	50d1      	str	r1, [r2, r3]
 80021d8:	e00a      	b.n	80021f0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	2385      	movs	r3, #133	; 0x85
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	58d2      	ldr	r2, [r2, r3]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	0011      	movs	r1, r2
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	2385      	movs	r3, #133	; 0x85
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10a      	bne.n	800220e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	2387      	movs	r3, #135	; 0x87
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	58d2      	ldr	r2, [r2, r3]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	431a      	orrs	r2, r3
 8002204:	0011      	movs	r1, r2
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	2387      	movs	r3, #135	; 0x87
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	58d3      	ldr	r3, [r2, r3]
 8002216:	2201      	movs	r2, #1
 8002218:	4393      	bics	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e007      	b.n	8002238 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	02d2      	lsls	r2, r2, #11
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
  }
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b006      	add	sp, #24
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	5c9b      	ldrb	r3, [r3, r2]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d12f      	bne.n	80022b4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	2102      	movs	r1, #2
 800225a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	438a      	bics	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800226c:	f7ff fdee 	bl	8001e4c <HAL_GetTick>
 8002270:	0003      	movs	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002274:	e013      	b.n	800229e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002276:	f7ff fde9 	bl	8001e4c <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b0a      	cmp	r3, #10
 8002282:	d90c      	bls.n	800229e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	0292      	lsls	r2, r2, #10
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2220      	movs	r2, #32
 8002296:	2105      	movs	r1, #5
 8002298:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e012      	b.n	80022c4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	4013      	ands	r3, r2
 80022a8:	d1e5      	bne.n	8002276 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e007      	b.n	80022c4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	0312      	lsls	r2, r2, #12
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
  }
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022da:	201f      	movs	r0, #31
 80022dc:	183b      	adds	r3, r7, r0
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	2120      	movs	r1, #32
 80022e2:	5c52      	ldrb	r2, [r2, r1]
 80022e4:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d004      	beq.n	8002300 <HAL_CAN_AddTxMessage+0x34>
 80022f6:	183b      	adds	r3, r7, r0
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d000      	beq.n	8002300 <HAL_CAN_AddTxMessage+0x34>
 80022fe:	e0ab      	b.n	8002458 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	04db      	lsls	r3, r3, #19
 8002306:	4013      	ands	r3, r2
 8002308:	d10a      	bne.n	8002320 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	051b      	lsls	r3, r3, #20
 8002310:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002312:	d105      	bne.n	8002320 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	055b      	lsls	r3, r3, #21
 800231a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800231c:	d100      	bne.n	8002320 <HAL_CAN_AddTxMessage+0x54>
 800231e:	e092      	b.n	8002446 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	0e1b      	lsrs	r3, r3, #24
 8002324:	2203      	movs	r2, #3
 8002326:	4013      	ands	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800232a:	2201      	movs	r2, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10c      	bne.n	8002356 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4311      	orrs	r1, r2
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	3218      	adds	r2, #24
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	50d1      	str	r1, [r2, r3]
 8002354:	e00f      	b.n	8002376 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002360:	431a      	orrs	r2, r3
 8002362:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 800236c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	3218      	adds	r2, #24
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6819      	ldr	r1, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3318      	adds	r3, #24
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	18cb      	adds	r3, r1, r3
 8002386:	3304      	adds	r3, #4
 8002388:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	7d1b      	ldrb	r3, [r3, #20]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d112      	bne.n	80023b8 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3318      	adds	r3, #24
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	18d3      	adds	r3, r2, r3
 800239e:	3304      	adds	r3, #4
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3318      	adds	r3, #24
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	18cb      	adds	r3, r1, r3
 80023b4:	3304      	adds	r3, #4
 80023b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3307      	adds	r3, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	061a      	lsls	r2, r3, #24
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3306      	adds	r3, #6
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3305      	adds	r3, #5
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	0019      	movs	r1, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	6979      	ldr	r1, [r7, #20]
 80023e4:	23c6      	movs	r3, #198	; 0xc6
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	0109      	lsls	r1, r1, #4
 80023ea:	1841      	adds	r1, r0, r1
 80023ec:	18cb      	adds	r3, r1, r3
 80023ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3303      	adds	r3, #3
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	061a      	lsls	r2, r3, #24
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3302      	adds	r3, #2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3301      	adds	r3, #1
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	0019      	movs	r1, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	6979      	ldr	r1, [r7, #20]
 800241a:	23c4      	movs	r3, #196	; 0xc4
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	0109      	lsls	r1, r1, #4
 8002420:	1841      	adds	r1, r0, r1
 8002422:	18cb      	adds	r3, r1, r3
 8002424:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	3218      	adds	r2, #24
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	58d2      	ldr	r2, [r2, r3]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	4311      	orrs	r1, r2
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	3218      	adds	r2, #24
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e010      	b.n	8002468 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	0392      	lsls	r2, r2, #14
 800244e:	431a      	orrs	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e007      	b.n	8002468 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	02d2      	lsls	r2, r2, #11
 8002460:	431a      	orrs	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
  }
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b008      	add	sp, #32
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800247e:	2017      	movs	r0, #23
 8002480:	183b      	adds	r3, r7, r0
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	2120      	movs	r1, #32
 8002486:	5c52      	ldrb	r2, [r2, r1]
 8002488:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800248a:	0002      	movs	r2, r0
 800248c:	18bb      	adds	r3, r7, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d004      	beq.n	800249e <HAL_CAN_GetRxMessage+0x2e>
 8002494:	18bb      	adds	r3, r7, r2
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d000      	beq.n	800249e <HAL_CAN_GetRxMessage+0x2e>
 800249c:	e107      	b.n	80026ae <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10e      	bne.n	80024c2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2203      	movs	r2, #3
 80024ac:	4013      	ands	r3, r2
 80024ae:	d117      	bne.n	80024e0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	0392      	lsls	r2, r2, #14
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0fd      	b.n	80026be <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2203      	movs	r2, #3
 80024ca:	4013      	ands	r3, r2
 80024cc:	d108      	bne.n	80024e0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	0392      	lsls	r2, r2, #14
 80024d6:	431a      	orrs	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0ee      	b.n	80026be <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	321b      	adds	r2, #27
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	58d3      	ldr	r3, [r2, r3]
 80024ec:	2204      	movs	r2, #4
 80024ee:	401a      	ands	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	321b      	adds	r2, #27
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	58d3      	ldr	r3, [r2, r3]
 8002508:	0d5b      	lsrs	r3, r3, #21
 800250a:	055b      	lsls	r3, r3, #21
 800250c:	0d5a      	lsrs	r2, r3, #21
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e00a      	b.n	800252a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	321b      	adds	r2, #27
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	58d3      	ldr	r3, [r2, r3]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	321b      	adds	r2, #27
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	58d3      	ldr	r3, [r2, r3]
 8002536:	2202      	movs	r2, #2
 8002538:	401a      	ands	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	331b      	adds	r3, #27
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	3304      	adds	r3, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2208      	movs	r2, #8
 8002550:	4013      	ands	r3, r2
 8002552:	d003      	beq.n	800255c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2208      	movs	r2, #8
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	e00b      	b.n	8002574 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	331b      	adds	r3, #27
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	18d3      	adds	r3, r2, r3
 8002568:	3304      	adds	r3, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	220f      	movs	r2, #15
 800256e:	401a      	ands	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	331b      	adds	r3, #27
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	18d3      	adds	r3, r2, r3
 8002580:	3304      	adds	r3, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	22ff      	movs	r2, #255	; 0xff
 8002588:	401a      	ands	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	331b      	adds	r3, #27
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	18d3      	adds	r3, r2, r3
 800259a:	3304      	adds	r3, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	0c1a      	lsrs	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	23dc      	movs	r3, #220	; 0xdc
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	188a      	adds	r2, r1, r2
 80025b6:	18d3      	adds	r3, r2, r3
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	23dc      	movs	r3, #220	; 0xdc
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	188a      	adds	r2, r1, r2
 80025ce:	18d3      	adds	r3, r2, r3
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0a1a      	lsrs	r2, r3, #8
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	23dc      	movs	r3, #220	; 0xdc
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	188a      	adds	r2, r1, r2
 80025ea:	18d3      	adds	r3, r2, r3
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0c1a      	lsrs	r2, r3, #16
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	3302      	adds	r3, #2
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	23dc      	movs	r3, #220	; 0xdc
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	188a      	adds	r2, r1, r2
 8002606:	18d3      	adds	r3, r2, r3
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0e1a      	lsrs	r2, r3, #24
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3303      	adds	r3, #3
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	23de      	movs	r3, #222	; 0xde
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	188a      	adds	r2, r1, r2
 8002622:	18d3      	adds	r3, r2, r3
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	3304      	adds	r3, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	23de      	movs	r3, #222	; 0xde
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	188a      	adds	r2, r1, r2
 800263c:	18d3      	adds	r3, r2, r3
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0a1a      	lsrs	r2, r3, #8
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3305      	adds	r3, #5
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	23de      	movs	r3, #222	; 0xde
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	188a      	adds	r2, r1, r2
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0c1a      	lsrs	r2, r3, #16
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	3306      	adds	r3, #6
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	23de      	movs	r3, #222	; 0xde
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	188a      	adds	r2, r1, r2
 8002674:	18d3      	adds	r3, r2, r3
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e1a      	lsrs	r2, r3, #24
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3307      	adds	r3, #7
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d108      	bne.n	800269a <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2120      	movs	r1, #32
 8002694:	430a      	orrs	r2, r1
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	e007      	b.n	80026aa <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2120      	movs	r1, #32
 80026a6:	430a      	orrs	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e007      	b.n	80026be <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	02d2      	lsls	r2, r2, #11
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
  }
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b006      	add	sp, #24
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026d0:	200f      	movs	r0, #15
 80026d2:	183b      	adds	r3, r7, r0
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	2120      	movs	r1, #32
 80026d8:	5c52      	ldrb	r2, [r2, r1]
 80026da:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80026dc:	0002      	movs	r2, r0
 80026de:	18bb      	adds	r3, r7, r2
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d003      	beq.n	80026ee <HAL_CAN_ActivateNotification+0x28>
 80026e6:	18bb      	adds	r3, r7, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d109      	bne.n	8002702 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6959      	ldr	r1, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e007      	b.n	8002712 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	2280      	movs	r2, #128	; 0x80
 8002708:	02d2      	lsls	r2, r2, #11
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
  }
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b004      	add	sp, #16
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b08a      	sub	sp, #40	; 0x28
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	d100      	bne.n	8002760 <HAL_CAN_IRQHandler+0x46>
 800275e:	e084      	b.n	800286a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d024      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d004      	beq.n	8002782 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	0018      	movs	r0, r3
 800277c:	f7fe fb68 	bl	8000e50 <HAL_CAN_TxMailbox0CompleteCallback>
 8002780:	e017      	b.n	80027b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2204      	movs	r2, #4
 8002786:	4013      	ands	r3, r2
 8002788:	d005      	beq.n	8002796 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	4313      	orrs	r3, r2
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e00d      	b.n	80027b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2208      	movs	r2, #8
 800279a:	4013      	ands	r3, r2
 800279c:	d005      	beq.n	80027aa <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0152      	lsls	r2, r2, #5
 80027a4:	4313      	orrs	r3, r2
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
 80027a8:	e003      	b.n	80027b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 f978 	bl	8002aa2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d028      	beq.n	800280e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2280      	movs	r2, #128	; 0x80
 80027c2:	0052      	lsls	r2, r2, #1
 80027c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4013      	ands	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f955 	bl	8002a82 <HAL_CAN_TxMailbox1CompleteCallback>
 80027d8:	e019      	b.n	800280e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4013      	ands	r3, r2
 80027e2:	d005      	beq.n	80027f0 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	0192      	lsls	r2, r2, #6
 80027ea:	4313      	orrs	r3, r2
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	e00e      	b.n	800280e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	d005      	beq.n	8002806 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	01d2      	lsls	r2, r2, #7
 8002800:	4313      	orrs	r3, r2
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
 8002804:	e003      	b.n	800280e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f952 	bl	8002ab2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	025b      	lsls	r3, r3, #9
 8002814:	4013      	ands	r3, r2
 8002816:	d028      	beq.n	800286a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	0252      	lsls	r2, r2, #9
 8002820:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	029b      	lsls	r3, r3, #10
 8002828:	4013      	ands	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	0018      	movs	r0, r3
 8002830:	f000 f92f 	bl	8002a92 <HAL_CAN_TxMailbox2CompleteCallback>
 8002834:	e019      	b.n	800286a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	02db      	lsls	r3, r3, #11
 800283c:	4013      	ands	r3, r2
 800283e:	d005      	beq.n	800284c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	0212      	lsls	r2, r2, #8
 8002846:	4313      	orrs	r3, r2
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	e00e      	b.n	800286a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	031b      	lsls	r3, r3, #12
 8002852:	4013      	ands	r3, r2
 8002854:	d005      	beq.n	8002862 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	0252      	lsls	r2, r2, #9
 800285c:	4313      	orrs	r3, r2
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
 8002860:	e003      	b.n	800286a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 f92c 	bl	8002ac2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	2208      	movs	r2, #8
 800286e:	4013      	ands	r3, r2
 8002870:	d00c      	beq.n	800288c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2210      	movs	r2, #16
 8002876:	4013      	ands	r3, r2
 8002878:	d008      	beq.n	800288c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4313      	orrs	r3, r2
 8002882:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2210      	movs	r2, #16
 800288a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d00b      	beq.n	80028ac <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2208      	movs	r2, #8
 8002898:	4013      	ands	r3, r2
 800289a:	d007      	beq.n	80028ac <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2208      	movs	r2, #8
 80028a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f913 	bl	8002ad2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2203      	movs	r2, #3
 80028bc:	4013      	ands	r3, r2
 80028be:	d003      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7fd fcac 	bl	8000220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	4013      	ands	r3, r2
 80028ce:	d00c      	beq.n	80028ea <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2210      	movs	r2, #16
 80028d4:	4013      	ands	r3, r2
 80028d6:	d008      	beq.n	80028ea <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	00d2      	lsls	r2, r2, #3
 80028de:	4313      	orrs	r3, r2
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2210      	movs	r2, #16
 80028e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	2220      	movs	r2, #32
 80028ee:	4013      	ands	r3, r2
 80028f0:	d00b      	beq.n	800290a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2208      	movs	r2, #8
 80028f6:	4013      	ands	r3, r2
 80028f8:	d007      	beq.n	800290a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2208      	movs	r2, #8
 8002900:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 f8f4 	bl	8002af2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	2210      	movs	r2, #16
 800290e:	4013      	ands	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2203      	movs	r2, #3
 800291a:	4013      	ands	r3, r2
 800291c:	d003      	beq.n	8002926 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f8de 	bl	8002ae2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002926:	6a3a      	ldr	r2, [r7, #32]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	4013      	ands	r3, r2
 800292e:	d00b      	beq.n	8002948 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2210      	movs	r2, #16
 8002934:	4013      	ands	r3, r2
 8002936:	d007      	beq.n	8002948 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2210      	movs	r2, #16
 800293e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0018      	movs	r0, r3
 8002944:	f000 f8dd 	bl	8002b02 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	025b      	lsls	r3, r3, #9
 800294e:	4013      	ands	r3, r2
 8002950:	d00b      	beq.n	800296a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	2208      	movs	r2, #8
 8002956:	4013      	ands	r3, r2
 8002958:	d007      	beq.n	800296a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2208      	movs	r2, #8
 8002960:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 f8d4 	bl	8002b12 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	4013      	ands	r3, r2
 8002972:	d100      	bne.n	8002976 <HAL_CAN_IRQHandler+0x25c>
 8002974:	e074      	b.n	8002a60 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2204      	movs	r2, #4
 800297a:	4013      	ands	r3, r2
 800297c:	d100      	bne.n	8002980 <HAL_CAN_IRQHandler+0x266>
 800297e:	e06b      	b.n	8002a58 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4013      	ands	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002990:	d003      	beq.n	800299a <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	2201      	movs	r2, #1
 8002996:	4313      	orrs	r3, r2
 8002998:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4013      	ands	r3, r2
 80029a2:	d007      	beq.n	80029b4 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029aa:	d003      	beq.n	80029b4 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	2202      	movs	r2, #2
 80029b0:	4313      	orrs	r3, r2
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029b4:	6a3a      	ldr	r2, [r7, #32]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4013      	ands	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2204      	movs	r2, #4
 80029c2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029c4:	d003      	beq.n	80029ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	2204      	movs	r2, #4
 80029ca:	4313      	orrs	r3, r2
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029ce:	6a3a      	ldr	r2, [r7, #32]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	d03f      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2270      	movs	r2, #112	; 0x70
 80029dc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029de:	d03b      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2270      	movs	r2, #112	; 0x70
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b60      	cmp	r3, #96	; 0x60
 80029e8:	d027      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x320>
 80029ea:	d82c      	bhi.n	8002a46 <HAL_CAN_IRQHandler+0x32c>
 80029ec:	2b50      	cmp	r3, #80	; 0x50
 80029ee:	d01f      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x316>
 80029f0:	d829      	bhi.n	8002a46 <HAL_CAN_IRQHandler+0x32c>
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d017      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x30c>
 80029f6:	d826      	bhi.n	8002a46 <HAL_CAN_IRQHandler+0x32c>
 80029f8:	2b30      	cmp	r3, #48	; 0x30
 80029fa:	d00f      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x302>
 80029fc:	d823      	bhi.n	8002a46 <HAL_CAN_IRQHandler+0x32c>
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d002      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x2ee>
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d005      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a06:	e01e      	b.n	8002a46 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a10:	e01a      	b.n	8002a48 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	2210      	movs	r2, #16
 8002a16:	4313      	orrs	r3, r2
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a1a:	e015      	b.n	8002a48 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	2220      	movs	r2, #32
 8002a20:	4313      	orrs	r3, r2
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a24:	e010      	b.n	8002a48 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	2240      	movs	r2, #64	; 0x40
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a2e:	e00b      	b.n	8002a48 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	4313      	orrs	r3, r2
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a38:	e006      	b.n	8002a48 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	0052      	lsls	r2, r2, #1
 8002a40:	4313      	orrs	r3, r2
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a44:	e000      	b.n	8002a48 <HAL_CAN_IRQHandler+0x32e>
            break;
 8002a46:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2170      	movs	r1, #112	; 0x70
 8002a54:	438a      	bics	r2, r1
 8002a56:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f854 	bl	8002b22 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b00a      	add	sp, #40	; 0x28
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b002      	add	sp, #8
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b002      	add	sp, #8
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b002      	add	sp, #8
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b002      	add	sp, #8
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b002      	add	sp, #8
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b002      	add	sp, #8
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	1dfb      	adds	r3, r7, #7
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b7f      	cmp	r3, #127	; 0x7f
 8002b46:	d809      	bhi.n	8002b5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b48:	1dfb      	adds	r3, r7, #7
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	231f      	movs	r3, #31
 8002b50:	401a      	ands	r2, r3
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_EnableIRQ+0x30>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	4091      	lsls	r1, r2
 8002b58:	000a      	movs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
  }
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	0002      	movs	r2, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	1dfb      	adds	r3, r7, #7
 8002b74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	1dfb      	adds	r3, r7, #7
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b7c:	d828      	bhi.n	8002bd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b7e:	4a2f      	ldr	r2, [pc, #188]	; (8002c3c <__NVIC_SetPriority+0xd4>)
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	33c0      	adds	r3, #192	; 0xc0
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	589b      	ldr	r3, [r3, r2]
 8002b8e:	1dfa      	adds	r2, r7, #7
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	0011      	movs	r1, r2
 8002b94:	2203      	movs	r2, #3
 8002b96:	400a      	ands	r2, r1
 8002b98:	00d2      	lsls	r2, r2, #3
 8002b9a:	21ff      	movs	r1, #255	; 0xff
 8002b9c:	4091      	lsls	r1, r2
 8002b9e:	000a      	movs	r2, r1
 8002ba0:	43d2      	mvns	r2, r2
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	401a      	ands	r2, r3
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	4003      	ands	r3, r0
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bbc:	481f      	ldr	r0, [pc, #124]	; (8002c3c <__NVIC_SetPriority+0xd4>)
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	33c0      	adds	r3, #192	; 0xc0
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002bce:	e031      	b.n	8002c34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <__NVIC_SetPriority+0xd8>)
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	230f      	movs	r3, #15
 8002bda:	400b      	ands	r3, r1
 8002bdc:	3b08      	subs	r3, #8
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3306      	adds	r3, #6
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	18d3      	adds	r3, r2, r3
 8002be6:	3304      	adds	r3, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1dfa      	adds	r2, r7, #7
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	0011      	movs	r1, r2
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	00d2      	lsls	r2, r2, #3
 8002bf6:	21ff      	movs	r1, #255	; 0xff
 8002bf8:	4091      	lsls	r1, r2
 8002bfa:	000a      	movs	r2, r1
 8002bfc:	43d2      	mvns	r2, r2
 8002bfe:	401a      	ands	r2, r3
 8002c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	22ff      	movs	r2, #255	; 0xff
 8002c08:	401a      	ands	r2, r3
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	2303      	movs	r3, #3
 8002c12:	4003      	ands	r3, r0
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c18:	4809      	ldr	r0, [pc, #36]	; (8002c40 <__NVIC_SetPriority+0xd8>)
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	001c      	movs	r4, r3
 8002c20:	230f      	movs	r3, #15
 8002c22:	4023      	ands	r3, r4
 8002c24:	3b08      	subs	r3, #8
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	3306      	adds	r3, #6
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	18c3      	adds	r3, r0, r3
 8002c30:	3304      	adds	r3, #4
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b003      	add	sp, #12
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	e000e100 	.word	0xe000e100
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	1e5a      	subs	r2, r3, #1
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	045b      	lsls	r3, r3, #17
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d301      	bcc.n	8002c5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e010      	b.n	8002c7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <SysTick_Config+0x44>)
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	3a01      	subs	r2, #1
 8002c62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c64:	2301      	movs	r3, #1
 8002c66:	425b      	negs	r3, r3
 8002c68:	2103      	movs	r1, #3
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7ff ff7c 	bl	8002b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <SysTick_Config+0x44>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <SysTick_Config+0x44>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	210f      	movs	r1, #15
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	1c02      	adds	r2, r0, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b25b      	sxtb	r3, r3
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff ff5d 	bl	8002b68 <__NVIC_SetPriority>
}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff ff33 	bl	8002b34 <__NVIC_EnableIRQ>
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7ff ffaf 	bl	8002c44 <SysTick_Config>
 8002ce6:	0003      	movs	r3, r0
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e036      	b.n	8002d74 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2221      	movs	r2, #33	; 0x21
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_DMA_Init+0x8c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 f9c4 	bl	80030e4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2221      	movs	r2, #33	; 0x21
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	ffffc00f 	.word	0xffffc00f

08002d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8e:	2317      	movs	r3, #23
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	5c9b      	ldrb	r3, [r3, r2]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_DMA_Start_IT+0x24>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e04f      	b.n	8002e44 <HAL_DMA_Start_IT+0xc4>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	2101      	movs	r1, #1
 8002daa:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2221      	movs	r2, #33	; 0x21
 8002db0:	5c9b      	ldrb	r3, [r3, r2]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d13a      	bne.n	8002e2e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2221      	movs	r2, #33	; 0x21
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	438a      	bics	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f954 	bl	800308a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	210e      	movs	r1, #14
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e00f      	b.n	8002e1c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	210a      	movs	r1, #10
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2104      	movs	r1, #4
 8002e18:	438a      	bics	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2101      	movs	r1, #1
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e007      	b.n	8002e3e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	2100      	movs	r1, #0
 8002e34:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e36:	2317      	movs	r3, #23
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002e3e:	2317      	movs	r3, #23
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	781b      	ldrb	r3, [r3, #0]
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b006      	add	sp, #24
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2221      	movs	r2, #33	; 0x21
 8002e58:	5c9b      	ldrb	r3, [r3, r2]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d008      	beq.n	8002e72 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2204      	movs	r2, #4
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e020      	b.n	8002eb4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	210e      	movs	r1, #14
 8002e7e:	438a      	bics	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	438a      	bics	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4091      	lsls	r1, r2
 8002e9e:	000a      	movs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	210f      	movs	r1, #15
 8002ec6:	187b      	adds	r3, r7, r1
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2221      	movs	r2, #33	; 0x21
 8002ed0:	5c9b      	ldrb	r3, [r3, r2]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d006      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2204      	movs	r2, #4
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002ede:	187b      	adds	r3, r7, r1
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e028      	b.n	8002f38 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	210e      	movs	r1, #14
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	438a      	bics	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4091      	lsls	r1, r2
 8002f12:	000a      	movs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2221      	movs	r2, #33	; 0x21
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	0010      	movs	r0, r2
 8002f36:	4798      	blx	r3
    }
  }
  return status;
 8002f38:	230f      	movs	r3, #15
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b004      	add	sp, #16
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2204      	movs	r2, #4
 8002f64:	409a      	lsls	r2, r3
 8002f66:	0013      	movs	r3, r2
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d024      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x72>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2204      	movs	r2, #4
 8002f72:	4013      	ands	r3, r2
 8002f74:	d020      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d107      	bne.n	8002f92 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2104      	movs	r1, #4
 8002f8e:	438a      	bics	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	4091      	lsls	r1, r2
 8002f9e:	000a      	movs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d100      	bne.n	8002fac <HAL_DMA_IRQHandler+0x66>
 8002faa:	e06a      	b.n	8003082 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	0010      	movs	r0, r2
 8002fb4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fb6:	e064      	b.n	8003082 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d02b      	beq.n	8003020 <HAL_DMA_IRQHandler+0xda>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d027      	beq.n	8003020 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d10b      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	210a      	movs	r1, #10
 8002fe8:	438a      	bics	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2221      	movs	r2, #33	; 0x21
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	4091      	lsls	r1, r2
 8003000:	000a      	movs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	2100      	movs	r1, #0
 800300a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d036      	beq.n	8003082 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	0010      	movs	r0, r2
 800301c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800301e:	e030      	b.n	8003082 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2208      	movs	r2, #8
 8003026:	409a      	lsls	r2, r3
 8003028:	0013      	movs	r3, r2
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	d028      	beq.n	8003082 <HAL_DMA_IRQHandler+0x13c>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2208      	movs	r2, #8
 8003034:	4013      	ands	r3, r2
 8003036:	d024      	beq.n	8003082 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	210e      	movs	r1, #14
 8003044:	438a      	bics	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	2101      	movs	r1, #1
 8003052:	4091      	lsls	r1, r2
 8003054:	000a      	movs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2221      	movs	r2, #33	; 0x21
 8003062:	2101      	movs	r1, #1
 8003064:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	0010      	movs	r0, r2
 800307e:	4798      	blx	r3
    }
  }
}
 8003080:	e7ff      	b.n	8003082 <HAL_DMA_IRQHandler+0x13c>
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b004      	add	sp, #16
 8003088:	bd80      	pop	{r7, pc}

0800308a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	2101      	movs	r1, #1
 80030a2:	4091      	lsls	r1, r2
 80030a4:	000a      	movs	r2, r1
 80030a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d108      	bne.n	80030ca <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030c8:	e007      	b.n	80030da <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	60da      	str	r2, [r3, #12]
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b004      	add	sp, #16
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a08      	ldr	r2, [pc, #32]	; (8003114 <DMA_CalcBaseAndBitshift+0x30>)
 80030f2:	4694      	mov	ip, r2
 80030f4:	4463      	add	r3, ip
 80030f6:	2114      	movs	r1, #20
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7fd f805 	bl	8000108 <__udivsi3>
 80030fe:	0003      	movs	r3, r0
 8003100:	009a      	lsls	r2, r3, #2
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a03      	ldr	r2, [pc, #12]	; (8003118 <DMA_CalcBaseAndBitshift+0x34>)
 800310a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}
 8003114:	bffdfff8 	.word	0xbffdfff8
 8003118:	40020000 	.word	0x40020000

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312a:	e149      	b.n	80033c0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d100      	bne.n	8003144 <HAL_GPIO_Init+0x28>
 8003142:	e13a      	b.n	80033ba <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2203      	movs	r2, #3
 800314a:	4013      	ands	r3, r2
 800314c:	2b01      	cmp	r3, #1
 800314e:	d005      	beq.n	800315c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2203      	movs	r2, #3
 8003156:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003158:	2b02      	cmp	r3, #2
 800315a:	d130      	bne.n	80031be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	409a      	lsls	r2, r3
 800316a:	0013      	movs	r3, r2
 800316c:	43da      	mvns	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	409a      	lsls	r2, r3
 800317e:	0013      	movs	r3, r2
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003192:	2201      	movs	r2, #1
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	409a      	lsls	r2, r3
 8003198:	0013      	movs	r3, r2
 800319a:	43da      	mvns	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	2201      	movs	r2, #1
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
 80031b0:	0013      	movs	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2203      	movs	r2, #3
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d017      	beq.n	80031fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	2203      	movs	r2, #3
 80031d6:	409a      	lsls	r2, r3
 80031d8:	0013      	movs	r3, r2
 80031da:	43da      	mvns	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	409a      	lsls	r2, r3
 80031ec:	0013      	movs	r3, r2
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2203      	movs	r2, #3
 8003200:	4013      	ands	r3, r2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d123      	bne.n	800324e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	08da      	lsrs	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3208      	adds	r2, #8
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	58d3      	ldr	r3, [r2, r3]
 8003212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2207      	movs	r2, #7
 8003218:	4013      	ands	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	220f      	movs	r2, #15
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	43da      	mvns	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2107      	movs	r1, #7
 8003232:	400b      	ands	r3, r1
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	409a      	lsls	r2, r3
 8003238:	0013      	movs	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	08da      	lsrs	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3208      	adds	r2, #8
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	6939      	ldr	r1, [r7, #16]
 800324c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	409a      	lsls	r2, r3
 800325c:	0013      	movs	r3, r2
 800325e:	43da      	mvns	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2203      	movs	r2, #3
 800326c:	401a      	ands	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	0013      	movs	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	23c0      	movs	r3, #192	; 0xc0
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	4013      	ands	r3, r2
 800328c:	d100      	bne.n	8003290 <HAL_GPIO_Init+0x174>
 800328e:	e094      	b.n	80033ba <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003290:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <HAL_GPIO_Init+0x2bc>)
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_GPIO_Init+0x2bc>)
 8003296:	2101      	movs	r1, #1
 8003298:	430a      	orrs	r2, r1
 800329a:	619a      	str	r2, [r3, #24]
 800329c:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <HAL_GPIO_Init+0x2bc>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2201      	movs	r2, #1
 80032a2:	4013      	ands	r3, r2
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032a8:	4a4c      	ldr	r2, [pc, #304]	; (80033dc <HAL_GPIO_Init+0x2c0>)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	589b      	ldr	r3, [r3, r2]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2203      	movs	r2, #3
 80032ba:	4013      	ands	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	220f      	movs	r2, #15
 80032c0:	409a      	lsls	r2, r3
 80032c2:	0013      	movs	r3, r2
 80032c4:	43da      	mvns	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	2390      	movs	r3, #144	; 0x90
 80032d0:	05db      	lsls	r3, r3, #23
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d00d      	beq.n	80032f2 <HAL_GPIO_Init+0x1d6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a41      	ldr	r2, [pc, #260]	; (80033e0 <HAL_GPIO_Init+0x2c4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <HAL_GPIO_Init+0x1d2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a40      	ldr	r2, [pc, #256]	; (80033e4 <HAL_GPIO_Init+0x2c8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_GPIO_Init+0x1ce>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x1d8>
 80032ea:	2305      	movs	r3, #5
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x1d8>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x1d8>
 80032f2:	2300      	movs	r3, #0
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	2103      	movs	r1, #3
 80032f8:	400a      	ands	r2, r1
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003304:	4935      	ldr	r1, [pc, #212]	; (80033dc <HAL_GPIO_Init+0x2c0>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003312:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43da      	mvns	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	035b      	lsls	r3, r3, #13
 800332a:	4013      	ands	r3, r2
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43da      	mvns	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	039b      	lsls	r3, r3, #14
 8003354:	4013      	ands	r3, r2
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003360:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	43da      	mvns	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	029b      	lsls	r3, r3, #10
 800337e:	4013      	ands	r3, r2
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800338a:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	43da      	mvns	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	025b      	lsls	r3, r3, #9
 80033a8:	4013      	ands	r3, r2
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3301      	adds	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	40da      	lsrs	r2, r3
 80033c8:	1e13      	subs	r3, r2, #0
 80033ca:	d000      	beq.n	80033ce <HAL_GPIO_Init+0x2b2>
 80033cc:	e6ae      	b.n	800312c <HAL_GPIO_Init+0x10>
  } 
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b006      	add	sp, #24
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40010000 	.word	0x40010000
 80033e0:	48000400 	.word	0x48000400
 80033e4:	48000800 	.word	0x48000800
 80033e8:	40010400 	.word	0x40010400

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	0008      	movs	r0, r1
 80033f6:	0011      	movs	r1, r2
 80033f8:	1cbb      	adds	r3, r7, #2
 80033fa:	1c02      	adds	r2, r0, #0
 80033fc:	801a      	strh	r2, [r3, #0]
 80033fe:	1c7b      	adds	r3, r7, #1
 8003400:	1c0a      	adds	r2, r1, #0
 8003402:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003404:	1c7b      	adds	r3, r7, #1
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800340c:	1cbb      	adds	r3, r7, #2
 800340e:	881a      	ldrh	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003414:	e003      	b.n	800341e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003416:	1cbb      	adds	r3, r7, #2
 8003418:	881a      	ldrh	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f000 fb76 	bl	8003b28 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2201      	movs	r2, #1
 8003442:	4013      	ands	r3, r2
 8003444:	d100      	bne.n	8003448 <HAL_RCC_OscConfig+0x20>
 8003446:	e08e      	b.n	8003566 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003448:	4bc5      	ldr	r3, [pc, #788]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	220c      	movs	r2, #12
 800344e:	4013      	ands	r3, r2
 8003450:	2b04      	cmp	r3, #4
 8003452:	d00e      	beq.n	8003472 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003454:	4bc2      	ldr	r3, [pc, #776]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	220c      	movs	r2, #12
 800345a:	4013      	ands	r3, r2
 800345c:	2b08      	cmp	r3, #8
 800345e:	d117      	bne.n	8003490 <HAL_RCC_OscConfig+0x68>
 8003460:	4bbf      	ldr	r3, [pc, #764]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	23c0      	movs	r3, #192	; 0xc0
 8003466:	025b      	lsls	r3, r3, #9
 8003468:	401a      	ands	r2, r3
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	025b      	lsls	r3, r3, #9
 800346e:	429a      	cmp	r2, r3
 8003470:	d10e      	bne.n	8003490 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003472:	4bbb      	ldr	r3, [pc, #748]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	029b      	lsls	r3, r3, #10
 800347a:	4013      	ands	r3, r2
 800347c:	d100      	bne.n	8003480 <HAL_RCC_OscConfig+0x58>
 800347e:	e071      	b.n	8003564 <HAL_RCC_OscConfig+0x13c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d000      	beq.n	800348a <HAL_RCC_OscConfig+0x62>
 8003488:	e06c      	b.n	8003564 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f000 fb4c 	bl	8003b28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_OscConfig+0x80>
 8003498:	4bb1      	ldr	r3, [pc, #708]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4bb0      	ldr	r3, [pc, #704]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 800349e:	2180      	movs	r1, #128	; 0x80
 80034a0:	0249      	lsls	r1, r1, #9
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e02f      	b.n	8003508 <HAL_RCC_OscConfig+0xe0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10c      	bne.n	80034ca <HAL_RCC_OscConfig+0xa2>
 80034b0:	4bab      	ldr	r3, [pc, #684]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4baa      	ldr	r3, [pc, #680]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034b6:	49ab      	ldr	r1, [pc, #684]	; (8003764 <HAL_RCC_OscConfig+0x33c>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	4ba8      	ldr	r3, [pc, #672]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4ba7      	ldr	r3, [pc, #668]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034c2:	49a9      	ldr	r1, [pc, #676]	; (8003768 <HAL_RCC_OscConfig+0x340>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e01e      	b.n	8003508 <HAL_RCC_OscConfig+0xe0>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d10e      	bne.n	80034f0 <HAL_RCC_OscConfig+0xc8>
 80034d2:	4ba3      	ldr	r3, [pc, #652]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4ba2      	ldr	r3, [pc, #648]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	02c9      	lsls	r1, r1, #11
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	4b9f      	ldr	r3, [pc, #636]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b9e      	ldr	r3, [pc, #632]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034e6:	2180      	movs	r1, #128	; 0x80
 80034e8:	0249      	lsls	r1, r1, #9
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0xe0>
 80034f0:	4b9b      	ldr	r3, [pc, #620]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b9a      	ldr	r3, [pc, #616]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034f6:	499b      	ldr	r1, [pc, #620]	; (8003764 <HAL_RCC_OscConfig+0x33c>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	4b98      	ldr	r3, [pc, #608]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b97      	ldr	r3, [pc, #604]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003502:	4999      	ldr	r1, [pc, #612]	; (8003768 <HAL_RCC_OscConfig+0x340>)
 8003504:	400a      	ands	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d014      	beq.n	800353a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fe fc9c 	bl	8001e4c <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351a:	f7fe fc97 	bl	8001e4c <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b64      	cmp	r3, #100	; 0x64
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e2fd      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352c:	4b8c      	ldr	r3, [pc, #560]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	029b      	lsls	r3, r3, #10
 8003534:	4013      	ands	r3, r2
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0xf2>
 8003538:	e015      	b.n	8003566 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fe fc87 	bl	8001e4c <HAL_GetTick>
 800353e:	0003      	movs	r3, r0
 8003540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003544:	f7fe fc82 	bl	8001e4c <HAL_GetTick>
 8003548:	0002      	movs	r2, r0
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e2e8      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	4b82      	ldr	r3, [pc, #520]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	029b      	lsls	r3, r3, #10
 800355e:	4013      	ands	r3, r2
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x11c>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2202      	movs	r2, #2
 800356c:	4013      	ands	r3, r2
 800356e:	d100      	bne.n	8003572 <HAL_RCC_OscConfig+0x14a>
 8003570:	e06c      	b.n	800364c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003572:	4b7b      	ldr	r3, [pc, #492]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	220c      	movs	r2, #12
 8003578:	4013      	ands	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800357c:	4b78      	ldr	r3, [pc, #480]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	220c      	movs	r2, #12
 8003582:	4013      	ands	r3, r2
 8003584:	2b08      	cmp	r3, #8
 8003586:	d11f      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1a0>
 8003588:	4b75      	ldr	r3, [pc, #468]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	23c0      	movs	r3, #192	; 0xc0
 800358e:	025b      	lsls	r3, r3, #9
 8003590:	401a      	ands	r2, r3
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	429a      	cmp	r2, r3
 8003598:	d116      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	4b71      	ldr	r3, [pc, #452]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2202      	movs	r2, #2
 80035a0:	4013      	ands	r3, r2
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_OscConfig+0x188>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e2bb      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b6b      	ldr	r3, [pc, #428]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	22f8      	movs	r2, #248	; 0xf8
 80035b6:	4393      	bics	r3, r2
 80035b8:	0019      	movs	r1, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00da      	lsls	r2, r3, #3
 80035c0:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	e041      	b.n	800364c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d024      	beq.n	800361a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d0:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b62      	ldr	r3, [pc, #392]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80035d6:	2101      	movs	r1, #1
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe fc36 	bl	8001e4c <HAL_GetTick>
 80035e0:	0003      	movs	r3, r0
 80035e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fe fc31 	bl	8001e4c <HAL_GetTick>
 80035ea:	0002      	movs	r2, r0
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e297      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2202      	movs	r2, #2
 80035fe:	4013      	ands	r3, r2
 8003600:	d0f1      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003602:	4b57      	ldr	r3, [pc, #348]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	22f8      	movs	r2, #248	; 0xf8
 8003608:	4393      	bics	r3, r2
 800360a:	0019      	movs	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	00da      	lsls	r2, r3, #3
 8003612:	4b53      	ldr	r3, [pc, #332]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e018      	b.n	800364c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361a:	4b51      	ldr	r3, [pc, #324]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4b50      	ldr	r3, [pc, #320]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003620:	2101      	movs	r1, #1
 8003622:	438a      	bics	r2, r1
 8003624:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe fc11 	bl	8001e4c <HAL_GetTick>
 800362a:	0003      	movs	r3, r0
 800362c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003630:	f7fe fc0c 	bl	8001e4c <HAL_GetTick>
 8003634:	0002      	movs	r2, r0
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e272      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2202      	movs	r2, #2
 8003648:	4013      	ands	r3, r2
 800364a:	d1f1      	bne.n	8003630 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2208      	movs	r2, #8
 8003652:	4013      	ands	r3, r2
 8003654:	d036      	beq.n	80036c4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d019      	beq.n	8003692 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003664:	2101      	movs	r1, #1
 8003666:	430a      	orrs	r2, r1
 8003668:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7fe fbef 	bl	8001e4c <HAL_GetTick>
 800366e:	0003      	movs	r3, r0
 8003670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003674:	f7fe fbea 	bl	8001e4c <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e250      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	4b36      	ldr	r3, [pc, #216]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2202      	movs	r2, #2
 800368c:	4013      	ands	r3, r2
 800368e:	d0f1      	beq.n	8003674 <HAL_RCC_OscConfig+0x24c>
 8003690:	e018      	b.n	80036c4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003692:	4b33      	ldr	r3, [pc, #204]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003696:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003698:	2101      	movs	r1, #1
 800369a:	438a      	bics	r2, r1
 800369c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fe fbd5 	bl	8001e4c <HAL_GetTick>
 80036a2:	0003      	movs	r3, r0
 80036a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a8:	f7fe fbd0 	bl	8001e4c <HAL_GetTick>
 80036ac:	0002      	movs	r2, r0
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e236      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ba:	4b29      	ldr	r3, [pc, #164]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2202      	movs	r2, #2
 80036c0:	4013      	ands	r3, r2
 80036c2:	d1f1      	bne.n	80036a8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2204      	movs	r2, #4
 80036ca:	4013      	ands	r3, r2
 80036cc:	d100      	bne.n	80036d0 <HAL_RCC_OscConfig+0x2a8>
 80036ce:	e0b5      	b.n	800383c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d0:	201f      	movs	r0, #31
 80036d2:	183b      	adds	r3, r7, r0
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	055b      	lsls	r3, r3, #21
 80036e0:	4013      	ands	r3, r2
 80036e2:	d110      	bne.n	8003706 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	0549      	lsls	r1, r1, #21
 80036ee:	430a      	orrs	r2, r1
 80036f0:	61da      	str	r2, [r3, #28]
 80036f2:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	055b      	lsls	r3, r3, #21
 80036fa:	4013      	ands	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003700:	183b      	adds	r3, r7, r0
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_OscConfig+0x344>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4013      	ands	r3, r2
 8003710:	d11a      	bne.n	8003748 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <HAL_RCC_OscConfig+0x344>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_RCC_OscConfig+0x344>)
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0049      	lsls	r1, r1, #1
 800371c:	430a      	orrs	r2, r1
 800371e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003720:	f7fe fb94 	bl	8001e4c <HAL_GetTick>
 8003724:	0003      	movs	r3, r0
 8003726:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372a:	f7fe fb8f 	bl	8001e4c <HAL_GetTick>
 800372e:	0002      	movs	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b64      	cmp	r3, #100	; 0x64
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e1f5      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_OscConfig+0x344>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4013      	ands	r3, r2
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10f      	bne.n	8003770 <HAL_RCC_OscConfig+0x348>
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	4b02      	ldr	r3, [pc, #8]	; (8003760 <HAL_RCC_OscConfig+0x338>)
 8003756:	2101      	movs	r1, #1
 8003758:	430a      	orrs	r2, r1
 800375a:	621a      	str	r2, [r3, #32]
 800375c:	e036      	b.n	80037cc <HAL_RCC_OscConfig+0x3a4>
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	40021000 	.word	0x40021000
 8003764:	fffeffff 	.word	0xfffeffff
 8003768:	fffbffff 	.word	0xfffbffff
 800376c:	40007000 	.word	0x40007000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10c      	bne.n	8003792 <HAL_RCC_OscConfig+0x36a>
 8003778:	4bca      	ldr	r3, [pc, #808]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	4bc9      	ldr	r3, [pc, #804]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800377e:	2101      	movs	r1, #1
 8003780:	438a      	bics	r2, r1
 8003782:	621a      	str	r2, [r3, #32]
 8003784:	4bc7      	ldr	r3, [pc, #796]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	4bc6      	ldr	r3, [pc, #792]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800378a:	2104      	movs	r1, #4
 800378c:	438a      	bics	r2, r1
 800378e:	621a      	str	r2, [r3, #32]
 8003790:	e01c      	b.n	80037cc <HAL_RCC_OscConfig+0x3a4>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b05      	cmp	r3, #5
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x38c>
 800379a:	4bc2      	ldr	r3, [pc, #776]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	4bc1      	ldr	r3, [pc, #772]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80037a0:	2104      	movs	r1, #4
 80037a2:	430a      	orrs	r2, r1
 80037a4:	621a      	str	r2, [r3, #32]
 80037a6:	4bbf      	ldr	r3, [pc, #764]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	4bbe      	ldr	r3, [pc, #760]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80037ac:	2101      	movs	r1, #1
 80037ae:	430a      	orrs	r2, r1
 80037b0:	621a      	str	r2, [r3, #32]
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0x3a4>
 80037b4:	4bbb      	ldr	r3, [pc, #748]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	4bba      	ldr	r3, [pc, #744]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	438a      	bics	r2, r1
 80037be:	621a      	str	r2, [r3, #32]
 80037c0:	4bb8      	ldr	r3, [pc, #736]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	4bb7      	ldr	r3, [pc, #732]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80037c6:	2104      	movs	r1, #4
 80037c8:	438a      	bics	r2, r1
 80037ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d014      	beq.n	80037fe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d4:	f7fe fb3a 	bl	8001e4c <HAL_GetTick>
 80037d8:	0003      	movs	r3, r0
 80037da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	e009      	b.n	80037f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fb35 	bl	8001e4c <HAL_GetTick>
 80037e2:	0002      	movs	r2, r0
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	4aaf      	ldr	r2, [pc, #700]	; (8003aa8 <HAL_RCC_OscConfig+0x680>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e19a      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	4bac      	ldr	r3, [pc, #688]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	2202      	movs	r2, #2
 80037f8:	4013      	ands	r3, r2
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x3b6>
 80037fc:	e013      	b.n	8003826 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fe:	f7fe fb25 	bl	8001e4c <HAL_GetTick>
 8003802:	0003      	movs	r3, r0
 8003804:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003806:	e009      	b.n	800381c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe fb20 	bl	8001e4c <HAL_GetTick>
 800380c:	0002      	movs	r2, r0
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	4aa5      	ldr	r2, [pc, #660]	; (8003aa8 <HAL_RCC_OscConfig+0x680>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e185      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	4ba1      	ldr	r3, [pc, #644]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	2202      	movs	r2, #2
 8003822:	4013      	ands	r3, r2
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003826:	231f      	movs	r3, #31
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003830:	4b9c      	ldr	r3, [pc, #624]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	4b9b      	ldr	r3, [pc, #620]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003836:	499d      	ldr	r1, [pc, #628]	; (8003aac <HAL_RCC_OscConfig+0x684>)
 8003838:	400a      	ands	r2, r1
 800383a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2210      	movs	r2, #16
 8003842:	4013      	ands	r3, r2
 8003844:	d063      	beq.n	800390e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d12a      	bne.n	80038a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800384e:	4b95      	ldr	r3, [pc, #596]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003852:	4b94      	ldr	r3, [pc, #592]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003854:	2104      	movs	r1, #4
 8003856:	430a      	orrs	r2, r1
 8003858:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800385a:	4b92      	ldr	r3, [pc, #584]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800385c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385e:	4b91      	ldr	r3, [pc, #580]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003860:	2101      	movs	r1, #1
 8003862:	430a      	orrs	r2, r1
 8003864:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7fe faf1 	bl	8001e4c <HAL_GetTick>
 800386a:	0003      	movs	r3, r0
 800386c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003870:	f7fe faec 	bl	8001e4c <HAL_GetTick>
 8003874:	0002      	movs	r2, r0
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e152      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003882:	4b88      	ldr	r3, [pc, #544]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	2202      	movs	r2, #2
 8003888:	4013      	ands	r3, r2
 800388a:	d0f1      	beq.n	8003870 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800388c:	4b85      	ldr	r3, [pc, #532]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	22f8      	movs	r2, #248	; 0xf8
 8003892:	4393      	bics	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	00da      	lsls	r2, r3, #3
 800389c:	4b81      	ldr	r3, [pc, #516]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800389e:	430a      	orrs	r2, r1
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34
 80038a2:	e034      	b.n	800390e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	3305      	adds	r3, #5
 80038aa:	d111      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80038ac:	4b7d      	ldr	r3, [pc, #500]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80038ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b0:	4b7c      	ldr	r3, [pc, #496]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80038b2:	2104      	movs	r1, #4
 80038b4:	438a      	bics	r2, r1
 80038b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038b8:	4b7a      	ldr	r3, [pc, #488]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	22f8      	movs	r2, #248	; 0xf8
 80038be:	4393      	bics	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	00da      	lsls	r2, r3, #3
 80038c8:	4b76      	ldr	r3, [pc, #472]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80038ca:	430a      	orrs	r2, r1
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34
 80038ce:	e01e      	b.n	800390e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80038d0:	4b74      	ldr	r3, [pc, #464]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80038d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d4:	4b73      	ldr	r3, [pc, #460]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80038d6:	2104      	movs	r1, #4
 80038d8:	430a      	orrs	r2, r1
 80038da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80038dc:	4b71      	ldr	r3, [pc, #452]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80038de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e0:	4b70      	ldr	r3, [pc, #448]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	438a      	bics	r2, r1
 80038e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e8:	f7fe fab0 	bl	8001e4c <HAL_GetTick>
 80038ec:	0003      	movs	r3, r0
 80038ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038f2:	f7fe faab 	bl	8001e4c <HAL_GetTick>
 80038f6:	0002      	movs	r2, r0
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e111      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003904:	4b67      	ldr	r3, [pc, #412]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	2202      	movs	r2, #2
 800390a:	4013      	ands	r3, r2
 800390c:	d1f1      	bne.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2220      	movs	r2, #32
 8003914:	4013      	ands	r3, r2
 8003916:	d05c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003918:	4b62      	ldr	r3, [pc, #392]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	220c      	movs	r2, #12
 800391e:	4013      	ands	r3, r2
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d00e      	beq.n	8003942 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003924:	4b5f      	ldr	r3, [pc, #380]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	220c      	movs	r2, #12
 800392a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800392c:	2b08      	cmp	r3, #8
 800392e:	d114      	bne.n	800395a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003930:	4b5c      	ldr	r3, [pc, #368]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	23c0      	movs	r3, #192	; 0xc0
 8003936:	025b      	lsls	r3, r3, #9
 8003938:	401a      	ands	r2, r3
 800393a:	23c0      	movs	r3, #192	; 0xc0
 800393c:	025b      	lsls	r3, r3, #9
 800393e:	429a      	cmp	r2, r3
 8003940:	d10b      	bne.n	800395a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003942:	4b58      	ldr	r3, [pc, #352]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	4013      	ands	r3, r2
 800394c:	d040      	beq.n	80039d0 <HAL_RCC_OscConfig+0x5a8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d03c      	beq.n	80039d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0e6      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01b      	beq.n	800399a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003962:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003966:	4b4f      	ldr	r3, [pc, #316]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	0249      	lsls	r1, r1, #9
 800396c:	430a      	orrs	r2, r1
 800396e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fe fa6c 	bl	8001e4c <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800397a:	f7fe fa67 	bl	8001e4c <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0cd      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800398e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	029b      	lsls	r3, r3, #10
 8003994:	4013      	ands	r3, r2
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x552>
 8003998:	e01b      	b.n	80039d2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800399a:	4b42      	ldr	r3, [pc, #264]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 800399c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80039a0:	4943      	ldr	r1, [pc, #268]	; (8003ab0 <HAL_RCC_OscConfig+0x688>)
 80039a2:	400a      	ands	r2, r1
 80039a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fe fa51 	bl	8001e4c <HAL_GetTick>
 80039aa:	0003      	movs	r3, r0
 80039ac:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039b0:	f7fe fa4c 	bl	8001e4c <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0b2      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80039c2:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80039c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	4013      	ands	r3, r2
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x588>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80039d0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d100      	bne.n	80039dc <HAL_RCC_OscConfig+0x5b4>
 80039da:	e0a4      	b.n	8003b26 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039dc:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	220c      	movs	r2, #12
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d100      	bne.n	80039ea <HAL_RCC_OscConfig+0x5c2>
 80039e8:	e078      	b.n	8003adc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d14c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 80039f8:	492e      	ldr	r1, [pc, #184]	; (8003ab4 <HAL_RCC_OscConfig+0x68c>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fe fa25 	bl	8001e4c <HAL_GetTick>
 8003a02:	0003      	movs	r3, r0
 8003a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fa20 	bl	8001e4c <HAL_GetTick>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e086      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	049b      	lsls	r3, r3, #18
 8003a22:	4013      	ands	r3, r2
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a36:	430a      	orrs	r2, r1
 8003a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	; (8003ab8 <HAL_RCC_OscConfig+0x690>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	0019      	movs	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	0449      	lsls	r1, r1, #17
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fe f9f3 	bl	8001e4c <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fe f9ee 	bl	8001e4c <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e054      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	049b      	lsls	r3, r3, #18
 8003a86:	4013      	ands	r3, r2
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x644>
 8003a8a:	e04c      	b.n	8003b26 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <HAL_RCC_OscConfig+0x67c>)
 8003a92:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <HAL_RCC_OscConfig+0x68c>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe f9d8 	bl	8001e4c <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa0:	e015      	b.n	8003ace <HAL_RCC_OscConfig+0x6a6>
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	00001388 	.word	0x00001388
 8003aac:	efffffff 	.word	0xefffffff
 8003ab0:	fffeffff 	.word	0xfffeffff
 8003ab4:	feffffff 	.word	0xfeffffff
 8003ab8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fe f9c6 	bl	8001e4c <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e02c      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ace:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_RCC_OscConfig+0x708>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	049b      	lsls	r3, r3, #18
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x694>
 8003ada:	e024      	b.n	8003b26 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e01f      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_RCC_OscConfig+0x708>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_RCC_OscConfig+0x708>)
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	23c0      	movs	r3, #192	; 0xc0
 8003af8:	025b      	lsls	r3, r3, #9
 8003afa:	401a      	ands	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d10e      	bne.n	8003b22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	220f      	movs	r2, #15
 8003b08:	401a      	ands	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	23f0      	movs	r3, #240	; 0xf0
 8003b16:	039b      	lsls	r3, r3, #14
 8003b18:	401a      	ands	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b008      	add	sp, #32
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000

08003b34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0bf      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <HAL_RCC_ClockConfig+0x19c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	4013      	ands	r3, r2
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d911      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b5e      	ldr	r3, [pc, #376]	; (8003cd0 <HAL_RCC_ClockConfig+0x19c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	4b5b      	ldr	r3, [pc, #364]	; (8003cd0 <HAL_RCC_ClockConfig+0x19c>)
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b68:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCC_ClockConfig+0x19c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4013      	ands	r3, r2
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0a6      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	4013      	ands	r3, r2
 8003b82:	d015      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2204      	movs	r2, #4
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d006      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b8e:	4b51      	ldr	r3, [pc, #324]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003b94:	21e0      	movs	r1, #224	; 0xe0
 8003b96:	00c9      	lsls	r1, r1, #3
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9c:	4b4d      	ldr	r3, [pc, #308]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	22f0      	movs	r2, #240	; 0xf0
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	4b4a      	ldr	r3, [pc, #296]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d04c      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	4b44      	ldr	r3, [pc, #272]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	029b      	lsls	r3, r3, #10
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d120      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e07a      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	4b3e      	ldr	r3, [pc, #248]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	049b      	lsls	r3, r3, #18
 8003be2:	4013      	ands	r3, r2
 8003be4:	d114      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e06e      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003bf2:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e062      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2202      	movs	r2, #2
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e05b      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c10:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2203      	movs	r2, #3
 8003c16:	4393      	bics	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c24:	f7fe f912 	bl	8001e4c <HAL_GetTick>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2c:	e009      	b.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2e:	f7fe f90d 	bl	8001e4c <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <HAL_RCC_ClockConfig+0x1a4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e042      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	220c      	movs	r2, #12
 8003c48:	401a      	ands	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1ec      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_RCC_ClockConfig+0x19c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d211      	bcs.n	8003c86 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_RCC_ClockConfig+0x19c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2201      	movs	r2, #1
 8003c68:	4393      	bics	r3, r2
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <HAL_RCC_ClockConfig+0x19c>)
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c74:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <HAL_RCC_ClockConfig+0x19c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e020      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d009      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c90:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <HAL_RCC_ClockConfig+0x1a8>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	0019      	movs	r1, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ca4:	f000 f820 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003ca8:	0001      	movs	r1, r0
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <HAL_RCC_ClockConfig+0x1ac>)
 8003cb6:	5cd3      	ldrb	r3, [r2, r3]
 8003cb8:	000a      	movs	r2, r1
 8003cba:	40da      	lsrs	r2, r3
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	f7fe f87d 	bl	8001dc0 <HAL_InitTick>
  
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40022000 	.word	0x40022000
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	00001388 	.word	0x00001388
 8003cdc:	fffff8ff 	.word	0xfffff8ff
 8003ce0:	08005c4c 	.word	0x08005c4c
 8003ce4:	20000004 	.word	0x20000004

08003ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d02:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	220c      	movs	r2, #12
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d048      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0xbc>
 8003d12:	d84a      	bhi.n	8003daa <HAL_RCC_GetSysClockFreq+0xc2>
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d002      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x36>
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d004      	beq.n	8003d26 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d1c:	e045      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d1e:	23fa      	movs	r3, #250	; 0xfa
 8003d20:	03db      	lsls	r3, r3, #15
 8003d22:	613b      	str	r3, [r7, #16]
      break;
 8003d24:	e044      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xc8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	0c9b      	lsrs	r3, r3, #18
 8003d2a:	220f      	movs	r2, #15
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	4a24      	ldr	r2, [pc, #144]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003d30:	5cd3      	ldrb	r3, [r2, r3]
 8003d32:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d34:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	220f      	movs	r2, #15
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003d3e:	5cd3      	ldrb	r3, [r2, r3]
 8003d40:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	23c0      	movs	r3, #192	; 0xc0
 8003d46:	025b      	lsls	r3, r3, #9
 8003d48:	401a      	ands	r2, r3
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	025b      	lsls	r3, r3, #9
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d10a      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	23fa      	movs	r3, #250	; 0xfa
 8003d56:	03d8      	lsls	r0, r3, #15
 8003d58:	f7fc f9d6 	bl	8000108 <__udivsi3>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	001a      	movs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4353      	muls	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e01a      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0xb6>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	23c0      	movs	r3, #192	; 0xc0
 8003d6c:	025b      	lsls	r3, r3, #9
 8003d6e:	401a      	ands	r2, r3
 8003d70:	23c0      	movs	r3, #192	; 0xc0
 8003d72:	025b      	lsls	r3, r3, #9
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d109      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0xa4>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	4813      	ldr	r0, [pc, #76]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003d7c:	f7fc f9c4 	bl	8000108 <__udivsi3>
 8003d80:	0003      	movs	r3, r0
 8003d82:	001a      	movs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4353      	muls	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0xb6>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	480f      	ldr	r0, [pc, #60]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xe4>)
 8003d90:	f7fc f9ba 	bl	8000108 <__udivsi3>
 8003d94:	0003      	movs	r3, r0
 8003d96:	001a      	movs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4353      	muls	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	613b      	str	r3, [r7, #16]
      break;
 8003da2:	e005      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xc8>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003da4:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003da6:	613b      	str	r3, [r7, #16]
      break;
 8003da8:	e002      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xc8>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xe4>)
 8003dac:	613b      	str	r3, [r7, #16]
      break;
 8003dae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003db0:	693b      	ldr	r3, [r7, #16]
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b006      	add	sp, #24
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	08005c64 	.word	0x08005c64
 8003dc4:	08005c74 	.word	0x08005c74
 8003dc8:	02dc6c00 	.word	0x02dc6c00
 8003dcc:	007a1200 	.word	0x007a1200

08003dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd4:	4b02      	ldr	r3, [pc, #8]	; (8003de0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	20000004 	.word	0x20000004

08003de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003de8:	f7ff fff2 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003dec:	0001      	movs	r1, r0
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	2207      	movs	r2, #7
 8003df6:	4013      	ands	r3, r2
 8003df8:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dfa:	5cd3      	ldrb	r3, [r2, r3]
 8003dfc:	40d9      	lsrs	r1, r3
 8003dfe:	000b      	movs	r3, r1
}    
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	08005c5c 	.word	0x08005c5c

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	025b      	lsls	r3, r3, #9
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003e2c:	e08e      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2017      	movs	r0, #23
 8003e30:	183b      	adds	r3, r7, r0
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b67      	ldr	r3, [pc, #412]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	055b      	lsls	r3, r3, #21
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d110      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b64      	ldr	r3, [pc, #400]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	0549      	lsls	r1, r1, #21
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	61da      	str	r2, [r3, #28]
 8003e50:	4b60      	ldr	r3, [pc, #384]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	055b      	lsls	r3, r3, #21
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5e:	183b      	adds	r3, r7, r0
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	4b5c      	ldr	r3, [pc, #368]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d11a      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e70:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b58      	ldr	r3, [pc, #352]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e76:	2180      	movs	r1, #128	; 0x80
 8003e78:	0049      	lsls	r1, r1, #1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fd ffe5 	bl	8001e4c <HAL_GetTick>
 8003e82:	0003      	movs	r3, r0
 8003e84:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	e008      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fd ffe0 	bl	8001e4c <HAL_GetTick>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e097      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4b4f      	ldr	r3, [pc, #316]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea6:	4b4b      	ldr	r3, [pc, #300]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ea8:	6a1a      	ldr	r2, [r3, #32]
 8003eaa:	23c0      	movs	r3, #192	; 0xc0
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d034      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	23c0      	movs	r3, #192	; 0xc0
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d02c      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec8:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4a43      	ldr	r2, [pc, #268]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ed2:	4b40      	ldr	r3, [pc, #256]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ed4:	6a1a      	ldr	r2, [r3, #32]
 8003ed6:	4b3f      	ldr	r3, [pc, #252]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	0249      	lsls	r1, r1, #9
 8003edc:	430a      	orrs	r2, r1
 8003ede:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee0:	4b3c      	ldr	r3, [pc, #240]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ee2:	6a1a      	ldr	r2, [r3, #32]
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ee6:	493e      	ldr	r1, [pc, #248]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efa:	f7fd ffa7 	bl	8001e4c <HAL_GetTick>
 8003efe:	0003      	movs	r3, r0
 8003f00:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	e009      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fd ffa2 	bl	8001e4c <HAL_GetTick>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	4a35      	ldr	r2, [pc, #212]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e058      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	4b2e      	ldr	r3, [pc, #184]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f22:	4b2c      	ldr	r3, [pc, #176]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	4a2d      	ldr	r2, [pc, #180]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f32:	430a      	orrs	r2, r1
 8003f34:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f36:	2317      	movs	r3, #23
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f46:	4928      	ldr	r1, [pc, #160]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f48:	400a      	ands	r2, r1
 8003f4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	4013      	ands	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f56:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	4393      	bics	r3, r2
 8003f5e:	0019      	movs	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f66:	430a      	orrs	r2, r1
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	4013      	ands	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f74:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	2210      	movs	r2, #16
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f84:	430a      	orrs	r2, r1
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	029b      	lsls	r3, r3, #10
 8003f90:	4013      	ands	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	2280      	movs	r2, #128	; 0x80
 8003f9a:	4393      	bics	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fb4:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	2240      	movs	r2, #64	; 0x40
 8003fba:	4393      	bics	r3, r2
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b006      	add	sp, #24
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40007000 	.word	0x40007000
 8003fdc:	fffffcff 	.word	0xfffffcff
 8003fe0:	fffeffff 	.word	0xfffeffff
 8003fe4:	00001388 	.word	0x00001388
 8003fe8:	efffffff 	.word	0xefffffff

08003fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e042      	b.n	8004084 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	223d      	movs	r2, #61	; 0x3d
 8004002:	5c9b      	ldrb	r3, [r3, r2]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d107      	bne.n	800401a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	223c      	movs	r2, #60	; 0x3c
 800400e:	2100      	movs	r1, #0
 8004010:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f7fd fcab 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	223d      	movs	r2, #61	; 0x3d
 800401e:	2102      	movs	r1, #2
 8004020:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	0019      	movs	r1, r3
 800402c:	0010      	movs	r0, r2
 800402e:	f000 fa83 	bl	8004538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2246      	movs	r2, #70	; 0x46
 8004036:	2101      	movs	r1, #1
 8004038:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	223e      	movs	r2, #62	; 0x3e
 800403e:	2101      	movs	r1, #1
 8004040:	5499      	strb	r1, [r3, r2]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	223f      	movs	r2, #63	; 0x3f
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2240      	movs	r2, #64	; 0x40
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2241      	movs	r2, #65	; 0x41
 8004056:	2101      	movs	r1, #1
 8004058:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2242      	movs	r2, #66	; 0x42
 800405e:	2101      	movs	r1, #1
 8004060:	5499      	strb	r1, [r3, r2]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2243      	movs	r2, #67	; 0x43
 8004066:	2101      	movs	r1, #1
 8004068:	5499      	strb	r1, [r3, r2]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2244      	movs	r2, #68	; 0x44
 800406e:	2101      	movs	r1, #1
 8004070:	5499      	strb	r1, [r3, r2]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2245      	movs	r2, #69	; 0x45
 8004076:	2101      	movs	r1, #1
 8004078:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	223d      	movs	r2, #61	; 0x3d
 800407e:	2101      	movs	r1, #1
 8004080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	223d      	movs	r2, #61	; 0x3d
 8004098:	5c9b      	ldrb	r3, [r3, r2]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d001      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e036      	b.n	8004112 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	223d      	movs	r2, #61	; 0x3d
 80040a8:	2102      	movs	r1, #2
 80040aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2101      	movs	r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a16      	ldr	r2, [pc, #88]	; (800411c <HAL_TIM_Base_Start_IT+0x90>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00a      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x50>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	05db      	lsls	r3, r3, #23
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x50>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a12      	ldr	r2, [pc, #72]	; (8004120 <HAL_TIM_Base_Start_IT+0x94>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d111      	bne.n	8004100 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2207      	movs	r2, #7
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d010      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	430a      	orrs	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	e007      	b.n	8004110 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2101      	movs	r1, #1
 800410c:	430a      	orrs	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	0018      	movs	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	b004      	add	sp, #16
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40000400 	.word	0x40000400

08004124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2202      	movs	r2, #2
 8004134:	4013      	ands	r3, r2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d124      	bne.n	8004184 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2202      	movs	r2, #2
 8004142:	4013      	ands	r3, r2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d11d      	bne.n	8004184 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2203      	movs	r2, #3
 800414e:	4252      	negs	r2, r2
 8004150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2203      	movs	r2, #3
 8004160:	4013      	ands	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	0018      	movs	r0, r3
 8004168:	f000 f9ce 	bl	8004508 <HAL_TIM_IC_CaptureCallback>
 800416c:	e007      	b.n	800417e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	0018      	movs	r0, r3
 8004172:	f000 f9c1 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0018      	movs	r0, r3
 800417a:	f000 f9cd 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2204      	movs	r2, #4
 800418c:	4013      	ands	r3, r2
 800418e:	2b04      	cmp	r3, #4
 8004190:	d125      	bne.n	80041de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2204      	movs	r2, #4
 800419a:	4013      	ands	r3, r2
 800419c:	2b04      	cmp	r3, #4
 800419e:	d11e      	bne.n	80041de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2205      	movs	r2, #5
 80041a6:	4252      	negs	r2, r2
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	23c0      	movs	r3, #192	; 0xc0
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4013      	ands	r3, r2
 80041bc:	d004      	beq.n	80041c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 f9a1 	bl	8004508 <HAL_TIM_IC_CaptureCallback>
 80041c6:	e007      	b.n	80041d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 f994 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 f9a0 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2208      	movs	r2, #8
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d124      	bne.n	8004236 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2208      	movs	r2, #8
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d11d      	bne.n	8004236 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2209      	movs	r2, #9
 8004200:	4252      	negs	r2, r2
 8004202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2204      	movs	r2, #4
 8004208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	2203      	movs	r2, #3
 8004212:	4013      	ands	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 f975 	bl	8004508 <HAL_TIM_IC_CaptureCallback>
 800421e:	e007      	b.n	8004230 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f968 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 f974 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2210      	movs	r2, #16
 800423e:	4013      	ands	r3, r2
 8004240:	2b10      	cmp	r3, #16
 8004242:	d125      	bne.n	8004290 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2210      	movs	r2, #16
 800424c:	4013      	ands	r3, r2
 800424e:	2b10      	cmp	r3, #16
 8004250:	d11e      	bne.n	8004290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2211      	movs	r2, #17
 8004258:	4252      	negs	r2, r2
 800425a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2208      	movs	r2, #8
 8004260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	23c0      	movs	r3, #192	; 0xc0
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4013      	ands	r3, r2
 800426e:	d004      	beq.n	800427a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0018      	movs	r0, r3
 8004274:	f000 f948 	bl	8004508 <HAL_TIM_IC_CaptureCallback>
 8004278:	e007      	b.n	800428a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	0018      	movs	r0, r3
 800427e:	f000 f93b 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f000 f947 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2201      	movs	r2, #1
 8004298:	4013      	ands	r3, r2
 800429a:	2b01      	cmp	r3, #1
 800429c:	d10f      	bne.n	80042be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d108      	bne.n	80042be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2202      	movs	r2, #2
 80042b2:	4252      	negs	r2, r2
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fd fac9 	bl	8001850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2280      	movs	r2, #128	; 0x80
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d10f      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2280      	movs	r2, #128	; 0x80
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b80      	cmp	r3, #128	; 0x80
 80042d8:	d108      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2281      	movs	r2, #129	; 0x81
 80042e0:	4252      	negs	r2, r2
 80042e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 fa96 	bl	8004818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d10f      	bne.n	800431a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2240      	movs	r2, #64	; 0x40
 8004302:	4013      	ands	r3, r2
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d108      	bne.n	800431a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2241      	movs	r2, #65	; 0x41
 800430e:	4252      	negs	r2, r2
 8004310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	0018      	movs	r0, r3
 8004316:	f000 f907 	bl	8004528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2220      	movs	r2, #32
 8004322:	4013      	ands	r3, r2
 8004324:	2b20      	cmp	r3, #32
 8004326:	d10f      	bne.n	8004348 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	4013      	ands	r3, r2
 8004332:	2b20      	cmp	r3, #32
 8004334:	d108      	bne.n	8004348 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2221      	movs	r2, #33	; 0x21
 800433c:	4252      	negs	r2, r2
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	0018      	movs	r0, r3
 8004344:	f000 fa60 	bl	8004808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	230f      	movs	r3, #15
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	223c      	movs	r2, #60	; 0x3c
 8004366:	5c9b      	ldrb	r3, [r3, r2]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIM_ConfigClockSource+0x20>
 800436c:	2302      	movs	r3, #2
 800436e:	e0bc      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x19a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	223c      	movs	r2, #60	; 0x3c
 8004374:	2101      	movs	r1, #1
 8004376:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	223d      	movs	r2, #61	; 0x3d
 800437c:	2102      	movs	r1, #2
 800437e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2277      	movs	r2, #119	; 0x77
 800438c:	4393      	bics	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a58      	ldr	r2, [pc, #352]	; (80044f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004394:	4013      	ands	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2280      	movs	r2, #128	; 0x80
 80043a6:	0192      	lsls	r2, r2, #6
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d040      	beq.n	800442e <HAL_TIM_ConfigClockSource+0xde>
 80043ac:	2280      	movs	r2, #128	; 0x80
 80043ae:	0192      	lsls	r2, r2, #6
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d900      	bls.n	80043b6 <HAL_TIM_ConfigClockSource+0x66>
 80043b4:	e088      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x178>
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	0152      	lsls	r2, r2, #5
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d100      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0x70>
 80043be:	e088      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x182>
 80043c0:	2280      	movs	r2, #128	; 0x80
 80043c2:	0152      	lsls	r2, r2, #5
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d900      	bls.n	80043ca <HAL_TIM_ConfigClockSource+0x7a>
 80043c8:	e07e      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x178>
 80043ca:	2b70      	cmp	r3, #112	; 0x70
 80043cc:	d018      	beq.n	8004400 <HAL_TIM_ConfigClockSource+0xb0>
 80043ce:	d900      	bls.n	80043d2 <HAL_TIM_ConfigClockSource+0x82>
 80043d0:	e07a      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x178>
 80043d2:	2b60      	cmp	r3, #96	; 0x60
 80043d4:	d04f      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x126>
 80043d6:	d900      	bls.n	80043da <HAL_TIM_ConfigClockSource+0x8a>
 80043d8:	e076      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x178>
 80043da:	2b50      	cmp	r3, #80	; 0x50
 80043dc:	d03b      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x106>
 80043de:	d900      	bls.n	80043e2 <HAL_TIM_ConfigClockSource+0x92>
 80043e0:	e072      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x178>
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d057      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x146>
 80043e6:	d900      	bls.n	80043ea <HAL_TIM_ConfigClockSource+0x9a>
 80043e8:	e06e      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x178>
 80043ea:	2b30      	cmp	r3, #48	; 0x30
 80043ec:	d063      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x166>
 80043ee:	d86b      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x178>
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d060      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x166>
 80043f4:	d868      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x178>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d05d      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x166>
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d05b      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x166>
 80043fe:	e063      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004410:	f000 f982 	bl	8004718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2277      	movs	r2, #119	; 0x77
 8004420:	4313      	orrs	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	609a      	str	r2, [r3, #8]
      break;
 800442c:	e052      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800443e:	f000 f96b 	bl	8004718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	01c9      	lsls	r1, r1, #7
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
      break;
 8004454:	e03e      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004462:	001a      	movs	r2, r3
 8004464:	f000 f8de 	bl	8004624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2150      	movs	r1, #80	; 0x50
 800446e:	0018      	movs	r0, r3
 8004470:	f000 f938 	bl	80046e4 <TIM_ITRx_SetConfig>
      break;
 8004474:	e02e      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004482:	001a      	movs	r2, r3
 8004484:	f000 f8fc 	bl	8004680 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2160      	movs	r1, #96	; 0x60
 800448e:	0018      	movs	r0, r3
 8004490:	f000 f928 	bl	80046e4 <TIM_ITRx_SetConfig>
      break;
 8004494:	e01e      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a2:	001a      	movs	r2, r3
 80044a4:	f000 f8be 	bl	8004624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2140      	movs	r1, #64	; 0x40
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 f918 	bl	80046e4 <TIM_ITRx_SetConfig>
      break;
 80044b4:	e00e      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	0019      	movs	r1, r3
 80044c0:	0010      	movs	r0, r2
 80044c2:	f000 f90f 	bl	80046e4 <TIM_ITRx_SetConfig>
      break;
 80044c6:	e005      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80044c8:	230f      	movs	r3, #15
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
      break;
 80044d0:	e000      	b.n	80044d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80044d2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	223d      	movs	r2, #61	; 0x3d
 80044d8:	2101      	movs	r1, #1
 80044da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	223c      	movs	r2, #60	; 0x3c
 80044e0:	2100      	movs	r1, #0
 80044e2:	5499      	strb	r1, [r3, r2]

  return status;
 80044e4:	230f      	movs	r3, #15
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	781b      	ldrb	r3, [r3, #0]
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b004      	add	sp, #16
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	ffff00ff 	.word	0xffff00ff

080044f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004500:	46c0      	nop			; (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004510:	46c0      	nop			; (mov r8, r8)
 8004512:	46bd      	mov	sp, r7
 8004514:	b002      	add	sp, #8
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004520:	46c0      	nop			; (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	b002      	add	sp, #8
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004530:	46c0      	nop			; (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b002      	add	sp, #8
 8004536:	bd80      	pop	{r7, pc}

08004538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a30      	ldr	r2, [pc, #192]	; (800460c <TIM_Base_SetConfig+0xd4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d008      	beq.n	8004562 <TIM_Base_SetConfig+0x2a>
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	05db      	lsls	r3, r3, #23
 8004556:	429a      	cmp	r2, r3
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0x2a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <TIM_Base_SetConfig+0xd8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2270      	movs	r2, #112	; 0x70
 8004566:	4393      	bics	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a25      	ldr	r2, [pc, #148]	; (800460c <TIM_Base_SetConfig+0xd4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d014      	beq.n	80045a6 <TIM_Base_SetConfig+0x6e>
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	2380      	movs	r3, #128	; 0x80
 8004580:	05db      	lsls	r3, r3, #23
 8004582:	429a      	cmp	r2, r3
 8004584:	d00f      	beq.n	80045a6 <TIM_Base_SetConfig+0x6e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a21      	ldr	r2, [pc, #132]	; (8004610 <TIM_Base_SetConfig+0xd8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00b      	beq.n	80045a6 <TIM_Base_SetConfig+0x6e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a20      	ldr	r2, [pc, #128]	; (8004614 <TIM_Base_SetConfig+0xdc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <TIM_Base_SetConfig+0x6e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <TIM_Base_SetConfig+0xe0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d003      	beq.n	80045a6 <TIM_Base_SetConfig+0x6e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1e      	ldr	r2, [pc, #120]	; (800461c <TIM_Base_SetConfig+0xe4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d108      	bne.n	80045b8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <TIM_Base_SetConfig+0xe8>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2280      	movs	r2, #128	; 0x80
 80045bc:	4393      	bics	r3, r2
 80045be:	001a      	movs	r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a0a      	ldr	r2, [pc, #40]	; (800460c <TIM_Base_SetConfig+0xd4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <TIM_Base_SetConfig+0xbe>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <TIM_Base_SetConfig+0xe0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_Base_SetConfig+0xbe>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a0a      	ldr	r2, [pc, #40]	; (800461c <TIM_Base_SetConfig+0xe4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d103      	bne.n	80045fe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	615a      	str	r2, [r3, #20]
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	46bd      	mov	sp, r7
 8004608:	b004      	add	sp, #16
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40002000 	.word	0x40002000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800
 8004620:	fffffcff 	.word	0xfffffcff

08004624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	2201      	movs	r2, #1
 800463c:	4393      	bics	r3, r2
 800463e:	001a      	movs	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	22f0      	movs	r2, #240	; 0xf0
 800464e:	4393      	bics	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	220a      	movs	r2, #10
 8004660:	4393      	bics	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	621a      	str	r2, [r3, #32]
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b006      	add	sp, #24
 800467e:	bd80      	pop	{r7, pc}

08004680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	2210      	movs	r2, #16
 8004692:	4393      	bics	r3, r2
 8004694:	001a      	movs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <TIM_TI2_ConfigInputStage+0x60>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	031b      	lsls	r3, r3, #12
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	22a0      	movs	r2, #160	; 0xa0
 80046bc:	4393      	bics	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b006      	add	sp, #24
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	ffff0fff 	.word	0xffff0fff

080046e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2270      	movs	r2, #112	; 0x70
 80046f8:	4393      	bics	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	2207      	movs	r2, #7
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	609a      	str	r2, [r3, #8]
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <TIM_ETR_SetConfig+0x3c>)
 8004730:	4013      	ands	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	021a      	lsls	r2, r3, #8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	431a      	orrs	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4313      	orrs	r3, r2
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b006      	add	sp, #24
 8004752:	bd80      	pop	{r7, pc}
 8004754:	ffff00ff 	.word	0xffff00ff

08004758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	223c      	movs	r2, #60	; 0x3c
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e042      	b.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	223c      	movs	r2, #60	; 0x3c
 8004774:	2101      	movs	r1, #1
 8004776:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	223d      	movs	r2, #61	; 0x3d
 800477c:	2102      	movs	r1, #2
 800477e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2270      	movs	r2, #112	; 0x70
 8004794:	4393      	bics	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a14      	ldr	r2, [pc, #80]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00a      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	05db      	lsls	r3, r3, #23
 80047bc:	429a      	cmp	r2, r3
 80047be:	d004      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10c      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	4393      	bics	r3, r2
 80047d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	223d      	movs	r2, #61	; 0x3d
 80047e8:	2101      	movs	r1, #1
 80047ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	223c      	movs	r2, #60	; 0x3c
 80047f0:	2100      	movs	r1, #0
 80047f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	0018      	movs	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b004      	add	sp, #16
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40000400 	.word	0x40000400

08004808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004810:	46c0      	nop			; (mov r8, r8)
 8004812:	46bd      	mov	sp, r7
 8004814:	b002      	add	sp, #8
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004820:	46c0      	nop			; (mov r8, r8)
 8004822:	46bd      	mov	sp, r7
 8004824:	b002      	add	sp, #8
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e044      	b.n	80048c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2278      	movs	r2, #120	; 0x78
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	0018      	movs	r0, r3
 800484e:	f7fd f8b3 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2224      	movs	r2, #36	; 0x24
 8004856:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2101      	movs	r1, #1
 8004864:	438a      	bics	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 fbc8 	bl	8005000 <UART_SetConfig>
 8004870:	0003      	movs	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e024      	b.n	80048c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0018      	movs	r0, r3
 8004886:	f000 fcfb 	bl	8005280 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	490d      	ldr	r1, [pc, #52]	; (80048cc <HAL_UART_Init+0xa4>)
 8004896:	400a      	ands	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	212a      	movs	r1, #42	; 0x2a
 80048a6:	438a      	bics	r2, r1
 80048a8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2101      	movs	r1, #1
 80048b6:	430a      	orrs	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 fd93 	bl	80053e8 <UART_CheckIdleState>
 80048c2:	0003      	movs	r3, r0
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	ffffb7ff 	.word	0xffffb7ff

080048d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	1dbb      	adds	r3, r7, #6
 80048de:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d000      	beq.n	80048ea <HAL_UART_Transmit+0x1a>
 80048e8:	e08d      	b.n	8004a06 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_UART_Transmit+0x28>
 80048f0:	1dbb      	adds	r3, r7, #6
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e085      	b.n	8004a08 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	015b      	lsls	r3, r3, #5
 8004904:	429a      	cmp	r2, r3
 8004906:	d109      	bne.n	800491c <HAL_UART_Transmit+0x4c>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2201      	movs	r2, #1
 8004914:	4013      	ands	r3, r2
 8004916:	d001      	beq.n	800491c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e075      	b.n	8004a08 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2284      	movs	r2, #132	; 0x84
 8004920:	2100      	movs	r1, #0
 8004922:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2221      	movs	r2, #33	; 0x21
 8004928:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492a:	f7fd fa8f 	bl	8001e4c <HAL_GetTick>
 800492e:	0003      	movs	r3, r0
 8004930:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1dba      	adds	r2, r7, #6
 8004936:	2150      	movs	r1, #80	; 0x50
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1dba      	adds	r2, r7, #6
 8004940:	2152      	movs	r1, #82	; 0x52
 8004942:	8812      	ldrh	r2, [r2, #0]
 8004944:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	015b      	lsls	r3, r3, #5
 800494e:	429a      	cmp	r2, r3
 8004950:	d108      	bne.n	8004964 <HAL_UART_Transmit+0x94>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e003      	b.n	800496c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800496c:	e030      	b.n	80049d0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	0013      	movs	r3, r2
 8004978:	2200      	movs	r2, #0
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	f000 fddc 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d004      	beq.n	800498e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e03c      	b.n	8004a08 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	881a      	ldrh	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	05d2      	lsls	r2, r2, #23
 800499e:	0dd2      	lsrs	r2, r2, #23
 80049a0:	b292      	uxth	r2, r2
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	3302      	adds	r3, #2
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e008      	b.n	80049be <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	b292      	uxth	r2, r2
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	3301      	adds	r3, #1
 80049bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2252      	movs	r2, #82	; 0x52
 80049c2:	5a9b      	ldrh	r3, [r3, r2]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b299      	uxth	r1, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2252      	movs	r2, #82	; 0x52
 80049ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2252      	movs	r2, #82	; 0x52
 80049d4:	5a9b      	ldrh	r3, [r3, r2]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1c8      	bne.n	800496e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	0013      	movs	r3, r2
 80049e6:	2200      	movs	r2, #0
 80049e8:	2140      	movs	r1, #64	; 0x40
 80049ea:	f000 fda5 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 80049ee:	1e03      	subs	r3, r0, #0
 80049f0:	d004      	beq.n	80049fc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e005      	b.n	8004a08 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
  }
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b008      	add	sp, #32
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b0ab      	sub	sp, #172	; 0xac
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	22a4      	movs	r2, #164	; 0xa4
 8004a20:	18b9      	adds	r1, r7, r2
 8004a22:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	20a0      	movs	r0, #160	; 0xa0
 8004a2c:	1839      	adds	r1, r7, r0
 8004a2e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	219c      	movs	r1, #156	; 0x9c
 8004a38:	1879      	adds	r1, r7, r1
 8004a3a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a3c:	0011      	movs	r1, r2
 8004a3e:	18bb      	adds	r3, r7, r2
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a99      	ldr	r2, [pc, #612]	; (8004ca8 <HAL_UART_IRQHandler+0x298>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	2298      	movs	r2, #152	; 0x98
 8004a48:	18bc      	adds	r4, r7, r2
 8004a4a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004a4c:	18bb      	adds	r3, r7, r2
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d114      	bne.n	8004a7e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a54:	187b      	adds	r3, r7, r1
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d00f      	beq.n	8004a7e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a5e:	183b      	adds	r3, r7, r0
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2220      	movs	r2, #32
 8004a64:	4013      	ands	r3, r2
 8004a66:	d00a      	beq.n	8004a7e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d100      	bne.n	8004a72 <HAL_UART_IRQHandler+0x62>
 8004a70:	e29e      	b.n	8004fb0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	0010      	movs	r0, r2
 8004a7a:	4798      	blx	r3
      }
      return;
 8004a7c:	e298      	b.n	8004fb0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a7e:	2398      	movs	r3, #152	; 0x98
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d100      	bne.n	8004a8a <HAL_UART_IRQHandler+0x7a>
 8004a88:	e114      	b.n	8004cb4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a8a:	239c      	movs	r3, #156	; 0x9c
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	4013      	ands	r3, r2
 8004a94:	d106      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a96:	23a0      	movs	r3, #160	; 0xa0
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a83      	ldr	r2, [pc, #524]	; (8004cac <HAL_UART_IRQHandler+0x29c>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d100      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x94>
 8004aa2:	e107      	b.n	8004cb4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aa4:	23a4      	movs	r3, #164	; 0xa4
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4013      	ands	r3, r2
 8004aae:	d012      	beq.n	8004ad6 <HAL_UART_IRQHandler+0xc6>
 8004ab0:	23a0      	movs	r3, #160	; 0xa0
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4013      	ands	r3, r2
 8004abc:	d00b      	beq.n	8004ad6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2284      	movs	r2, #132	; 0x84
 8004aca:	589b      	ldr	r3, [r3, r2]
 8004acc:	2201      	movs	r2, #1
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2184      	movs	r1, #132	; 0x84
 8004ad4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ad6:	23a4      	movs	r3, #164	; 0xa4
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2202      	movs	r2, #2
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d011      	beq.n	8004b06 <HAL_UART_IRQHandler+0xf6>
 8004ae2:	239c      	movs	r3, #156	; 0x9c
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4013      	ands	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2202      	movs	r2, #2
 8004af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2284      	movs	r2, #132	; 0x84
 8004afa:	589b      	ldr	r3, [r3, r2]
 8004afc:	2204      	movs	r2, #4
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2184      	movs	r1, #132	; 0x84
 8004b04:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b06:	23a4      	movs	r3, #164	; 0xa4
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d011      	beq.n	8004b36 <HAL_UART_IRQHandler+0x126>
 8004b12:	239c      	movs	r3, #156	; 0x9c
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2204      	movs	r2, #4
 8004b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2284      	movs	r2, #132	; 0x84
 8004b2a:	589b      	ldr	r3, [r3, r2]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2184      	movs	r1, #132	; 0x84
 8004b34:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b36:	23a4      	movs	r3, #164	; 0xa4
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d017      	beq.n	8004b72 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b42:	23a0      	movs	r3, #160	; 0xa0
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d105      	bne.n	8004b5a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b4e:	239c      	movs	r3, #156	; 0x9c
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2201      	movs	r2, #1
 8004b56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b58:	d00b      	beq.n	8004b72 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2208      	movs	r2, #8
 8004b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2284      	movs	r2, #132	; 0x84
 8004b66:	589b      	ldr	r3, [r3, r2]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2184      	movs	r1, #132	; 0x84
 8004b70:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b72:	23a4      	movs	r3, #164	; 0xa4
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x198>
 8004b80:	23a0      	movs	r3, #160	; 0xa0
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	04db      	lsls	r3, r3, #19
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	0112      	lsls	r2, r2, #4
 8004b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2284      	movs	r2, #132	; 0x84
 8004b9c:	589b      	ldr	r3, [r3, r2]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2184      	movs	r1, #132	; 0x84
 8004ba6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2284      	movs	r2, #132	; 0x84
 8004bac:	589b      	ldr	r3, [r3, r2]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d100      	bne.n	8004bb4 <HAL_UART_IRQHandler+0x1a4>
 8004bb2:	e1ff      	b.n	8004fb4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bb4:	23a4      	movs	r3, #164	; 0xa4
 8004bb6:	18fb      	adds	r3, r7, r3
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bc0:	23a0      	movs	r3, #160	; 0xa0
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d008      	beq.n	8004bde <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	0010      	movs	r0, r2
 8004bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2284      	movs	r2, #132	; 0x84
 8004be2:	589b      	ldr	r3, [r3, r2]
 8004be4:	2194      	movs	r1, #148	; 0x94
 8004be6:	187a      	adds	r2, r7, r1
 8004be8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2240      	movs	r2, #64	; 0x40
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d004      	beq.n	8004c02 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bf8:	187b      	adds	r3, r7, r1
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2228      	movs	r2, #40	; 0x28
 8004bfe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c00:	d047      	beq.n	8004c92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 fdc5 	bl	8005794 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2240      	movs	r2, #64	; 0x40
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d137      	bne.n	8004c88 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c18:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c20:	2090      	movs	r0, #144	; 0x90
 8004c22:	183a      	adds	r2, r7, r0
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	2301      	movs	r3, #1
 8004c28:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2140      	movs	r1, #64	; 0x40
 8004c3e:	438a      	bics	r2, r1
 8004c40:	609a      	str	r2, [r3, #8]
 8004c42:	183b      	adds	r3, r7, r0
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c4a:	f383 8810 	msr	PRIMASK, r3
}
 8004c4e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d012      	beq.n	8004c7e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <HAL_UART_IRQHandler+0x2a0>)
 8004c5e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fe f929 	bl	8002ebc <HAL_DMA_Abort_IT>
 8004c6a:	1e03      	subs	r3, r0, #0
 8004c6c:	d01a      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c78:	0018      	movs	r0, r3
 8004c7a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	e012      	b.n	8004ca4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7fd f83d 	bl	8001d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c86:	e00d      	b.n	8004ca4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f7fd f838 	bl	8001d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c90:	e008      	b.n	8004ca4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	0018      	movs	r0, r3
 8004c96:	f7fd f833 	bl	8001d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2284      	movs	r2, #132	; 0x84
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004ca2:	e187      	b.n	8004fb4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	46c0      	nop			; (mov r8, r8)
    return;
 8004ca6:	e185      	b.n	8004fb4 <HAL_UART_IRQHandler+0x5a4>
 8004ca8:	0000080f 	.word	0x0000080f
 8004cac:	04000120 	.word	0x04000120
 8004cb0:	08005a4f 	.word	0x08005a4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d000      	beq.n	8004cbe <HAL_UART_IRQHandler+0x2ae>
 8004cbc:	e139      	b.n	8004f32 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004cbe:	23a4      	movs	r3, #164	; 0xa4
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d100      	bne.n	8004ccc <HAL_UART_IRQHandler+0x2bc>
 8004cca:	e132      	b.n	8004f32 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ccc:	23a0      	movs	r3, #160	; 0xa0
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2210      	movs	r2, #16
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d100      	bne.n	8004cda <HAL_UART_IRQHandler+0x2ca>
 8004cd8:	e12b      	b.n	8004f32 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2210      	movs	r2, #16
 8004ce0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2240      	movs	r2, #64	; 0x40
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d000      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x2e2>
 8004cf0:	e09f      	b.n	8004e32 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	217e      	movs	r1, #126	; 0x7e
 8004cfc:	187b      	adds	r3, r7, r1
 8004cfe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004d00:	187b      	adds	r3, r7, r1
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d100      	bne.n	8004d0a <HAL_UART_IRQHandler+0x2fa>
 8004d08:	e156      	b.n	8004fb8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2258      	movs	r2, #88	; 0x58
 8004d0e:	5a9b      	ldrh	r3, [r3, r2]
 8004d10:	187a      	adds	r2, r7, r1
 8004d12:	8812      	ldrh	r2, [r2, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d300      	bcc.n	8004d1a <HAL_UART_IRQHandler+0x30a>
 8004d18:	e14e      	b.n	8004fb8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	187a      	adds	r2, r7, r1
 8004d1e:	215a      	movs	r1, #90	; 0x5a
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d06f      	beq.n	8004e0e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d36:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d38:	2301      	movs	r3, #1
 8004d3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	f383 8810 	msr	PRIMASK, r3
}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	499e      	ldr	r1, [pc, #632]	; (8004fc8 <HAL_UART_IRQHandler+0x5b8>)
 8004d50:	400a      	ands	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	f383 8810 	msr	PRIMASK, r3
}
 8004d5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d60:	f3ef 8310 	mrs	r3, PRIMASK
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	677b      	str	r3, [r7, #116]	; 0x74
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d70:	f383 8810 	msr	PRIMASK, r3
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2101      	movs	r1, #1
 8004d82:	438a      	bics	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]
 8004d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8c:	f383 8810 	msr	PRIMASK, r3
}
 8004d90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d92:	f3ef 8310 	mrs	r3, PRIMASK
 8004d96:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	f383 8810 	msr	PRIMASK, r3
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2140      	movs	r1, #64	; 0x40
 8004db4:	438a      	bics	r2, r1
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dbe:	f383 8810 	msr	PRIMASK, r3
}
 8004dc2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2280      	movs	r2, #128	; 0x80
 8004dc8:	2120      	movs	r1, #32
 8004dca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ddc:	2301      	movs	r3, #1
 8004dde:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de2:	f383 8810 	msr	PRIMASK, r3
}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2110      	movs	r1, #16
 8004df4:	438a      	bics	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dfe:	f383 8810 	msr	PRIMASK, r3
}
 8004e02:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7fe f81f 	bl	8002e4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2258      	movs	r2, #88	; 0x58
 8004e18:	5a9a      	ldrh	r2, [r3, r2]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	215a      	movs	r1, #90	; 0x5a
 8004e1e:	5a5b      	ldrh	r3, [r3, r1]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0011      	movs	r1, r2
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f7fc ff2a 	bl	8001c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e30:	e0c2      	b.n	8004fb8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2258      	movs	r2, #88	; 0x58
 8004e36:	5a99      	ldrh	r1, [r3, r2]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	225a      	movs	r2, #90	; 0x5a
 8004e3c:	5a9b      	ldrh	r3, [r3, r2]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	208e      	movs	r0, #142	; 0x8e
 8004e42:	183b      	adds	r3, r7, r0
 8004e44:	1a8a      	subs	r2, r1, r2
 8004e46:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	225a      	movs	r2, #90	; 0x5a
 8004e4c:	5a9b      	ldrh	r3, [r3, r2]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d100      	bne.n	8004e56 <HAL_UART_IRQHandler+0x446>
 8004e54:	e0b2      	b.n	8004fbc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004e56:	183b      	adds	r3, r7, r0
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d100      	bne.n	8004e60 <HAL_UART_IRQHandler+0x450>
 8004e5e:	e0ad      	b.n	8004fbc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e60:	f3ef 8310 	mrs	r3, PRIMASK
 8004e64:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e66:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e68:	2488      	movs	r4, #136	; 0x88
 8004e6a:	193a      	adds	r2, r7, r4
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	2301      	movs	r3, #1
 8004e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f383 8810 	msr	PRIMASK, r3
}
 8004e78:	46c0      	nop			; (mov r8, r8)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4951      	ldr	r1, [pc, #324]	; (8004fcc <HAL_UART_IRQHandler+0x5bc>)
 8004e86:	400a      	ands	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	193b      	adds	r3, r7, r4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e98:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e9e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	2484      	movs	r4, #132	; 0x84
 8004ea2:	193a      	adds	r2, r7, r4
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f383 8810 	msr	PRIMASK, r3
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	438a      	bics	r2, r1
 8004ec0:	609a      	str	r2, [r3, #8]
 8004ec2:	193b      	adds	r3, r7, r4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	f383 8810 	msr	PRIMASK, r3
}
 8004ece:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2280      	movs	r2, #128	; 0x80
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eec:	2480      	movs	r4, #128	; 0x80
 8004eee:	193a      	adds	r2, r7, r4
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	f383 8810 	msr	PRIMASK, r3
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2110      	movs	r1, #16
 8004f0a:	438a      	bics	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	193b      	adds	r3, r7, r4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	f383 8810 	msr	PRIMASK, r3
}
 8004f1a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f22:	183b      	adds	r3, r7, r0
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0011      	movs	r1, r2
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f7fc feaa 	bl	8001c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f30:	e044      	b.n	8004fbc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f32:	23a4      	movs	r3, #164	; 0xa4
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	035b      	lsls	r3, r3, #13
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d010      	beq.n	8004f62 <HAL_UART_IRQHandler+0x552>
 8004f40:	239c      	movs	r3, #156	; 0x9c
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	03db      	lsls	r3, r3, #15
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	0352      	lsls	r2, r2, #13
 8004f56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 fdb9 	bl	8005ad2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f60:	e02f      	b.n	8004fc2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f62:	23a4      	movs	r3, #164	; 0xa4
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2280      	movs	r2, #128	; 0x80
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d00f      	beq.n	8004f8e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f6e:	23a0      	movs	r3, #160	; 0xa0
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2280      	movs	r2, #128	; 0x80
 8004f76:	4013      	ands	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01e      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	0010      	movs	r0, r2
 8004f8a:	4798      	blx	r3
    }
    return;
 8004f8c:	e018      	b.n	8004fc0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f8e:	23a4      	movs	r3, #164	; 0xa4
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2240      	movs	r2, #64	; 0x40
 8004f96:	4013      	ands	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x5b2>
 8004f9a:	23a0      	movs	r3, #160	; 0xa0
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2240      	movs	r2, #64	; 0x40
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d00d      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f000 fd67 	bl	8005a7c <UART_EndTransmit_IT>
    return;
 8004fae:	e008      	b.n	8004fc2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	e006      	b.n	8004fc2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004fb4:	46c0      	nop			; (mov r8, r8)
 8004fb6:	e004      	b.n	8004fc2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004fb8:	46c0      	nop			; (mov r8, r8)
 8004fba:	e002      	b.n	8004fc2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	e000      	b.n	8004fc2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004fc0:	46c0      	nop			; (mov r8, r8)
  }

}
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b02b      	add	sp, #172	; 0xac
 8004fc6:	bd90      	pop	{r4, r7, pc}
 8004fc8:	fffffeff 	.word	0xfffffeff
 8004fcc:	fffffedf 	.word	0xfffffedf

08004fd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fd8:	46c0      	nop			; (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b002      	add	sp, #8
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b002      	add	sp, #8
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ff8:	46c0      	nop			; (mov r8, r8)
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005008:	231e      	movs	r3, #30
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a8d      	ldr	r2, [pc, #564]	; (8005264 <UART_SetConfig+0x264>)
 8005030:	4013      	ands	r3, r2
 8005032:	0019      	movs	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	430a      	orrs	r2, r1
 800503c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a88      	ldr	r2, [pc, #544]	; (8005268 <UART_SetConfig+0x268>)
 8005046:	4013      	ands	r3, r2
 8005048:	0019      	movs	r1, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a7f      	ldr	r2, [pc, #508]	; (800526c <UART_SetConfig+0x26c>)
 800506e:	4013      	ands	r3, r2
 8005070:	0019      	movs	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	430a      	orrs	r2, r1
 800507a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a7b      	ldr	r2, [pc, #492]	; (8005270 <UART_SetConfig+0x270>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d127      	bne.n	80050d6 <UART_SetConfig+0xd6>
 8005086:	4b7b      	ldr	r3, [pc, #492]	; (8005274 <UART_SetConfig+0x274>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	2203      	movs	r2, #3
 800508c:	4013      	ands	r3, r2
 800508e:	2b03      	cmp	r3, #3
 8005090:	d00d      	beq.n	80050ae <UART_SetConfig+0xae>
 8005092:	d81b      	bhi.n	80050cc <UART_SetConfig+0xcc>
 8005094:	2b02      	cmp	r3, #2
 8005096:	d014      	beq.n	80050c2 <UART_SetConfig+0xc2>
 8005098:	d818      	bhi.n	80050cc <UART_SetConfig+0xcc>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <UART_SetConfig+0xa4>
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d00a      	beq.n	80050b8 <UART_SetConfig+0xb8>
 80050a2:	e013      	b.n	80050cc <UART_SetConfig+0xcc>
 80050a4:	231f      	movs	r3, #31
 80050a6:	18fb      	adds	r3, r7, r3
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e021      	b.n	80050f2 <UART_SetConfig+0xf2>
 80050ae:	231f      	movs	r3, #31
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	2202      	movs	r2, #2
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e01c      	b.n	80050f2 <UART_SetConfig+0xf2>
 80050b8:	231f      	movs	r3, #31
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	2204      	movs	r2, #4
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e017      	b.n	80050f2 <UART_SetConfig+0xf2>
 80050c2:	231f      	movs	r3, #31
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	2208      	movs	r2, #8
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	e012      	b.n	80050f2 <UART_SetConfig+0xf2>
 80050cc:	231f      	movs	r3, #31
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	2210      	movs	r2, #16
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e00d      	b.n	80050f2 <UART_SetConfig+0xf2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a67      	ldr	r2, [pc, #412]	; (8005278 <UART_SetConfig+0x278>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d104      	bne.n	80050ea <UART_SetConfig+0xea>
 80050e0:	231f      	movs	r3, #31
 80050e2:	18fb      	adds	r3, r7, r3
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e003      	b.n	80050f2 <UART_SetConfig+0xf2>
 80050ea:	231f      	movs	r3, #31
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	2210      	movs	r2, #16
 80050f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d15c      	bne.n	80051b8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80050fe:	231f      	movs	r3, #31
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d015      	beq.n	8005134 <UART_SetConfig+0x134>
 8005108:	dc18      	bgt.n	800513c <UART_SetConfig+0x13c>
 800510a:	2b04      	cmp	r3, #4
 800510c:	d00d      	beq.n	800512a <UART_SetConfig+0x12a>
 800510e:	dc15      	bgt.n	800513c <UART_SetConfig+0x13c>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <UART_SetConfig+0x11a>
 8005114:	2b02      	cmp	r3, #2
 8005116:	d005      	beq.n	8005124 <UART_SetConfig+0x124>
 8005118:	e010      	b.n	800513c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800511a:	f7fe fe63 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 800511e:	0003      	movs	r3, r0
 8005120:	61bb      	str	r3, [r7, #24]
        break;
 8005122:	e012      	b.n	800514a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005124:	4b55      	ldr	r3, [pc, #340]	; (800527c <UART_SetConfig+0x27c>)
 8005126:	61bb      	str	r3, [r7, #24]
        break;
 8005128:	e00f      	b.n	800514a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512a:	f7fe fddd 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 800512e:	0003      	movs	r3, r0
 8005130:	61bb      	str	r3, [r7, #24]
        break;
 8005132:	e00a      	b.n	800514a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	61bb      	str	r3, [r7, #24]
        break;
 800513a:	e006      	b.n	800514a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005140:	231e      	movs	r3, #30
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	2201      	movs	r2, #1
 8005146:	701a      	strb	r2, [r3, #0]
        break;
 8005148:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d100      	bne.n	8005152 <UART_SetConfig+0x152>
 8005150:	e07a      	b.n	8005248 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	005a      	lsls	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	18d2      	adds	r2, r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	0019      	movs	r1, r3
 8005164:	0010      	movs	r0, r2
 8005166:	f7fa ffcf 	bl	8000108 <__udivsi3>
 800516a:	0003      	movs	r3, r0
 800516c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b0f      	cmp	r3, #15
 8005172:	d91c      	bls.n	80051ae <UART_SetConfig+0x1ae>
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	025b      	lsls	r3, r3, #9
 800517a:	429a      	cmp	r2, r3
 800517c:	d217      	bcs.n	80051ae <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	b29a      	uxth	r2, r3
 8005182:	200e      	movs	r0, #14
 8005184:	183b      	adds	r3, r7, r0
 8005186:	210f      	movs	r1, #15
 8005188:	438a      	bics	r2, r1
 800518a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	b29b      	uxth	r3, r3
 8005192:	2207      	movs	r2, #7
 8005194:	4013      	ands	r3, r2
 8005196:	b299      	uxth	r1, r3
 8005198:	183b      	adds	r3, r7, r0
 800519a:	183a      	adds	r2, r7, r0
 800519c:	8812      	ldrh	r2, [r2, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	183a      	adds	r2, r7, r0
 80051a8:	8812      	ldrh	r2, [r2, #0]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	e04c      	b.n	8005248 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80051ae:	231e      	movs	r3, #30
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e047      	b.n	8005248 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b8:	231f      	movs	r3, #31
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d015      	beq.n	80051ee <UART_SetConfig+0x1ee>
 80051c2:	dc18      	bgt.n	80051f6 <UART_SetConfig+0x1f6>
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d00d      	beq.n	80051e4 <UART_SetConfig+0x1e4>
 80051c8:	dc15      	bgt.n	80051f6 <UART_SetConfig+0x1f6>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <UART_SetConfig+0x1d4>
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d005      	beq.n	80051de <UART_SetConfig+0x1de>
 80051d2:	e010      	b.n	80051f6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d4:	f7fe fe06 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 80051d8:	0003      	movs	r3, r0
 80051da:	61bb      	str	r3, [r7, #24]
        break;
 80051dc:	e012      	b.n	8005204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051de:	4b27      	ldr	r3, [pc, #156]	; (800527c <UART_SetConfig+0x27c>)
 80051e0:	61bb      	str	r3, [r7, #24]
        break;
 80051e2:	e00f      	b.n	8005204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e4:	f7fe fd80 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 80051e8:	0003      	movs	r3, r0
 80051ea:	61bb      	str	r3, [r7, #24]
        break;
 80051ec:	e00a      	b.n	8005204 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	61bb      	str	r3, [r7, #24]
        break;
 80051f4:	e006      	b.n	8005204 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051fa:	231e      	movs	r3, #30
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	2201      	movs	r2, #1
 8005200:	701a      	strb	r2, [r3, #0]
        break;
 8005202:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01e      	beq.n	8005248 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	085a      	lsrs	r2, r3, #1
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	18d2      	adds	r2, r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	0019      	movs	r1, r3
 800521a:	0010      	movs	r0, r2
 800521c:	f7fa ff74 	bl	8000108 <__udivsi3>
 8005220:	0003      	movs	r3, r0
 8005222:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2b0f      	cmp	r3, #15
 8005228:	d90a      	bls.n	8005240 <UART_SetConfig+0x240>
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	025b      	lsls	r3, r3, #9
 8005230:	429a      	cmp	r2, r3
 8005232:	d205      	bcs.n	8005240 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	e003      	b.n	8005248 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005240:	231e      	movs	r3, #30
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005254:	231e      	movs	r3, #30
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	781b      	ldrb	r3, [r3, #0]
}
 800525a:	0018      	movs	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	b008      	add	sp, #32
 8005260:	bd80      	pop	{r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	efff69f3 	.word	0xefff69f3
 8005268:	ffffcfff 	.word	0xffffcfff
 800526c:	fffff4ff 	.word	0xfffff4ff
 8005270:	40013800 	.word	0x40013800
 8005274:	40021000 	.word	0x40021000
 8005278:	40004400 	.word	0x40004400
 800527c:	007a1200 	.word	0x007a1200

08005280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	2201      	movs	r2, #1
 800528e:	4013      	ands	r3, r2
 8005290:	d00b      	beq.n	80052aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4a4a      	ldr	r2, [pc, #296]	; (80053c4 <UART_AdvFeatureConfig+0x144>)
 800529a:	4013      	ands	r3, r2
 800529c:	0019      	movs	r1, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	2202      	movs	r2, #2
 80052b0:	4013      	ands	r3, r2
 80052b2:	d00b      	beq.n	80052cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a43      	ldr	r2, [pc, #268]	; (80053c8 <UART_AdvFeatureConfig+0x148>)
 80052bc:	4013      	ands	r3, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	2204      	movs	r2, #4
 80052d2:	4013      	ands	r3, r2
 80052d4:	d00b      	beq.n	80052ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a3b      	ldr	r2, [pc, #236]	; (80053cc <UART_AdvFeatureConfig+0x14c>)
 80052de:	4013      	ands	r3, r2
 80052e0:	0019      	movs	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2208      	movs	r2, #8
 80052f4:	4013      	ands	r3, r2
 80052f6:	d00b      	beq.n	8005310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	4a34      	ldr	r2, [pc, #208]	; (80053d0 <UART_AdvFeatureConfig+0x150>)
 8005300:	4013      	ands	r3, r2
 8005302:	0019      	movs	r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2210      	movs	r2, #16
 8005316:	4013      	ands	r3, r2
 8005318:	d00b      	beq.n	8005332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a2c      	ldr	r2, [pc, #176]	; (80053d4 <UART_AdvFeatureConfig+0x154>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2220      	movs	r2, #32
 8005338:	4013      	ands	r3, r2
 800533a:	d00b      	beq.n	8005354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <UART_AdvFeatureConfig+0x158>)
 8005344:	4013      	ands	r3, r2
 8005346:	0019      	movs	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2240      	movs	r2, #64	; 0x40
 800535a:	4013      	ands	r3, r2
 800535c:	d01d      	beq.n	800539a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <UART_AdvFeatureConfig+0x15c>)
 8005366:	4013      	ands	r3, r2
 8005368:	0019      	movs	r1, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	035b      	lsls	r3, r3, #13
 800537e:	429a      	cmp	r2, r3
 8005380:	d10b      	bne.n	800539a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <UART_AdvFeatureConfig+0x160>)
 800538a:	4013      	ands	r3, r2
 800538c:	0019      	movs	r1, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	4013      	ands	r3, r2
 80053a2:	d00b      	beq.n	80053bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4a0e      	ldr	r2, [pc, #56]	; (80053e4 <UART_AdvFeatureConfig+0x164>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	0019      	movs	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }
}
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	fffdffff 	.word	0xfffdffff
 80053c8:	fffeffff 	.word	0xfffeffff
 80053cc:	fffbffff 	.word	0xfffbffff
 80053d0:	ffff7fff 	.word	0xffff7fff
 80053d4:	ffffefff 	.word	0xffffefff
 80053d8:	ffffdfff 	.word	0xffffdfff
 80053dc:	ffefffff 	.word	0xffefffff
 80053e0:	ff9fffff 	.word	0xff9fffff
 80053e4:	fff7ffff 	.word	0xfff7ffff

080053e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b092      	sub	sp, #72	; 0x48
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2284      	movs	r2, #132	; 0x84
 80053f4:	2100      	movs	r1, #0
 80053f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053f8:	f7fc fd28 	bl	8001e4c <HAL_GetTick>
 80053fc:	0003      	movs	r3, r0
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2208      	movs	r2, #8
 8005408:	4013      	ands	r3, r2
 800540a:	2b08      	cmp	r3, #8
 800540c:	d12c      	bne.n	8005468 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	0391      	lsls	r1, r2, #14
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4a46      	ldr	r2, [pc, #280]	; (8005530 <UART_CheckIdleState+0x148>)
 8005418:	9200      	str	r2, [sp, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	f000 f88c 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 8005420:	1e03      	subs	r3, r0, #0
 8005422:	d021      	beq.n	8005468 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005424:	f3ef 8310 	mrs	r3, PRIMASK
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800542c:	63bb      	str	r3, [r7, #56]	; 0x38
 800542e:	2301      	movs	r3, #1
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	f383 8810 	msr	PRIMASK, r3
}
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2180      	movs	r1, #128	; 0x80
 8005446:	438a      	bics	r2, r1
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	f383 8810 	msr	PRIMASK, r3
}
 8005454:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2278      	movs	r2, #120	; 0x78
 8005460:	2100      	movs	r1, #0
 8005462:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e05f      	b.n	8005528 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2204      	movs	r2, #4
 8005470:	4013      	ands	r3, r2
 8005472:	2b04      	cmp	r3, #4
 8005474:	d146      	bne.n	8005504 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	03d1      	lsls	r1, r2, #15
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4a2c      	ldr	r2, [pc, #176]	; (8005530 <UART_CheckIdleState+0x148>)
 8005480:	9200      	str	r2, [sp, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	f000 f858 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 8005488:	1e03      	subs	r3, r0, #0
 800548a:	d03b      	beq.n	8005504 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800548c:	f3ef 8310 	mrs	r3, PRIMASK
 8005490:	60fb      	str	r3, [r7, #12]
  return(result);
 8005492:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
 8005496:	2301      	movs	r3, #1
 8005498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f383 8810 	msr	PRIMASK, r3
}
 80054a0:	46c0      	nop			; (mov r8, r8)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4921      	ldr	r1, [pc, #132]	; (8005534 <UART_CheckIdleState+0x14c>)
 80054ae:	400a      	ands	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054be:	f3ef 8310 	mrs	r3, PRIMASK
 80054c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80054c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
 80054c8:	2301      	movs	r3, #1
 80054ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f383 8810 	msr	PRIMASK, r3
}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2101      	movs	r1, #1
 80054e0:	438a      	bics	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2280      	movs	r2, #128	; 0x80
 80054f4:	2120      	movs	r1, #32
 80054f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2278      	movs	r2, #120	; 0x78
 80054fc:	2100      	movs	r1, #0
 80054fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e011      	b.n	8005528 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2280      	movs	r2, #128	; 0x80
 800550e:	2120      	movs	r1, #32
 8005510:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2278      	movs	r2, #120	; 0x78
 8005522:	2100      	movs	r1, #0
 8005524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b010      	add	sp, #64	; 0x40
 800552e:	bd80      	pop	{r7, pc}
 8005530:	01ffffff 	.word	0x01ffffff
 8005534:	fffffedf 	.word	0xfffffedf

08005538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	1dfb      	adds	r3, r7, #7
 8005546:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005548:	e04b      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	3301      	adds	r3, #1
 800554e:	d048      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005550:	f7fc fc7c 	bl	8001e4c <HAL_GetTick>
 8005554:	0002      	movs	r2, r0
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	429a      	cmp	r2, r3
 800555e:	d302      	bcc.n	8005566 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e04b      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2204      	movs	r2, #4
 8005572:	4013      	ands	r3, r2
 8005574:	d035      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	2208      	movs	r2, #8
 800557e:	4013      	ands	r3, r2
 8005580:	2b08      	cmp	r3, #8
 8005582:	d111      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2208      	movs	r2, #8
 800558a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	0018      	movs	r0, r3
 8005590:	f000 f900 	bl	8005794 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2284      	movs	r2, #132	; 0x84
 8005598:	2108      	movs	r1, #8
 800559a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2278      	movs	r2, #120	; 0x78
 80055a0:	2100      	movs	r1, #0
 80055a2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e02c      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69da      	ldr	r2, [r3, #28]
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	401a      	ands	r2, r3
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d112      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2280      	movs	r2, #128	; 0x80
 80055c2:	0112      	lsls	r2, r2, #4
 80055c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	0018      	movs	r0, r3
 80055ca:	f000 f8e3 	bl	8005794 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2284      	movs	r2, #132	; 0x84
 80055d2:	2120      	movs	r1, #32
 80055d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2278      	movs	r2, #120	; 0x78
 80055da:	2100      	movs	r1, #0
 80055dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e00f      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	425a      	negs	r2, r3
 80055f2:	4153      	adcs	r3, r2
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	001a      	movs	r2, r3
 80055f8:	1dfb      	adds	r3, r7, #7
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d0a4      	beq.n	800554a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	0018      	movs	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	b004      	add	sp, #16
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b090      	sub	sp, #64	; 0x40
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	1dbb      	adds	r3, r7, #6
 8005618:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1dba      	adds	r2, r7, #6
 8005624:	2158      	movs	r1, #88	; 0x58
 8005626:	8812      	ldrh	r2, [r2, #0]
 8005628:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2284      	movs	r2, #132	; 0x84
 800562e:	2100      	movs	r1, #0
 8005630:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2280      	movs	r2, #128	; 0x80
 8005636:	2122      	movs	r1, #34	; 0x22
 8005638:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563e:	2b00      	cmp	r3, #0
 8005640:	d028      	beq.n	8005694 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005646:	4a3e      	ldr	r2, [pc, #248]	; (8005740 <UART_Start_Receive_DMA+0x134>)
 8005648:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564e:	4a3d      	ldr	r2, [pc, #244]	; (8005744 <UART_Start_Receive_DMA+0x138>)
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005656:	4a3c      	ldr	r2, [pc, #240]	; (8005748 <UART_Start_Receive_DMA+0x13c>)
 8005658:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565e:	2200      	movs	r2, #0
 8005660:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3324      	adds	r3, #36	; 0x24
 800566c:	0019      	movs	r1, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	001a      	movs	r2, r3
 8005674:	1dbb      	adds	r3, r7, #6
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	f7fd fb82 	bl	8002d80 <HAL_DMA_Start_IT>
 800567c:	1e03      	subs	r3, r0, #0
 800567e:	d009      	beq.n	8005694 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2284      	movs	r2, #132	; 0x84
 8005684:	2110      	movs	r1, #16
 8005686:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2280      	movs	r2, #128	; 0x80
 800568c:	2120      	movs	r1, #32
 800568e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e050      	b.n	8005736 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d019      	beq.n	80056d0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569c:	f3ef 8310 	mrs	r3, PRIMASK
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a6:	2301      	movs	r3, #1
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	f383 8810 	msr	PRIMASK, r3
}
 80056b0:	46c0      	nop			; (mov r8, r8)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2180      	movs	r1, #128	; 0x80
 80056be:	0049      	lsls	r1, r1, #1
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	f383 8810 	msr	PRIMASK, r3
}
 80056ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d0:	f3ef 8310 	mrs	r3, PRIMASK
 80056d4:	613b      	str	r3, [r7, #16]
  return(result);
 80056d6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056da:	2301      	movs	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f383 8810 	msr	PRIMASK, r3
}
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2101      	movs	r1, #1
 80056f2:	430a      	orrs	r2, r1
 80056f4:	609a      	str	r2, [r3, #8]
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f383 8810 	msr	PRIMASK, r3
}
 8005700:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005702:	f3ef 8310 	mrs	r3, PRIMASK
 8005706:	61fb      	str	r3, [r7, #28]
  return(result);
 8005708:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800570a:	637b      	str	r3, [r7, #52]	; 0x34
 800570c:	2301      	movs	r3, #1
 800570e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	f383 8810 	msr	PRIMASK, r3
}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2140      	movs	r1, #64	; 0x40
 8005724:	430a      	orrs	r2, r1
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	0018      	movs	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	b010      	add	sp, #64	; 0x40
 800573c:	bd80      	pop	{r7, pc}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	0800585d 	.word	0x0800585d
 8005744:	08005989 	.word	0x08005989
 8005748:	080059cb 	.word	0x080059cb

0800574c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005754:	f3ef 8310 	mrs	r3, PRIMASK
 8005758:	60bb      	str	r3, [r7, #8]
  return(result);
 800575a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	2301      	movs	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f383 8810 	msr	PRIMASK, r3
}
 8005768:	46c0      	nop			; (mov r8, r8)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	21c0      	movs	r1, #192	; 0xc0
 8005776:	438a      	bics	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f383 8810 	msr	PRIMASK, r3
}
 8005784:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	b006      	add	sp, #24
 8005792:	bd80      	pop	{r7, pc}

08005794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08e      	sub	sp, #56	; 0x38
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579c:	f3ef 8310 	mrs	r3, PRIMASK
 80057a0:	617b      	str	r3, [r7, #20]
  return(result);
 80057a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
 80057a6:	2301      	movs	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	f383 8810 	msr	PRIMASK, r3
}
 80057b0:	46c0      	nop			; (mov r8, r8)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4926      	ldr	r1, [pc, #152]	; (8005858 <UART_EndRxTransfer+0xc4>)
 80057be:	400a      	ands	r2, r1
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f383 8810 	msr	PRIMASK, r3
}
 80057cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ce:	f3ef 8310 	mrs	r3, PRIMASK
 80057d2:	623b      	str	r3, [r7, #32]
  return(result);
 80057d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d6:	633b      	str	r3, [r7, #48]	; 0x30
 80057d8:	2301      	movs	r3, #1
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	f383 8810 	msr	PRIMASK, r3
}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2101      	movs	r1, #1
 80057f0:	438a      	bics	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	f383 8810 	msr	PRIMASK, r3
}
 80057fe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005804:	2b01      	cmp	r3, #1
 8005806:	d118      	bne.n	800583a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005808:	f3ef 8310 	mrs	r3, PRIMASK
 800580c:	60bb      	str	r3, [r7, #8]
  return(result);
 800580e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005812:	2301      	movs	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f383 8810 	msr	PRIMASK, r3
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2110      	movs	r1, #16
 800582a:	438a      	bics	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f383 8810 	msr	PRIMASK, r3
}
 8005838:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	2120      	movs	r1, #32
 8005840:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	46bd      	mov	sp, r7
 8005852:	b00e      	add	sp, #56	; 0x38
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	fffffedf 	.word	0xfffffedf

0800585c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b094      	sub	sp, #80	; 0x50
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b20      	cmp	r3, #32
 8005870:	d06f      	beq.n	8005952 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8005872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005874:	225a      	movs	r2, #90	; 0x5a
 8005876:	2100      	movs	r1, #0
 8005878:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800587a:	f3ef 8310 	mrs	r3, PRIMASK
 800587e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005880:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005882:	64bb      	str	r3, [r7, #72]	; 0x48
 8005884:	2301      	movs	r3, #1
 8005886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f383 8810 	msr	PRIMASK, r3
}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	493a      	ldr	r1, [pc, #232]	; (8005984 <UART_DMAReceiveCplt+0x128>)
 800589c:	400a      	ands	r2, r1
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	f383 8810 	msr	PRIMASK, r3
}
 80058aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ac:	f3ef 8310 	mrs	r3, PRIMASK
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b4:	647b      	str	r3, [r7, #68]	; 0x44
 80058b6:	2301      	movs	r3, #1
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	f383 8810 	msr	PRIMASK, r3
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2101      	movs	r1, #1
 80058ce:	438a      	bics	r2, r1
 80058d0:	609a      	str	r2, [r3, #8]
 80058d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	f383 8810 	msr	PRIMASK, r3
}
 80058dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058de:	f3ef 8310 	mrs	r3, PRIMASK
 80058e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e6:	643b      	str	r3, [r7, #64]	; 0x40
 80058e8:	2301      	movs	r3, #1
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ee:	f383 8810 	msr	PRIMASK, r3
}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2140      	movs	r1, #64	; 0x40
 8005900:	438a      	bics	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005906:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	f383 8810 	msr	PRIMASK, r3
}
 800590e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	2120      	movs	r1, #32
 8005916:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	2b01      	cmp	r3, #1
 800591e:	d118      	bne.n	8005952 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005920:	f3ef 8310 	mrs	r3, PRIMASK
 8005924:	60fb      	str	r3, [r7, #12]
  return(result);
 8005926:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800592a:	2301      	movs	r3, #1
 800592c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f383 8810 	msr	PRIMASK, r3
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2110      	movs	r1, #16
 8005942:	438a      	bics	r2, r1
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f383 8810 	msr	PRIMASK, r3
}
 8005950:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005954:	2200      	movs	r2, #0
 8005956:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595c:	2b01      	cmp	r3, #1
 800595e:	d108      	bne.n	8005972 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005962:	2258      	movs	r2, #88	; 0x58
 8005964:	5a9a      	ldrh	r2, [r3, r2]
 8005966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005968:	0011      	movs	r1, r2
 800596a:	0018      	movs	r0, r3
 800596c:	f7fc f98a 	bl	8001c84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005970:	e003      	b.n	800597a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005974:	0018      	movs	r0, r3
 8005976:	f7ff fb33 	bl	8004fe0 <HAL_UART_RxCpltCallback>
}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	b014      	add	sp, #80	; 0x50
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	fffffeff 	.word	0xfffffeff

08005988 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d10a      	bne.n	80059ba <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2258      	movs	r2, #88	; 0x58
 80059a8:	5a9b      	ldrh	r3, [r3, r2]
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	0011      	movs	r1, r2
 80059b2:	0018      	movs	r0, r3
 80059b4:	f7fc f966 	bl	8001c84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059b8:	e003      	b.n	80059c2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	0018      	movs	r0, r3
 80059be:	f7ff fb17 	bl	8004ff0 <HAL_UART_RxHalfCpltCallback>
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b004      	add	sp, #16
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2280      	movs	r2, #128	; 0x80
 80059e2:	589b      	ldr	r3, [r3, r2]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d10a      	bne.n	8005a0a <UART_DMAError+0x40>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2b21      	cmp	r3, #33	; 0x21
 80059f8:	d107      	bne.n	8005a0a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2252      	movs	r2, #82	; 0x52
 80059fe:	2100      	movs	r1, #0
 8005a00:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	0018      	movs	r0, r3
 8005a06:	f7ff fea1 	bl	800574c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2240      	movs	r2, #64	; 0x40
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d10a      	bne.n	8005a2e <UART_DMAError+0x64>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b22      	cmp	r3, #34	; 0x22
 8005a1c:	d107      	bne.n	8005a2e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	225a      	movs	r2, #90	; 0x5a
 8005a22:	2100      	movs	r1, #0
 8005a24:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7ff feb3 	bl	8005794 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2284      	movs	r2, #132	; 0x84
 8005a32:	589b      	ldr	r3, [r3, r2]
 8005a34:	2210      	movs	r2, #16
 8005a36:	431a      	orrs	r2, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2184      	movs	r1, #132	; 0x84
 8005a3c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7fc f95d 	bl	8001d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b006      	add	sp, #24
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	225a      	movs	r2, #90	; 0x5a
 8005a60:	2100      	movs	r1, #0
 8005a62:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2252      	movs	r2, #82	; 0x52
 8005a68:	2100      	movs	r1, #0
 8005a6a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f7fc f946 	bl	8001d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b004      	add	sp, #16
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a84:	f3ef 8310 	mrs	r3, PRIMASK
 8005a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	2301      	movs	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2140      	movs	r1, #64	; 0x40
 8005aa6:	438a      	bics	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f383 8810 	msr	PRIMASK, r3
}
 8005ab4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7ff fa83 	bl	8004fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b006      	add	sp, #24
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b002      	add	sp, #8
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae2:	b5b0      	push	{r4, r5, r7, lr}
 8005ae4:	b08a      	sub	sp, #40	; 0x28
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	1dbb      	adds	r3, r7, #6
 8005aee:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	589b      	ldr	r3, [r3, r2]
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d156      	bne.n	8005ba8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005b00:	1dbb      	adds	r3, r7, #6
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e04e      	b.n	8005baa <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	015b      	lsls	r3, r3, #5
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d109      	bne.n	8005b2c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2201      	movs	r2, #1
 8005b24:	4013      	ands	r3, r2
 8005b26:	d001      	beq.n	8005b2c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e03e      	b.n	8005baa <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005b38:	2527      	movs	r5, #39	; 0x27
 8005b3a:	197c      	adds	r4, r7, r5
 8005b3c:	1dbb      	adds	r3, r7, #6
 8005b3e:	881a      	ldrh	r2, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7ff fd61 	bl	800560c <UART_Start_Receive_DMA>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005b4e:	197b      	adds	r3, r7, r5
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d124      	bne.n	8005ba0 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d11c      	bne.n	8005b98 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2210      	movs	r2, #16
 8005b64:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b66:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6a:	617b      	str	r3, [r7, #20]
  return(result);
 8005b6c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6e:	623b      	str	r3, [r7, #32]
 8005b70:	2301      	movs	r3, #1
 8005b72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f383 8810 	msr	PRIMASK, r3
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2110      	movs	r1, #16
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f383 8810 	msr	PRIMASK, r3
}
 8005b96:	e003      	b.n	8005ba0 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005b98:	2327      	movs	r3, #39	; 0x27
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005ba0:	2327      	movs	r3, #39	; 0x27
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	e000      	b.n	8005baa <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
  }
}
 8005baa:	0018      	movs	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b00a      	add	sp, #40	; 0x28
 8005bb0:	bdb0      	pop	{r4, r5, r7, pc}

08005bb2 <memset>:
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	1882      	adds	r2, r0, r2
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d100      	bne.n	8005bbc <memset+0xa>
 8005bba:	4770      	bx	lr
 8005bbc:	7019      	strb	r1, [r3, #0]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	e7f9      	b.n	8005bb6 <memset+0x4>
	...

08005bc4 <__libc_init_array>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	2600      	movs	r6, #0
 8005bc8:	4c0c      	ldr	r4, [pc, #48]	; (8005bfc <__libc_init_array+0x38>)
 8005bca:	4d0d      	ldr	r5, [pc, #52]	; (8005c00 <__libc_init_array+0x3c>)
 8005bcc:	1b64      	subs	r4, r4, r5
 8005bce:	10a4      	asrs	r4, r4, #2
 8005bd0:	42a6      	cmp	r6, r4
 8005bd2:	d109      	bne.n	8005be8 <__libc_init_array+0x24>
 8005bd4:	2600      	movs	r6, #0
 8005bd6:	f000 f823 	bl	8005c20 <_init>
 8005bda:	4c0a      	ldr	r4, [pc, #40]	; (8005c04 <__libc_init_array+0x40>)
 8005bdc:	4d0a      	ldr	r5, [pc, #40]	; (8005c08 <__libc_init_array+0x44>)
 8005bde:	1b64      	subs	r4, r4, r5
 8005be0:	10a4      	asrs	r4, r4, #2
 8005be2:	42a6      	cmp	r6, r4
 8005be4:	d105      	bne.n	8005bf2 <__libc_init_array+0x2e>
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	00b3      	lsls	r3, r6, #2
 8005bea:	58eb      	ldr	r3, [r5, r3]
 8005bec:	4798      	blx	r3
 8005bee:	3601      	adds	r6, #1
 8005bf0:	e7ee      	b.n	8005bd0 <__libc_init_array+0xc>
 8005bf2:	00b3      	lsls	r3, r6, #2
 8005bf4:	58eb      	ldr	r3, [r5, r3]
 8005bf6:	4798      	blx	r3
 8005bf8:	3601      	adds	r6, #1
 8005bfa:	e7f2      	b.n	8005be2 <__libc_init_array+0x1e>
 8005bfc:	08005c84 	.word	0x08005c84
 8005c00:	08005c84 	.word	0x08005c84
 8005c04:	08005c88 	.word	0x08005c88
 8005c08:	08005c84 	.word	0x08005c84

08005c0c <memcpy>:
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d100      	bne.n	8005c16 <memcpy+0xa>
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	5ccc      	ldrb	r4, [r1, r3]
 8005c18:	54c4      	strb	r4, [r0, r3]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	e7f8      	b.n	8005c10 <memcpy+0x4>
	...

08005c20 <_init>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr

08005c2c <_fini>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr
